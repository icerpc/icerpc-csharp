// Copyright (c) ZeroC, Inc. All rights reserved.

// Ice version 4.0.0-alpha.0
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//

#nullable enable
#pragma warning disable SA1300 // Element must begin with upper case letter
#pragma warning disable SA1306 // Field names must begin with lower case letter
#pragma warning disable SA1309 // Field names must not begin with underscore
#pragma warning disable SA1312 // Variable names must begin with lower case letter
#pragma warning disable SA1313 // Parameter names must begin with lower case letter
#pragma warning disable CA1707 // Remove the underscores from member name

#pragma warning disable 1591

namespace IceRpc.Tests.Operations
{
    public enum MyEnum : int
    {
        enum1,

        enum2,

        enum3
    }

    /// <summary>Helper class for marshaling and unmarshaling <see cref="MyEnum"/>.</summary>
    public static class MyEnumHelper
    {
        public static readonly ZeroC.Ice.InputStreamReader<MyEnum> IceReader = ReadMyEnum;

        public static readonly ZeroC.Ice.OutputStreamWriter<MyEnum> IceWriter = Write;

        public static MyEnum AsMyEnum(this int value) =>
            0 <= value && value <= 2 ? (MyEnum)value : throw new ZeroC.Ice.InvalidDataException($"invalid enumerator value `{value}' for IceRpc.Tests.Operations.MyEnum");

        public static MyEnum ReadMyEnum(this ZeroC.Ice.InputStream istr) =>
            AsMyEnum(istr.ReadSize());

        public static void Write(this ZeroC.Ice.OutputStream ostr, MyEnum value) =>
            ostr.WriteSize((int)value);
    }
}

namespace IceRpc.Tests.Operations
{
    /// <summary>Proxy interface used to call remote Ice objects that implement Slice interface TestService.
    /// <seealso cref="ITestService"/>.</summary>
    [ZeroC.Ice.TypeId("::IceRpc::Tests::Operations::TestService")]
    public partial interface ITestServicePrx : ZeroC.Ice.IObjectPrx
    {
        /// <summary>Provides a <see cref="ZeroC.Ice.OutgoingRequestFrame"/> factory method for each remote operation defined in <see cref="ITestServicePrx"/>.</summary>
        public static new class Request
        {
            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingRequestFrame"/> for OpVoid operation.</summary>
            /// <param name="proxy">Proxy to the target Ice Object.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static ZeroC.Ice.OutgoingRequestFrame OpVoid(ZeroC.Ice.IObjectPrx proxy, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                ZeroC.Ice.OutgoingRequestFrame.WithEmptyArgs(proxy, "opVoid", idempotent: false, context, cancel);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingRequestFrame"/> for OpByte operation.</summary>
            /// <param name="proxy">Proxy to the target Ice Object.</param>
            /// <param name="args">The remote operation arguments.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static ZeroC.Ice.OutgoingRequestFrame OpByte(ZeroC.Ice.IObjectPrx proxy, in (byte P1, byte P2) args, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                ZeroC.Ice.OutgoingRequestFrame.WithArgs(
                    proxy,
                    "opByte",
                    idempotent: false,
                    compress: false,
                    format: default,
                    context,
                    in args,
                    (ZeroC.Ice.OutputStream ostr, in (byte P1, byte P2) value) =>
                    {
                        ostr.WriteByte(value.P1);
                        ostr.WriteByte(value.P2);
                    },
                    cancel);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingRequestFrame"/> for OpBool operation.</summary>
            /// <param name="proxy">Proxy to the target Ice Object.</param>
            /// <param name="args">The remote operation arguments.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static ZeroC.Ice.OutgoingRequestFrame OpBool(ZeroC.Ice.IObjectPrx proxy, in (bool P1, bool P2) args, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                ZeroC.Ice.OutgoingRequestFrame.WithArgs(
                    proxy,
                    "opBool",
                    idempotent: false,
                    compress: false,
                    format: default,
                    context,
                    in args,
                    (ZeroC.Ice.OutputStream ostr, in (bool P1, bool P2) value) =>
                    {
                        ostr.WriteBool(value.P1);
                        ostr.WriteBool(value.P2);
                    },
                    cancel);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingRequestFrame"/> for OpShortIntLong operation.</summary>
            /// <param name="proxy">Proxy to the target Ice Object.</param>
            /// <param name="args">The remote operation arguments.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static ZeroC.Ice.OutgoingRequestFrame OpShortIntLong(ZeroC.Ice.IObjectPrx proxy, in (short P1, int P2, long P3) args, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                ZeroC.Ice.OutgoingRequestFrame.WithArgs(
                    proxy,
                    "opShortIntLong",
                    idempotent: false,
                    compress: false,
                    format: default,
                    context,
                    in args,
                    (ZeroC.Ice.OutputStream ostr, in (short P1, int P2, long P3) value) =>
                    {
                        ostr.WriteShort(value.P1);
                        ostr.WriteInt(value.P2);
                        ostr.WriteLong(value.P3);
                    },
                    cancel);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingRequestFrame"/> for OpUShortUIntULong operation.</summary>
            /// <param name="proxy">Proxy to the target Ice Object.</param>
            /// <param name="args">The remote operation arguments.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static ZeroC.Ice.OutgoingRequestFrame OpUShortUIntULong(ZeroC.Ice.IObjectPrx proxy, in (ushort P1, uint P2, ulong P3) args, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                ZeroC.Ice.OutgoingRequestFrame.WithArgs(
                    proxy,
                    "opUShortUIntULong",
                    idempotent: false,
                    compress: false,
                    format: default,
                    context,
                    in args,
                    (ZeroC.Ice.OutputStream ostr, in (ushort P1, uint P2, ulong P3) value) =>
                    {
                        ostr.WriteUShort(value.P1);
                        ostr.WriteUInt(value.P2);
                        ostr.WriteULong(value.P3);
                    },
                    cancel);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingRequestFrame"/> for OpVarInt operation.</summary>
            /// <param name="proxy">Proxy to the target Ice Object.</param>
            /// <param name="args">The remote operation arguments.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static ZeroC.Ice.OutgoingRequestFrame OpVarInt(ZeroC.Ice.IObjectPrx proxy, int args, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                ZeroC.Ice.OutgoingRequestFrame.WithArgs(
                    proxy,
                    "opVarInt",
                    idempotent: false,
                    compress: false,
                    format: default,
                    context,
                    args,
                    ZeroC.Ice.OutputStream.IceWriterFromVarInt,
                    cancel);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingRequestFrame"/> for OpVarUInt operation.</summary>
            /// <param name="proxy">Proxy to the target Ice Object.</param>
            /// <param name="args">The remote operation arguments.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static ZeroC.Ice.OutgoingRequestFrame OpVarUInt(ZeroC.Ice.IObjectPrx proxy, uint args, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                ZeroC.Ice.OutgoingRequestFrame.WithArgs(
                    proxy,
                    "opVarUInt",
                    idempotent: false,
                    compress: false,
                    format: default,
                    context,
                    args,
                    ZeroC.Ice.OutputStream.IceWriterFromVarUInt,
                    cancel);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingRequestFrame"/> for OpVarLong operation.</summary>
            /// <param name="proxy">Proxy to the target Ice Object.</param>
            /// <param name="args">The remote operation arguments.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static ZeroC.Ice.OutgoingRequestFrame OpVarLong(ZeroC.Ice.IObjectPrx proxy, long args, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                ZeroC.Ice.OutgoingRequestFrame.WithArgs(
                    proxy,
                    "opVarLong",
                    idempotent: false,
                    compress: false,
                    format: default,
                    context,
                    args,
                    ZeroC.Ice.OutputStream.IceWriterFromVarLong,
                    cancel);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingRequestFrame"/> for OpVarULong operation.</summary>
            /// <param name="proxy">Proxy to the target Ice Object.</param>
            /// <param name="args">The remote operation arguments.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static ZeroC.Ice.OutgoingRequestFrame OpVarULong(ZeroC.Ice.IObjectPrx proxy, ulong args, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                ZeroC.Ice.OutgoingRequestFrame.WithArgs(
                    proxy,
                    "opVarULong",
                    idempotent: false,
                    compress: false,
                    format: default,
                    context,
                    args,
                    ZeroC.Ice.OutputStream.IceWriterFromVarULong,
                    cancel);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingRequestFrame"/> for OpFloatDouble operation.</summary>
            /// <param name="proxy">Proxy to the target Ice Object.</param>
            /// <param name="args">The remote operation arguments.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static ZeroC.Ice.OutgoingRequestFrame OpFloatDouble(ZeroC.Ice.IObjectPrx proxy, in (float P1, double P2) args, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                ZeroC.Ice.OutgoingRequestFrame.WithArgs(
                    proxy,
                    "opFloatDouble",
                    idempotent: false,
                    compress: false,
                    format: default,
                    context,
                    in args,
                    (ZeroC.Ice.OutputStream ostr, in (float P1, double P2) value) =>
                    {
                        ostr.WriteFloat(value.P1);
                        ostr.WriteDouble(value.P2);
                    },
                    cancel);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingRequestFrame"/> for OpMyEnum operation.</summary>
            /// <param name="proxy">Proxy to the target Ice Object.</param>
            /// <param name="args">The remote operation arguments.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static ZeroC.Ice.OutgoingRequestFrame OpMyEnum(ZeroC.Ice.IObjectPrx proxy, MyEnum args, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                ZeroC.Ice.OutgoingRequestFrame.WithArgs(
                    proxy,
                    "opMyEnum",
                    idempotent: false,
                    compress: false,
                    format: default,
                    context,
                    args,
                    MyEnumHelper.IceWriter,
                    cancel);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingRequestFrame"/> for OpString operation.</summary>
            /// <param name="proxy">Proxy to the target Ice Object.</param>
            /// <param name="args">The remote operation arguments.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static ZeroC.Ice.OutgoingRequestFrame OpString(ZeroC.Ice.IObjectPrx proxy, string args, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                ZeroC.Ice.OutgoingRequestFrame.WithArgs(
                    proxy,
                    "opString",
                    idempotent: false,
                    compress: false,
                    format: default,
                    context,
                    args,
                    ZeroC.Ice.OutputStream.IceWriterFromString,
                    cancel);
        }

        /// <summary>Holds a <see cref="ZeroC.Ice.InputStreamReader{T}"/> for each non-void remote operation defined in <see cref="ITestServicePrx"/>.</summary>
        public static new class Response
        {
            /// <summary>The <see cref="ZeroC.Ice.ResponseReader{T}"/> for the return type of operation OpByte.</summary>
            public static (byte R1, byte R2) OpByte(ZeroC.Ice.IObjectPrx proxy, ZeroC.Ice.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, istr =>
                {
                    byte iceP_r1 = istr.ReadByte();
                    byte iceP_r2 = istr.ReadByte();
                    return (iceP_r1, iceP_r2);
                });

            /// <summary>The <see cref="ZeroC.Ice.ResponseReader{T}"/> for the return type of operation OpBool.</summary>
            public static (bool R1, bool R2) OpBool(ZeroC.Ice.IObjectPrx proxy, ZeroC.Ice.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, istr =>
                {
                    bool iceP_r1 = istr.ReadBool();
                    bool iceP_r2 = istr.ReadBool();
                    return (iceP_r1, iceP_r2);
                });

            /// <summary>The <see cref="ZeroC.Ice.ResponseReader{T}"/> for the return type of operation OpShortIntLong.</summary>
            public static (long R1, short R2, int R3, long R4) OpShortIntLong(ZeroC.Ice.IObjectPrx proxy, ZeroC.Ice.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, istr =>
                {
                    long iceP_r1 = istr.ReadLong();
                    short iceP_r2 = istr.ReadShort();
                    int iceP_r3 = istr.ReadInt();
                    long iceP_r4 = istr.ReadLong();
                    return (iceP_r1, iceP_r2, iceP_r3, iceP_r4);
                });

            /// <summary>The <see cref="ZeroC.Ice.ResponseReader{T}"/> for the return type of operation OpUShortUIntULong.</summary>
            public static (ulong R1, ushort R2, uint R3, ulong R4) OpUShortUIntULong(ZeroC.Ice.IObjectPrx proxy, ZeroC.Ice.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, istr =>
                {
                    ulong iceP_r1 = istr.ReadULong();
                    ushort iceP_r2 = istr.ReadUShort();
                    uint iceP_r3 = istr.ReadUInt();
                    ulong iceP_r4 = istr.ReadULong();
                    return (iceP_r1, iceP_r2, iceP_r3, iceP_r4);
                });

            /// <summary>The <see cref="ZeroC.Ice.ResponseReader{T}"/> for the return type of operation OpVarInt.</summary>
            public static int OpVarInt(ZeroC.Ice.IObjectPrx proxy, ZeroC.Ice.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, ZeroC.Ice.InputStream.IceReaderIntoVarInt);

            /// <summary>The <see cref="ZeroC.Ice.ResponseReader{T}"/> for the return type of operation OpVarUInt.</summary>
            public static uint OpVarUInt(ZeroC.Ice.IObjectPrx proxy, ZeroC.Ice.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, ZeroC.Ice.InputStream.IceReaderIntoVarUInt);

            /// <summary>The <see cref="ZeroC.Ice.ResponseReader{T}"/> for the return type of operation OpVarLong.</summary>
            public static long OpVarLong(ZeroC.Ice.IObjectPrx proxy, ZeroC.Ice.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, ZeroC.Ice.InputStream.IceReaderIntoVarLong);

            /// <summary>The <see cref="ZeroC.Ice.ResponseReader{T}"/> for the return type of operation OpVarULong.</summary>
            public static ulong OpVarULong(ZeroC.Ice.IObjectPrx proxy, ZeroC.Ice.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, ZeroC.Ice.InputStream.IceReaderIntoVarULong);

            /// <summary>The <see cref="ZeroC.Ice.ResponseReader{T}"/> for the return type of operation OpFloatDouble.</summary>
            public static (double R1, float R2, double R3) OpFloatDouble(ZeroC.Ice.IObjectPrx proxy, ZeroC.Ice.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, istr =>
                {
                    double iceP_r1 = istr.ReadDouble();
                    float iceP_r2 = istr.ReadFloat();
                    double iceP_r3 = istr.ReadDouble();
                    return (iceP_r1, iceP_r2, iceP_r3);
                });

            /// <summary>The <see cref="ZeroC.Ice.ResponseReader{T}"/> for the return type of operation OpMyEnum.</summary>
            public static (MyEnum R1, MyEnum R2) OpMyEnum(ZeroC.Ice.IObjectPrx proxy, ZeroC.Ice.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, istr =>
                {
                    MyEnum iceP_r1 = MyEnumHelper.ReadMyEnum(istr);
                    MyEnum iceP_r2 = MyEnumHelper.ReadMyEnum(istr);
                    return (iceP_r1, iceP_r2);
                });

            /// <summary>The <see cref="ZeroC.Ice.ResponseReader{T}"/> for the return type of operation OpString.</summary>
            public static string OpString(ZeroC.Ice.IObjectPrx proxy, ZeroC.Ice.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, ZeroC.Ice.InputStream.IceReaderIntoString);
        }

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        void OpVoid(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.OpVoid(this, context, cancel), IsOneway);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task OpVoidAsync(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.OpVoid(this, context, cancel), IsOneway, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:</returns>
        (byte R1, byte R2) OpByte(byte p1, byte p2, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.OpByte(this, (p1, p2), context, cancel), Response.OpByte);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(byte R1, byte R2)> OpByteAsync(byte p1, byte p2, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.OpByte(this, (p1, p2), context, cancel), Response.OpByte, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:</returns>
        (bool R1, bool R2) OpBool(bool p1, bool p2, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.OpBool(this, (p1, p2), context, cancel), Response.OpBool);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(bool R1, bool R2)> OpBoolAsync(bool p1, bool p2, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.OpBool(this, (p1, p2), context, cancel), Response.OpBool, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:</returns>
        (long R1, short R2, int R3, long R4) OpShortIntLong(short p1, int p2, long p3, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.OpShortIntLong(this, (p1, p2, p3), context, cancel), Response.OpShortIntLong);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(long R1, short R2, int R3, long R4)> OpShortIntLongAsync(short p1, int p2, long p3, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.OpShortIntLong(this, (p1, p2, p3), context, cancel), Response.OpShortIntLong, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:</returns>
        (ulong R1, ushort R2, uint R3, ulong R4) OpUShortUIntULong(ushort p1, uint p2, ulong p3, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.OpUShortUIntULong(this, (p1, p2, p3), context, cancel), Response.OpUShortUIntULong);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(ulong R1, ushort R2, uint R3, ulong R4)> OpUShortUIntULongAsync(ushort p1, uint p2, ulong p3, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.OpUShortUIntULong(this, (p1, p2, p3), context, cancel), Response.OpUShortUIntULong, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        int OpVarInt(int v, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.OpVarInt(this, v, context, cancel), Response.OpVarInt);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<int> OpVarIntAsync(int v, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.OpVarInt(this, v, context, cancel), Response.OpVarInt, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        uint OpVarUInt(uint v, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.OpVarUInt(this, v, context, cancel), Response.OpVarUInt);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<uint> OpVarUIntAsync(uint v, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.OpVarUInt(this, v, context, cancel), Response.OpVarUInt, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        long OpVarLong(long v, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.OpVarLong(this, v, context, cancel), Response.OpVarLong);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<long> OpVarLongAsync(long v, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.OpVarLong(this, v, context, cancel), Response.OpVarLong, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        ulong OpVarULong(ulong v, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.OpVarULong(this, v, context, cancel), Response.OpVarULong);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<ulong> OpVarULongAsync(ulong v, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.OpVarULong(this, v, context, cancel), Response.OpVarULong, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:</returns>
        (double R1, float R2, double R3) OpFloatDouble(float p1, double p2, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.OpFloatDouble(this, (p1, p2), context, cancel), Response.OpFloatDouble);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(double R1, float R2, double R3)> OpFloatDoubleAsync(float p1, double p2, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.OpFloatDouble(this, (p1, p2), context, cancel), Response.OpFloatDouble, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:</returns>
        (MyEnum R1, MyEnum R2) OpMyEnum(MyEnum p1, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.OpMyEnum(this, p1, context, cancel), Response.OpMyEnum);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(MyEnum R1, MyEnum R2)> OpMyEnumAsync(MyEnum p1, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.OpMyEnum(this, p1, context, cancel), Response.OpMyEnum, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        string OpString(string value, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.OpString(this, value, context, cancel), Response.OpString);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<string> OpStringAsync(string value, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.OpString(this, value, context, cancel), Response.OpString, progress);

        /// <summary>Factory for <see cref="ITestServicePrx"/> proxies.</summary>
        public static readonly new ZeroC.Ice.ProxyFactory<ITestServicePrx> Factory =
            (reference) => new _TestServicePrx(reference);

        /// <summary>An <see cref="ZeroC.Ice.InputStreamReader{T}"/> used to read <see cref="ITestServicePrx"/> proxies.</summary>
        public static readonly new ZeroC.Ice.InputStreamReader<ITestServicePrx> IceReader =
            istr => istr.ReadProxy(Factory);

        // <summary>An <see cref="InputStreamReader{T}"/> used to read <see cref="ITestServicePrx"/> nullable proxies.</summary>
        public static readonly new ZeroC.Ice.InputStreamReader<ITestServicePrx?> IceReaderIntoNullable =
            istr => istr.ReadNullableProxy(Factory);

        /// <summary>Converts the string representation of a proxy to its <see cref="ITestServicePrx"/> equivalent.</summary>
        /// <param name="s">The proxy string representation.</param>
        /// <param name="communicator">The communicator for the new proxy</param>
        /// <returns>The new proxy</returns>
        /// <exception cref="global::System.FormatException"><c>s</c> does not contain a valid string representation of a proxy.</exception>
        public static new ITestServicePrx Parse(string s, ZeroC.Ice.Communicator communicator) => new _TestServicePrx(ZeroC.Ice.Reference.Parse(s, communicator));

        /// <summary>Converts the string representation of a proxy to its <see cref="ITestServicePrx"/> equivalent.</summary>
        /// <param name="s">The proxy string representation.</param>
        /// <param name="communicator">The communicator for the new proxy</param>
        /// <param name="prx">When this method returns it contains the new proxy, if the conversion succeeded or null if the conversion failed.</param>
        /// <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(string s, ZeroC.Ice.Communicator communicator, out ITestServicePrx? prx)
        {
            try
            {
                prx = new _TestServicePrx(ZeroC.Ice.Reference.Parse(s, communicator));
            }
            catch (global::System.Exception)
            {
                prx = null;
                return false;
            }
            return true;
        }
    }

    internal sealed class _TestServicePrx : ZeroC.Ice.ObjectPrx, ITestServicePrx
    {
        internal _TestServicePrx(ZeroC.Ice.Reference reference)
            : base(reference)
        {
        }

        ZeroC.Ice.IObjectPrx ZeroC.Ice.IObjectPrx.IceClone(ZeroC.Ice.Reference reference) => new _TestServicePrx(reference);
    }
}

namespace IceRpc.Tests.Operations
{
    /// <summary>Interface used to implement servants for Slice interface TestService.
    /// <seealso cref="ITestServicePrx"/>.</summary>
    [ZeroC.Ice.TypeId("::IceRpc::Tests::Operations::TestService")]
    public partial interface ITestService : ZeroC.Ice.IObject
    {
        /// <summary>Holds a <see cref="ZeroC.Ice.InputStreamReader{T}"/> for each remote operation with parameter(s)
        /// defined in <see cref="ITestService"/>.</summary>
        public static new class Request
        {
            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameters of operation OpByte.</summary>
            public static (byte P1, byte P2) OpByte(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, istr =>
                {
                    byte iceP_p1 = istr.ReadByte();
                    byte iceP_p2 = istr.ReadByte();
                    return (iceP_p1, iceP_p2);
                });

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameters of operation OpBool.</summary>
            public static (bool P1, bool P2) OpBool(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, istr =>
                {
                    bool iceP_p1 = istr.ReadBool();
                    bool iceP_p2 = istr.ReadBool();
                    return (iceP_p1, iceP_p2);
                });

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameters of operation OpShortIntLong.</summary>
            public static (short P1, int P2, long P3) OpShortIntLong(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, istr =>
                {
                    short iceP_p1 = istr.ReadShort();
                    int iceP_p2 = istr.ReadInt();
                    long iceP_p3 = istr.ReadLong();
                    return (iceP_p1, iceP_p2, iceP_p3);
                });

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameters of operation OpUShortUIntULong.</summary>
            public static (ushort P1, uint P2, ulong P3) OpUShortUIntULong(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, istr =>
                {
                    ushort iceP_p1 = istr.ReadUShort();
                    uint iceP_p2 = istr.ReadUInt();
                    ulong iceP_p3 = istr.ReadULong();
                    return (iceP_p1, iceP_p2, iceP_p3);
                });

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameter of operation OpVarInt.</summary>
            public static int OpVarInt(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, ZeroC.Ice.InputStream.IceReaderIntoVarInt);

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameter of operation OpVarUInt.</summary>
            public static uint OpVarUInt(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, ZeroC.Ice.InputStream.IceReaderIntoVarUInt);

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameter of operation OpVarLong.</summary>
            public static long OpVarLong(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, ZeroC.Ice.InputStream.IceReaderIntoVarLong);

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameter of operation OpVarULong.</summary>
            public static ulong OpVarULong(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, ZeroC.Ice.InputStream.IceReaderIntoVarULong);

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameters of operation OpFloatDouble.</summary>
            public static (float P1, double P2) OpFloatDouble(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, istr =>
                {
                    float iceP_p1 = istr.ReadFloat();
                    double iceP_p2 = istr.ReadDouble();
                    return (iceP_p1, iceP_p2);
                });

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameter of operation OpMyEnum.</summary>
            public static MyEnum OpMyEnum(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, MyEnumHelper.IceReader);

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameter of operation OpString.</summary>
            public static string OpString(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, ZeroC.Ice.InputStream.IceReaderIntoString);
        }

        /// <summary>Provides a <see cref="ZeroC.Ice.OutgoingResponseFrame"/> factory method for each non-void remote operation
        /// defined in the <see cref="ITestService"/>.</summary>
        public static new class Response
        {
            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpByte.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpByte(ZeroC.Ice.Current current, in (byte R1, byte R2) returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    in returnValue,
                    (ZeroC.Ice.OutputStream ostr, in (byte R1, byte R2) value) =>
                    {
                        ostr.WriteByte(value.R1);
                        ostr.WriteByte(value.R2);
                    });

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpBool.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpBool(ZeroC.Ice.Current current, in (bool R1, bool R2) returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    in returnValue,
                    (ZeroC.Ice.OutputStream ostr, in (bool R1, bool R2) value) =>
                    {
                        ostr.WriteBool(value.R1);
                        ostr.WriteBool(value.R2);
                    });

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpShortIntLong.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpShortIntLong(ZeroC.Ice.Current current, in (long R1, short R2, int R3, long R4) returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    in returnValue,
                    (ZeroC.Ice.OutputStream ostr, in (long R1, short R2, int R3, long R4) value) =>
                    {
                        ostr.WriteLong(value.R1);
                        ostr.WriteShort(value.R2);
                        ostr.WriteInt(value.R3);
                        ostr.WriteLong(value.R4);
                    });

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpUShortUIntULong.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpUShortUIntULong(ZeroC.Ice.Current current, in (ulong R1, ushort R2, uint R3, ulong R4) returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    in returnValue,
                    (ZeroC.Ice.OutputStream ostr, in (ulong R1, ushort R2, uint R3, ulong R4) value) =>
                    {
                        ostr.WriteULong(value.R1);
                        ostr.WriteUShort(value.R2);
                        ostr.WriteUInt(value.R3);
                        ostr.WriteULong(value.R4);
                    });

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpVarInt.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpVarInt(ZeroC.Ice.Current current, int returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    ZeroC.Ice.OutputStream.IceWriterFromVarInt);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpVarUInt.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpVarUInt(ZeroC.Ice.Current current, uint returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    ZeroC.Ice.OutputStream.IceWriterFromVarUInt);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpVarLong.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpVarLong(ZeroC.Ice.Current current, long returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    ZeroC.Ice.OutputStream.IceWriterFromVarLong);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpVarULong.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpVarULong(ZeroC.Ice.Current current, ulong returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    ZeroC.Ice.OutputStream.IceWriterFromVarULong);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpFloatDouble.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpFloatDouble(ZeroC.Ice.Current current, in (double R1, float R2, double R3) returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    in returnValue,
                    (ZeroC.Ice.OutputStream ostr, in (double R1, float R2, double R3) value) =>
                    {
                        ostr.WriteDouble(value.R1);
                        ostr.WriteFloat(value.R2);
                        ostr.WriteDouble(value.R3);
                    });

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpMyEnum.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpMyEnum(ZeroC.Ice.Current current, in (MyEnum R1, MyEnum R2) returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    in returnValue,
                    (ZeroC.Ice.OutputStream ostr, in (MyEnum R1, MyEnum R2) value) =>
                    {
                        MyEnumHelper.Write(ostr, value.R1);
                        MyEnumHelper.Write(ostr, value.R2);
                    });

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpString.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpString(ZeroC.Ice.Current current, string returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    ZeroC.Ice.OutputStream.IceWriterFromString);
        }

        private static readonly string _iceTypeId = ZeroC.Ice.TypeExtensions.GetIceTypeId(typeof(ITestService))!;
        private static readonly string[] _iceAllTypeIds = ZeroC.Ice.TypeExtensions.GetAllIceTypeIds(typeof(ITestService));

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public void OpVoid(ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:</returns>
        public (byte R1, byte R2) OpByte(byte p1, byte p2, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:</returns>
        public (bool R1, bool R2) OpBool(bool p1, bool p2, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:</returns>
        public (long R1, short R2, int R3, long R4) OpShortIntLong(short p1, int p2, long p3, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:</returns>
        public (ulong R1, ushort R2, uint R3, ulong R4) OpUShortUIntULong(ushort p1, uint p2, ulong p3, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public int OpVarInt(int v, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public uint OpVarUInt(uint v, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public long OpVarLong(long v, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public ulong OpVarULong(ulong v, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:</returns>
        public (double R1, float R2, double R3) OpFloatDouble(float p1, double p2, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:</returns>
        public (MyEnum R1, MyEnum R2) OpMyEnum(MyEnum p1, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public string OpString(string value, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        global::System.Threading.Tasks.ValueTask<string> ZeroC.Ice.IObject.IceIdAsync(ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) => new(_iceTypeId);

        global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.IEnumerable<string>> ZeroC.Ice.IObject.IceIdsAsync(ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) => new(_iceAllTypeIds);

        global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> ZeroC.Ice.IObject.DispatchAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) =>
            DispatchAsync(this, request, current, cancel);

        // This protected static DispatchAsync allows a derived class to override the instance DispatchAsync
        // and reuse the generated implementation.
        protected static global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> DispatchAsync(ITestService servant, ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) =>
            current.Operation switch
            {
                "opVoid" => servant.IceDOpVoidAsync(request, current, cancel),
                "opByte" => servant.IceDOpByteAsync(request, current, cancel),
                "opBool" => servant.IceDOpBoolAsync(request, current, cancel),
                "opShortIntLong" => servant.IceDOpShortIntLongAsync(request, current, cancel),
                "opUShortUIntULong" => servant.IceDOpUShortUIntULongAsync(request, current, cancel),
                "opVarInt" => servant.IceDOpVarIntAsync(request, current, cancel),
                "opVarUInt" => servant.IceDOpVarUIntAsync(request, current, cancel),
                "opVarLong" => servant.IceDOpVarLongAsync(request, current, cancel),
                "opVarULong" => servant.IceDOpVarULongAsync(request, current, cancel),
                "opFloatDouble" => servant.IceDOpFloatDoubleAsync(request, current, cancel),
                "opMyEnum" => servant.IceDOpMyEnumAsync(request, current, cancel),
                "opString" => servant.IceDOpStringAsync(request, current, cancel),
                "ice_id" => servant.IceDIceIdAsync(request, current, cancel),
                "ice_ids" => servant.IceDIceIdsAsync(request, current, cancel),
                "ice_isA" => servant.IceDIceIsAAsync(request, current, cancel),
                "ice_ping" => servant.IceDIcePingAsync(request, current, cancel),
                _ => throw new ZeroC.Ice.OperationNotExistException()
            };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpVoidAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            request.ReadEmptyArgs();
            this.OpVoid(current, cancel);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(
                ZeroC.Ice.OutgoingResponseFrame.WithVoidReturnValue(current));
        }

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpByteAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var args = Request.OpByte(current.Connection, request);
            var returnValue = this.OpByte(args.P1, args.P2, current, cancel);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(
                Response.OpByte(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpBoolAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var args = Request.OpBool(current.Connection, request);
            var returnValue = this.OpBool(args.P1, args.P2, current, cancel);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(
                Response.OpBool(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpShortIntLongAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var args = Request.OpShortIntLong(current.Connection, request);
            var returnValue = this.OpShortIntLong(args.P1, args.P2, args.P3, current, cancel);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(
                Response.OpShortIntLong(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpUShortUIntULongAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var args = Request.OpUShortUIntULong(current.Connection, request);
            var returnValue = this.OpUShortUIntULong(args.P1, args.P2, args.P3, current, cancel);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(
                Response.OpUShortUIntULong(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpVarIntAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var iceP_v = Request.OpVarInt(current.Connection, request);
            var returnValue = this.OpVarInt(iceP_v, current, cancel);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(
                Response.OpVarInt(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpVarUIntAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var iceP_v = Request.OpVarUInt(current.Connection, request);
            var returnValue = this.OpVarUInt(iceP_v, current, cancel);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(
                Response.OpVarUInt(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpVarLongAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var iceP_v = Request.OpVarLong(current.Connection, request);
            var returnValue = this.OpVarLong(iceP_v, current, cancel);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(
                Response.OpVarLong(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpVarULongAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var iceP_v = Request.OpVarULong(current.Connection, request);
            var returnValue = this.OpVarULong(iceP_v, current, cancel);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(
                Response.OpVarULong(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpFloatDoubleAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var args = Request.OpFloatDouble(current.Connection, request);
            var returnValue = this.OpFloatDouble(args.P1, args.P2, current, cancel);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(
                Response.OpFloatDouble(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpMyEnumAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var iceP_p1 = Request.OpMyEnum(current.Connection, request);
            var returnValue = this.OpMyEnum(iceP_p1, current, cancel);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(
                Response.OpMyEnum(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpStringAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var iceP_value = Request.OpString(current.Connection, request);
            var returnValue = this.OpString(iceP_value, current, cancel);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(
                Response.OpString(current, returnValue));
        }
    }
}

namespace IceRpc.Tests.Operations
{
    /// <summary>Interface used to implement servants for Slice interface TestService.
    /// <seealso cref="ITestServicePrx"/>.</summary>
    [ZeroC.Ice.TypeId("::IceRpc::Tests::Operations::TestService")]
    public partial interface IAsyncTestService : ZeroC.Ice.IObject
    {
        /// <summary>Holds a <see cref="ZeroC.Ice.InputStreamReader{T}"/> for each remote operation with parameter(s)
        /// defined in <see cref="IAsyncTestService"/>.</summary>
        public static new class Request
        {
            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameters of operation OpByte.</summary>
            public static (byte P1, byte P2) OpByte(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, istr =>
                {
                    byte iceP_p1 = istr.ReadByte();
                    byte iceP_p2 = istr.ReadByte();
                    return (iceP_p1, iceP_p2);
                });

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameters of operation OpBool.</summary>
            public static (bool P1, bool P2) OpBool(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, istr =>
                {
                    bool iceP_p1 = istr.ReadBool();
                    bool iceP_p2 = istr.ReadBool();
                    return (iceP_p1, iceP_p2);
                });

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameters of operation OpShortIntLong.</summary>
            public static (short P1, int P2, long P3) OpShortIntLong(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, istr =>
                {
                    short iceP_p1 = istr.ReadShort();
                    int iceP_p2 = istr.ReadInt();
                    long iceP_p3 = istr.ReadLong();
                    return (iceP_p1, iceP_p2, iceP_p3);
                });

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameters of operation OpUShortUIntULong.</summary>
            public static (ushort P1, uint P2, ulong P3) OpUShortUIntULong(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, istr =>
                {
                    ushort iceP_p1 = istr.ReadUShort();
                    uint iceP_p2 = istr.ReadUInt();
                    ulong iceP_p3 = istr.ReadULong();
                    return (iceP_p1, iceP_p2, iceP_p3);
                });

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameter of operation OpVarInt.</summary>
            public static int OpVarInt(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, ZeroC.Ice.InputStream.IceReaderIntoVarInt);

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameter of operation OpVarUInt.</summary>
            public static uint OpVarUInt(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, ZeroC.Ice.InputStream.IceReaderIntoVarUInt);

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameter of operation OpVarLong.</summary>
            public static long OpVarLong(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, ZeroC.Ice.InputStream.IceReaderIntoVarLong);

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameter of operation OpVarULong.</summary>
            public static ulong OpVarULong(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, ZeroC.Ice.InputStream.IceReaderIntoVarULong);

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameters of operation OpFloatDouble.</summary>
            public static (float P1, double P2) OpFloatDouble(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, istr =>
                {
                    float iceP_p1 = istr.ReadFloat();
                    double iceP_p2 = istr.ReadDouble();
                    return (iceP_p1, iceP_p2);
                });

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameter of operation OpMyEnum.</summary>
            public static MyEnum OpMyEnum(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, MyEnumHelper.IceReader);

            /// <summary>The <see cref="ZeroC.Ice.RequestReader{T}"/> for the parameter of operation OpString.</summary>
            public static string OpString(ZeroC.Ice.Connection connection, ZeroC.Ice.IncomingRequestFrame request) =>
                request.ReadArgs(connection, ZeroC.Ice.InputStream.IceReaderIntoString);
        }

        /// <summary>Provides a <see cref="ZeroC.Ice.OutgoingResponseFrame"/> factory method for each non-void remote operation
        /// defined in the <see cref="IAsyncTestService"/>.</summary>
        public static new class Response
        {
            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpByte.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpByte(ZeroC.Ice.Current current, in (byte R1, byte R2) returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    in returnValue,
                    (ZeroC.Ice.OutputStream ostr, in (byte R1, byte R2) value) =>
                    {
                        ostr.WriteByte(value.R1);
                        ostr.WriteByte(value.R2);
                    });

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpBool.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpBool(ZeroC.Ice.Current current, in (bool R1, bool R2) returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    in returnValue,
                    (ZeroC.Ice.OutputStream ostr, in (bool R1, bool R2) value) =>
                    {
                        ostr.WriteBool(value.R1);
                        ostr.WriteBool(value.R2);
                    });

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpShortIntLong.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpShortIntLong(ZeroC.Ice.Current current, in (long R1, short R2, int R3, long R4) returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    in returnValue,
                    (ZeroC.Ice.OutputStream ostr, in (long R1, short R2, int R3, long R4) value) =>
                    {
                        ostr.WriteLong(value.R1);
                        ostr.WriteShort(value.R2);
                        ostr.WriteInt(value.R3);
                        ostr.WriteLong(value.R4);
                    });

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpUShortUIntULong.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpUShortUIntULong(ZeroC.Ice.Current current, in (ulong R1, ushort R2, uint R3, ulong R4) returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    in returnValue,
                    (ZeroC.Ice.OutputStream ostr, in (ulong R1, ushort R2, uint R3, ulong R4) value) =>
                    {
                        ostr.WriteULong(value.R1);
                        ostr.WriteUShort(value.R2);
                        ostr.WriteUInt(value.R3);
                        ostr.WriteULong(value.R4);
                    });

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpVarInt.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpVarInt(ZeroC.Ice.Current current, int returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    ZeroC.Ice.OutputStream.IceWriterFromVarInt);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpVarUInt.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpVarUInt(ZeroC.Ice.Current current, uint returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    ZeroC.Ice.OutputStream.IceWriterFromVarUInt);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpVarLong.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpVarLong(ZeroC.Ice.Current current, long returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    ZeroC.Ice.OutputStream.IceWriterFromVarLong);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpVarULong.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpVarULong(ZeroC.Ice.Current current, ulong returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    ZeroC.Ice.OutputStream.IceWriterFromVarULong);

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpFloatDouble.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpFloatDouble(ZeroC.Ice.Current current, in (double R1, float R2, double R3) returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    in returnValue,
                    (ZeroC.Ice.OutputStream ostr, in (double R1, float R2, double R3) value) =>
                    {
                        ostr.WriteDouble(value.R1);
                        ostr.WriteFloat(value.R2);
                        ostr.WriteDouble(value.R3);
                    });

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpMyEnum.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpMyEnum(ZeroC.Ice.Current current, in (MyEnum R1, MyEnum R2) returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    in returnValue,
                    (ZeroC.Ice.OutputStream ostr, in (MyEnum R1, MyEnum R2) value) =>
                    {
                        MyEnumHelper.Write(ostr, value.R1);
                        MyEnumHelper.Write(ostr, value.R2);
                    });

            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingResponseFrame"/> for operation OpString.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
            public static ZeroC.Ice.OutgoingResponseFrame OpString(ZeroC.Ice.Current current, string returnValue) =>
                ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    ZeroC.Ice.OutputStream.IceWriterFromString);
        }

        private static readonly string _iceTypeId = ZeroC.Ice.TypeExtensions.GetIceTypeId(typeof(IAsyncTestService))!;
        private static readonly string[] _iceAllTypeIds = ZeroC.Ice.TypeExtensions.GetAllIceTypeIds(typeof(IAsyncTestService));

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask OpVoidAsync(ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(byte R1, byte R2)> OpByteAsync(byte p1, byte p2, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(bool R1, bool R2)> OpBoolAsync(bool p1, bool p2, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(long R1, short R2, int R3, long R4)> OpShortIntLongAsync(short p1, int p2, long p3, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(ulong R1, ushort R2, uint R3, ulong R4)> OpUShortUIntULongAsync(ushort p1, uint p2, ulong p3, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<int> OpVarIntAsync(int v, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<uint> OpVarUIntAsync(uint v, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<long> OpVarLongAsync(long v, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<ulong> OpVarULongAsync(ulong v, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(double R1, float R2, double R3)> OpFloatDoubleAsync(float p1, double p2, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(MyEnum R1, MyEnum R2)> OpMyEnumAsync(MyEnum p1, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<string> OpStringAsync(string value, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        global::System.Threading.Tasks.ValueTask<string> ZeroC.Ice.IObject.IceIdAsync(ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) => new(_iceTypeId);

        global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.IEnumerable<string>> ZeroC.Ice.IObject.IceIdsAsync(ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) => new(_iceAllTypeIds);

        global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> ZeroC.Ice.IObject.DispatchAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) =>
            DispatchAsync(this, request, current, cancel);

        // This protected static DispatchAsync allows a derived class to override the instance DispatchAsync
        // and reuse the generated implementation.
        protected static global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> DispatchAsync(IAsyncTestService servant, ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) =>
            current.Operation switch
            {
                "opVoid" => servant.IceDOpVoidAsync(request, current, cancel),
                "opByte" => servant.IceDOpByteAsync(request, current, cancel),
                "opBool" => servant.IceDOpBoolAsync(request, current, cancel),
                "opShortIntLong" => servant.IceDOpShortIntLongAsync(request, current, cancel),
                "opUShortUIntULong" => servant.IceDOpUShortUIntULongAsync(request, current, cancel),
                "opVarInt" => servant.IceDOpVarIntAsync(request, current, cancel),
                "opVarUInt" => servant.IceDOpVarUIntAsync(request, current, cancel),
                "opVarLong" => servant.IceDOpVarLongAsync(request, current, cancel),
                "opVarULong" => servant.IceDOpVarULongAsync(request, current, cancel),
                "opFloatDouble" => servant.IceDOpFloatDoubleAsync(request, current, cancel),
                "opMyEnum" => servant.IceDOpMyEnumAsync(request, current, cancel),
                "opString" => servant.IceDOpStringAsync(request, current, cancel),
                "ice_id" => servant.IceDIceIdAsync(request, current, cancel),
                "ice_ids" => servant.IceDIceIdsAsync(request, current, cancel),
                "ice_isA" => servant.IceDIceIsAAsync(request, current, cancel),
                "ice_ping" => servant.IceDIcePingAsync(request, current, cancel),
                _ => throw new ZeroC.Ice.OperationNotExistException()
            };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpVoidAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            request.ReadEmptyArgs();
            await this.OpVoidAsync(current, cancel).ConfigureAwait(false);
            return ZeroC.Ice.OutgoingResponseFrame.WithVoidReturnValue(current);
        }

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpByteAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var args = Request.OpByte(current.Connection, request);
            var returnValue = await this.OpByteAsync(args.P1, args.P2, current, cancel).ConfigureAwait(false);
            return Response.OpByte(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpBoolAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var args = Request.OpBool(current.Connection, request);
            var returnValue = await this.OpBoolAsync(args.P1, args.P2, current, cancel).ConfigureAwait(false);
            return Response.OpBool(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpShortIntLongAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var args = Request.OpShortIntLong(current.Connection, request);
            var returnValue = await this.OpShortIntLongAsync(args.P1, args.P2, args.P3, current, cancel).ConfigureAwait(false);
            return Response.OpShortIntLong(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpUShortUIntULongAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var args = Request.OpUShortUIntULong(current.Connection, request);
            var returnValue = await this.OpUShortUIntULongAsync(args.P1, args.P2, args.P3, current, cancel).ConfigureAwait(false);
            return Response.OpUShortUIntULong(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpVarIntAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var iceP_v = Request.OpVarInt(current.Connection, request);
            var returnValue = await this.OpVarIntAsync(iceP_v, current, cancel).ConfigureAwait(false);
            return Response.OpVarInt(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpVarUIntAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var iceP_v = Request.OpVarUInt(current.Connection, request);
            var returnValue = await this.OpVarUIntAsync(iceP_v, current, cancel).ConfigureAwait(false);
            return Response.OpVarUInt(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpVarLongAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var iceP_v = Request.OpVarLong(current.Connection, request);
            var returnValue = await this.OpVarLongAsync(iceP_v, current, cancel).ConfigureAwait(false);
            return Response.OpVarLong(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpVarULongAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var iceP_v = Request.OpVarULong(current.Connection, request);
            var returnValue = await this.OpVarULongAsync(iceP_v, current, cancel).ConfigureAwait(false);
            return Response.OpVarULong(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpFloatDoubleAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var args = Request.OpFloatDouble(current.Connection, request);
            var returnValue = await this.OpFloatDoubleAsync(args.P1, args.P2, current, cancel).ConfigureAwait(false);
            return Response.OpFloatDouble(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpMyEnumAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var iceP_p1 = Request.OpMyEnum(current.Connection, request);
            var returnValue = await this.OpMyEnumAsync(iceP_p1, current, cancel).ConfigureAwait(false);
            return Response.OpMyEnum(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOpStringAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            var iceP_value = Request.OpString(current.Connection, request);
            var returnValue = await this.OpStringAsync(iceP_value, current, cancel).ConfigureAwait(false);
            return Response.OpString(current, returnValue);
        }
    }
}
