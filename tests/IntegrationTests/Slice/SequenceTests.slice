// Copyright (c) ZeroC, Inc. All rights reserved.

module IceRpc::IntegrationTests;

interface SequenceOperations
{
    op1(a: sequence<bool>) -> sequence<bool>;
    op2(a: sequence<int8>) -> sequence<int8>;
    op3(a: sequence<uint8>) -> sequence<uint8>;
    op4(a: sequence<int16>) -> sequence<int16>;
    op5(a: sequence<uint16>) -> sequence<uint16>;
    op6(a: sequence<int32>) -> sequence<int32>;
    op7(a: sequence<uint32>) -> sequence<uint32>;
    op8(a: sequence<varint32>) -> sequence<varint32>;
    op9(a: sequence<varuint32>) -> sequence<varuint32>;
    op10(a: sequence<int64>) -> sequence<int64>;
    op11(a: sequence<uint64>) -> sequence<uint64>;
    op12(a: sequence<varint62>) -> sequence<varint62>;
    op13(a: sequence<varuint62>) -> sequence<varuint62>;
    op14(a: sequence<float32>) -> sequence<float32>;
    op15(a: sequence<float64>) -> sequence<float64>;
    op16(a: sequence<string>) -> sequence<string>;
}

interface SequenceWithOptionalValueOperations
{
    op1(a: sequence<bool?>) -> sequence<bool?>;
    op2(a: sequence<int8?>) -> sequence<int8?>;
    op3(a: sequence<uint8?>) -> sequence<uint8?>;
    op4(a: sequence<int16?>) -> sequence<int16?>;
    op5(a: sequence<uint16?>) -> sequence<uint16?>;
    op6(a: sequence<int32?>) -> sequence<int32?>;
    op7(a: sequence<uint32?>) -> sequence<uint32?>;
    op8(a: sequence<varint32?>) -> sequence<varint32?>;
    op9(a: sequence<varuint32?>) -> sequence<varuint32?>;
    op10(a: sequence<int64?>) -> sequence<int64?>;
    op11(a: sequence<uint64?>) -> sequence<uint64?>;
    op12(a: sequence<varint62?>) -> sequence<varint62?>;
    op13(a: sequence<varuint62?>) -> sequence<varuint62?>;
    op14(a: sequence<float32?>) -> sequence<float32?>;
    op15(a: sequence<float64?>) -> sequence<float64?>;
    op16(a: sequence<string?>) -> sequence<string?>;
}
