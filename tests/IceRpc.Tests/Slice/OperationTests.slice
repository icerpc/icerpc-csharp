// Copyright (c) ZeroC, Inc. All rights reserved.

module IceRpc::Slice::Tests;

// Used for testing the generated code corresponding to proxy and dispatch visitors.
interface MyOperationsA
{
    // No parameters and void return
    opWithoutParametersAndVoidReturn();

    // Single parameter and return
    opWithSingleParameterAndReturnValue(p: int32) -> int32;

    // Multiple parameter and return
    opWithMultipleParametersAndReturnValues(p1: int32, p2: int32) -> (r1: int32, r2: int32);

    // Compress attribute
    [compress(Args, Return)] opWithCompressArgsAndReturnAttribute(p: int32) -> int32;

    // Stream parameters and return alone
    opWithByteStreamArgumentAndReturn(p: stream uint8) -> stream uint8;
    opWithIntStreamArgumentAndReturn(p: stream int32) -> stream int32;
    opWithStringStreamArgumentAndReturn(p: stream string) -> stream string;

    // Stream parameters and return along regular return and parameters
    opWithBothRegularAndStreamParameterAndReturn(p1: int32, p2: stream int32) -> (r1: int32, r2: stream int32);

    // idempotent operation
    idempotent idempotentOp();

    // cancel and features as regular parameter names
    opWithSpecialParameterNames(cancel: int32, features: int32);

    // Parameter with cs::attribute
    opWithCsAttribute(p: [cs::attribute("MyAttribute")] int32) -> int32;

    // Encoded result
    [cs::encodedResult] opWithSingleReturnValueAndEncodedResultAttribute() -> int32;
    [cs::encodedResult] opWithMultipleReturnValuesAndEncodedResultAttribute() -> (r1: int32, r2: int32);

    // C# keyword as operation name
    continue();

    // ReadOnlyMemory input parameters and return values
    opReadOnlyMemory(p1: sequence<int32>) -> (r1: sequence<int32>);

    // ReadOnlyMemory optional input parameters and return values
    opReadOnlyMemoryOptional(p1: sequence<int32>?) -> (r1: sequence<int32>?);

    // ReadOnlyMemory tagged input parameters and return values
    opReadOnlyMemoryTagged(p1: tag(1) sequence<int32>?) -> (r1: tag(1) sequence<int32>?);
}

interface MyDerivedOperationsA : MyOperationsA {}
