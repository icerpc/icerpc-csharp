// Copyright (c) ZeroC, Inc. All rights reserved.

module IceRpc::Tests::Slice;

typealias OptionalUInt8Dict = dictionary<uint8, uint8?>;
typealias OptionalBoolDict = dictionary<bool, bool?>;
typealias OptionalInt16Dict = dictionary<int16, int16?>;
typealias OptionalUInt16Dict = dictionary<uint16, uint16?>;
typealias OptionalInt32Dict = dictionary<int32, int32?>;
typealias OptionalVarInt32Dict = dictionary<varint32, varint32?>;
typealias OptionalUInt32Dict = dictionary<uint32, uint32?>;
typealias OptionalVarUInt32Dict = dictionary<varuint32, varuint32?>;
typealias OptionalInt64Dict = dictionary<int64, int64?>;
typealias OptionalVarInt62Dict = dictionary<varint62, varint62?>;
typealias OptionalUInt64Dict = dictionary<uint64,uint64?>;
typealias OptionalVarUInt62Dict = dictionary<varuint62, varuint62?>;
typealias OptionalStringDict = dictionary<string, string?>;

typealias OptionalMyEnumDict = dictionary<MyEnum, MyEnum?>;
typealias OptionalMyFixedLengthEnumDict = dictionary<MyFixedLengthEnum, MyFixedLengthEnum?>;
typealias OptionalMyUncheckedEnumDict = dictionary<MyUncheckedEnum, MyUncheckedEnum?>;
typealias OptionalMyCompactStructDict = dictionary<MyCompactStruct, MyCompactStruct?>;
typealias OptionalOperationsDict = dictionary<string, Operations?>;
typealias OptionalAnotherCompactStructDict = dictionary<string, AnotherCompactStruct?>;

typealias OptionalStringCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<string, string?>;

interface DictionaryOptionalValueOperations
{
    // Optional builtin type dictionaries
    opOptionalUInt8Dict(p1: OptionalUInt8Dict, p2: OptionalUInt8Dict) -> (r1: OptionalUInt8Dict, r2: OptionalUInt8Dict);
    opOptionalBoolDict(p1: OptionalBoolDict, p2: OptionalBoolDict) -> (r1: OptionalBoolDict, r2: OptionalBoolDict);
    opOptionalInt16Dict(p1: OptionalInt16Dict, p2: OptionalInt16Dict) -> (
        r1: OptionalInt16Dict,
        r2: OptionalInt16Dict,
    );
    opOptionalUInt16Dict(p1: OptionalUInt16Dict, p2: OptionalUInt16Dict) -> (
        r1: OptionalUInt16Dict,
        r2: OptionalUInt16Dict,
    );
    opOptionalInt32Dict(p1: OptionalInt32Dict, p2: OptionalInt32Dict) -> (r1: OptionalInt32Dict, r2: OptionalInt32Dict);
    opOptionalVarInt32Dict(p1: OptionalVarInt32Dict, p2: OptionalVarInt32Dict) -> (
        r1: OptionalVarInt32Dict,
        r2: OptionalVarInt32Dict,
    );
    opOptionalUInt32Dict(p1: OptionalUInt32Dict, p2: OptionalUInt32Dict) -> (r1: OptionalUInt32Dict, r2: OptionalUInt32Dict);
    opOptionalVarUInt32Dict(p1: OptionalVarUInt32Dict, p2: OptionalVarUInt32Dict) -> (
        r1: OptionalVarUInt32Dict,
        r2: OptionalVarUInt32Dict,
    );
    opOptionalInt64Dict(p1: OptionalInt64Dict, p2: OptionalInt64Dict) -> (r1: OptionalInt64Dict, r2: OptionalInt64Dict);
    opOptionalVarInt62Dict(p1: OptionalVarInt62Dict, p2: OptionalVarInt62Dict) -> (
        r1: OptionalVarInt62Dict,
        r2: OptionalVarInt62Dict,
    );
    opOptionalUInt64Dict(p1: OptionalUInt64Dict, p2: OptionalUInt64Dict) -> (
        r1: OptionalUInt64Dict,
        r2: OptionalUInt64Dict,
    );
    opOptionalVarUInt62Dict(p1: OptionalVarUInt62Dict, p2: OptionalVarUInt62Dict) -> (
        r1: OptionalVarUInt62Dict,
        r2: OptionalVarUInt62Dict,
    );
    opOptionalStringDict(p1: OptionalStringDict, p2: OptionalStringDict) -> (
        r1: OptionalStringDict,
        r2: OptionalStringDict,
    );

    // Dictionaries with optional constructed types
    opOptionalMyEnumDict(p1: OptionalMyEnumDict, p2: OptionalMyEnumDict) -> (
        r1: OptionalMyEnumDict,
        r2: OptionalMyEnumDict,
    );
    opOptionalMyFixedLengthEnumDict(p1: OptionalMyFixedLengthEnumDict, p2: OptionalMyFixedLengthEnumDict) -> (
        r1: OptionalMyFixedLengthEnumDict,
        r2: OptionalMyFixedLengthEnumDict,
    );
    opOptionalMyUncheckedEnumDict(p1: OptionalMyUncheckedEnumDict, p2: OptionalMyUncheckedEnumDict) -> (
        r1: OptionalMyUncheckedEnumDict,
        r2: OptionalMyUncheckedEnumDict,
    );
    opOptionalMyCompactStructDict(p1: OptionalMyCompactStructDict, p2: OptionalMyCompactStructDict) -> (
        r1: OptionalMyCompactStructDict,
        r2: OptionalMyCompactStructDict,
    );
    opOptionalOperationsDict(p1: OptionalOperationsDict, p2: OptionalOperationsDict) -> (
        r1: OptionalOperationsDict,
        r2: OptionalOperationsDict,
    );
    opOptionalAnotherCompactStructDict(p1: OptionalAnotherCompactStructDict, p2: OptionalAnotherCompactStructDict) -> (
        r1: OptionalAnotherCompactStructDict,
        r2: OptionalAnotherCompactStructDict,
    );
}
