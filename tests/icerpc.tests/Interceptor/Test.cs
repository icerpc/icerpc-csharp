// Copyright (c) ZeroC, Inc. All rights reserved.

// Ice version 4.0.0-alpha.0
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//

#nullable enable
#pragma warning disable SA1300 // Element must begin with upper case letter
#pragma warning disable SA1306 // Field names must begin with lower case letter
#pragma warning disable SA1309 // Field names must not begin with underscore
#pragma warning disable SA1312 // Variable names must begin with lower case letter
#pragma warning disable SA1313 // Parameter names must begin with lower case letter
#pragma warning disable CA1707 // Remove the underscores from member name

#pragma warning disable 1591

namespace IceRpc.Tests.Interceptors
{
    /// <summary>Proxy interface used to call remote Ice objects that implement Slice interface TestService.
    /// <seealso cref="ITestService"/>.</summary>
    [ZeroC.Ice.TypeId("::IceRpc::Tests::Interceptors::TestService")]
    public partial interface ITestServicePrx : ZeroC.Ice.IObjectPrx
    {
        /// <summary>Provides a <see cref="ZeroC.Ice.OutgoingRequestFrame"/> factory method for each remote operation defined in <see cref="ITestServicePrx"/>.</summary>
        public static new class Request
        {
            /// <summary>Creates an <see cref="ZeroC.Ice.OutgoingRequestFrame"/> for Op1 operation.</summary>
            /// <param name="proxy">Proxy to the target Ice Object.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static ZeroC.Ice.OutgoingRequestFrame Op1(ZeroC.Ice.IObjectPrx proxy, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                ZeroC.Ice.OutgoingRequestFrame.WithEmptyArgs(proxy, "op1", idempotent: false, context, cancel);
        }

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        void Op1(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.Op1(this, context, cancel), IsOneway);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task Op1Async(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.Op1(this, context, cancel), IsOneway, progress);

        /// <summary>Factory for <see cref="ITestServicePrx"/> proxies.</summary>
        public static readonly new ZeroC.Ice.ProxyFactory<ITestServicePrx> Factory =
            (reference) => new _TestServicePrx(reference);

        /// <summary>An <see cref="ZeroC.Ice.InputStreamReader{T}"/> used to read <see cref="ITestServicePrx"/> proxies.</summary>
        public static readonly new ZeroC.Ice.InputStreamReader<ITestServicePrx> IceReader =
            istr => istr.ReadProxy(Factory);

        // <summary>An <see cref="InputStreamReader{T}"/> used to read <see cref="ITestServicePrx"/> nullable proxies.</summary>
        public static readonly new ZeroC.Ice.InputStreamReader<ITestServicePrx?> IceReaderIntoNullable =
            istr => istr.ReadNullableProxy(Factory);

        /// <summary>Converts the string representation of a proxy to its <see cref="ITestServicePrx"/> equivalent.</summary>
        /// <param name="s">The proxy string representation.</param>
        /// <param name="communicator">The communicator for the new proxy</param>
        /// <returns>The new proxy</returns>
        /// <exception cref="global::System.FormatException"><c>s</c> does not contain a valid string representation of a proxy.</exception>
        public static new ITestServicePrx Parse(string s, ZeroC.Ice.Communicator communicator) => new _TestServicePrx(ZeroC.Ice.Reference.Parse(s, communicator));

        /// <summary>Converts the string representation of a proxy to its <see cref="ITestServicePrx"/> equivalent.</summary>
        /// <param name="s">The proxy string representation.</param>
        /// <param name="communicator">The communicator for the new proxy</param>
        /// <param name="prx">When this method returns it contains the new proxy, if the conversion succeeded or null if the conversion failed.</param>
        /// <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(string s, ZeroC.Ice.Communicator communicator, out ITestServicePrx? prx)
        {
            try
            {
                prx = new _TestServicePrx(ZeroC.Ice.Reference.Parse(s, communicator));
            }
            catch (global::System.Exception)
            {
                prx = null;
                return false;
            }
            return true;
        }
    }

    internal sealed class _TestServicePrx : ZeroC.Ice.ObjectPrx, ITestServicePrx
    {
        internal _TestServicePrx(ZeroC.Ice.Reference reference)
            : base(reference)
        {
        }

        ZeroC.Ice.IObjectPrx ZeroC.Ice.IObjectPrx.IceClone(ZeroC.Ice.Reference reference) => new _TestServicePrx(reference);
    }
}

namespace IceRpc.Tests.Interceptors
{
    /// <summary>Interface used to implement servants for Slice interface TestService.
    /// <seealso cref="ITestServicePrx"/>.</summary>
    [ZeroC.Ice.TypeId("::IceRpc::Tests::Interceptors::TestService")]
    public partial interface ITestService : ZeroC.Ice.IObject
    {
        private static readonly string _iceTypeId = ZeroC.Ice.TypeExtensions.GetIceTypeId(typeof(ITestService))!;
        private static readonly string[] _iceAllTypeIds = ZeroC.Ice.TypeExtensions.GetAllIceTypeIds(typeof(ITestService));

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public void Op1(ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        global::System.Threading.Tasks.ValueTask<string> ZeroC.Ice.IObject.IceIdAsync(ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) => new(_iceTypeId);

        global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.IEnumerable<string>> ZeroC.Ice.IObject.IceIdsAsync(ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) => new(_iceAllTypeIds);

        global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> ZeroC.Ice.IObject.DispatchAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) =>
            DispatchAsync(this, request, current, cancel);

        // This protected static DispatchAsync allows a derived class to override the instance DispatchAsync
        // and reuse the generated implementation.
        protected static global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> DispatchAsync(ITestService servant, ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) =>
            current.Operation switch
            {
                "op1" => servant.IceDOp1Async(request, current, cancel),
                "ice_id" => servant.IceDIceIdAsync(request, current, cancel),
                "ice_ids" => servant.IceDIceIdsAsync(request, current, cancel),
                "ice_isA" => servant.IceDIceIsAAsync(request, current, cancel),
                "ice_ping" => servant.IceDIcePingAsync(request, current, cancel),
                _ => throw new ZeroC.Ice.OperationNotExistException()
            };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOp1Async(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            request.ReadEmptyArgs();
            this.Op1(current, cancel);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(
                ZeroC.Ice.OutgoingResponseFrame.WithVoidReturnValue(current));
        }
    }
}

namespace IceRpc.Tests.Interceptors
{
    /// <summary>Interface used to implement servants for Slice interface TestService.
    /// <seealso cref="ITestServicePrx"/>.</summary>
    [ZeroC.Ice.TypeId("::IceRpc::Tests::Interceptors::TestService")]
    public partial interface IAsyncTestService : ZeroC.Ice.IObject
    {
        private static readonly string _iceTypeId = ZeroC.Ice.TypeExtensions.GetIceTypeId(typeof(IAsyncTestService))!;
        private static readonly string[] _iceAllTypeIds = ZeroC.Ice.TypeExtensions.GetAllIceTypeIds(typeof(IAsyncTestService));

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask Op1Async(ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel);

        global::System.Threading.Tasks.ValueTask<string> ZeroC.Ice.IObject.IceIdAsync(ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) => new(_iceTypeId);

        global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.IEnumerable<string>> ZeroC.Ice.IObject.IceIdsAsync(ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) => new(_iceAllTypeIds);

        global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> ZeroC.Ice.IObject.DispatchAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) =>
            DispatchAsync(this, request, current, cancel);

        // This protected static DispatchAsync allows a derived class to override the instance DispatchAsync
        // and reuse the generated implementation.
        protected static global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> DispatchAsync(IAsyncTestService servant, ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel) =>
            current.Operation switch
            {
                "op1" => servant.IceDOp1Async(request, current, cancel),
                "ice_id" => servant.IceDIceIdAsync(request, current, cancel),
                "ice_ids" => servant.IceDIceIdsAsync(request, current, cancel),
                "ice_isA" => servant.IceDIceIsAAsync(request, current, cancel),
                "ice_ping" => servant.IceDIcePingAsync(request, current, cancel),
                _ => throw new ZeroC.Ice.OperationNotExistException()
            };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceDOp1Async(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            request.ReadEmptyArgs();
            await this.Op1Async(current, cancel).ConfigureAwait(false);
            return ZeroC.Ice.OutgoingResponseFrame.WithVoidReturnValue(current);
        }
    }
}
