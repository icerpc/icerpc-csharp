name: Continuous Integration

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build_and_test:

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v3
    - name: ðŸ“¦ NuGet Cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: ðŸ“¦ Cargo Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          tools/slicec-cs/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    - name: ðŸ”— Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: "7.0.x"
    - name: ðŸ”— Setup MsQuic
      run: |
        curl -sSL https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft-prod.list
        curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
        sudo apt-get update
        sudo apt-get install libmsquic
    - name: ðŸ”— Start SSH Agent
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.ICERPC_DEPLOY_KEY }}
    - name: ðŸ”¨ Build Slice Compiler
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --manifest-path tools/slicec-cs/Cargo.toml
    - name: ðŸ”Ž Lint Slice Compiler
      uses: actions-rs/clippy@master
      with:
        args: --all-features --no-deps --all-targets --manifest-path tools/slicec-cs/Cargo.toml
    - name: ðŸ§ª Test Slice Compiler
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --manifest-path tools/slicec-cs/Cargo.toml
    - name: ðŸ”— Add github NuGet repository
      run: dotnet nuget add source "https://nuget.pkg.github.com/zeroc-ice/index.json" -n GitHub -u ci --store-password-in-clear-text -p ${{ secrets.NUGET_API_TOKEN }}
    - name: ðŸ”— Restore dependencies
      run: dotnet restore
    - name: ðŸ”¨ Build
      run: dotnet build --no-restore
    - name: ðŸ§ª Test
      run: dotnet test --no-build --verbosity normal
    - name: ðŸ”¨ Build Examples
      run: ./build.sh --examples --srcdist
    - name: ðŸ”— Install Templates
      working-directory: src/IceRpc.ProjectTemplates
      run: dotnet pack && dotnet new --install bin/Debug/IceRpc.ProjectTemplates.0.1.0-preview1.nupkg
    - name: ðŸ§ª Test IceRpc Client Template
      run: mkdir -p templates-test/client && cd templates-test/client && dotnet new icerpc-client && dotnet build
    - name: ðŸ§ª Test IceRpc Server Template
      run: mkdir -p templates-test/server && cd templates-test/server && dotnet new icerpc-server && dotnet build
