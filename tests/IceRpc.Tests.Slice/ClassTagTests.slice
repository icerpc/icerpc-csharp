// Copyright (c) ZeroC, Inc. All rights reserved.

encoding = 1;

module IceRpc::Tests::Slice;

class OneTagged
{
    a: tag(1) int32?,
}

class MultiTagged
{
    mUInt8: tag(1) uint8?,
    mBool: tag(2) bool?,
    mInt16: tag(3) int16?,
    mInt32: tag(4) int32?,
    mInt64: tag(5) int64?,
    mFloat32: tag(6) float32?,
    mFloat64: tag(7) float64?,
    mString: tag(15) string?,

// TODO: These types are Slice2 only. We should either delete these or create our own copy for this test.
//    mMyEnum: tag(20) MyEnum?,
//    mMyCompactStruct: tag(21) MyCompactStruct?,
//    mAnotherCompactStruct: tag(22) AnotherCompactStruct?,
//
//    mUInt8Seq: tag(30) UInt8Seq?,
//    mStringSeq: tag(31) StringSeq?,
//    mInt16Seq: tag(32) Int16Seq?,
//    mMyEnumSeq: tag(33) MyEnumSeq?,
//    mMyCompactStructSeq: tag(34) MyCompactStructSeq?,
//    mAnotherCompactStructSeq: tag(35) AnotherCompactStructSeq?,
//
//    mInt32Dict: tag(40) Int32Dict?,
//    mStringDict: tag(41) StringDict?,
//
//    mUInt8Dict: tag(50) UInt8Dict?,
//    mMyCompactStructDict: tag(51) MyCompactStructDict?,
//    mAnotherCompactStructDict: tag(52) AnotherCompactStructDict?,
}

class A
{
    mInt1: int32,
    mInt2: tag(1) int32?,
    mInt3: tag(50) int32?,
    mInt4: tag(500) int32?,
}

[preserve-slice]
class B : A
{
    mInt5: int32,
    mInt6: tag(10) int32?,
}

class C : B
{
    mString1: string,
    mString2: tag(890) string?,
}

class TaggedWithCustom
{
    // mMyCompactStructList: tag(1) MyCompactStructList?,
    // mAnotherCompactStructList: tag(2) AnotherCompactStructList?,
}

interface ClassTag
{
    pingPong(o: AnyClass) -> AnyClass;
}
