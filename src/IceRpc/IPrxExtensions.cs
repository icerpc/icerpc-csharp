
// Copyright (c) ZeroC, Inc. All rights reserved.

using IceRpc.Slice;

namespace IceRpc
{
    /// <summary>Provides extension methods for proxies generated by the Slice compiler.</summary>
    // These extension methods are part of the Slice engine code. It's in namespace IceRpc because we want to make
    // these methods available without a using IceRpc.Slice.
    public static class PrxExtensions
    {
        /// <summary>Tests whether the target service implements the interface implemented by the T typed proxy. This
        /// method is a wrapper for <see cref="IServicePrx.IceIsAAsync"/>.</summary>
        /// <paramtype name="T">The type of the desired typed proxy.</paramtype>
        /// <param name="prx">The source proxy being tested.</param>
        /// <param name="invocation">The invocation properties.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A new typed proxy with the desired type, or null.</returns>
        public static async Task<T?> AsAsync<T>(
            this IPrx prx,
            Invocation? invocation = null,
            CancellationToken cancel = default) where T : struct, IPrx =>
            await new ServicePrx(prx.Proxy).IceIsAAsync(typeof(T).GetIceTypeId()!, invocation, cancel).
                ConfigureAwait(false) ?
                new T { Proxy = prx.Proxy } : null;

        /// <summary>Converts this proxy into a string using a specific format.</summary>
        /// <param name="prx">The prx to convert.</param>
        /// <param name="format">The proxy format.</param>
        public static string ToString(this IPrx prx, IProxyFormat format) => format.ToString(prx.Proxy);
    }
}
