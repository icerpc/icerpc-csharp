// Copyright (c) ZeroC, Inc. All rights reserved.

module IceRpc::Tests::Slice;

// For each tagged param, return 2 tagged return values.
interface OperationTagDouble
{
    opUInt8(p1: tag(1) uint8?) -> (r1: tag(1) uint8?, r2: tag(2) uint8?);

    opBool(p1: tag(1) bool?) -> (r1: tag(1) bool?, r2: tag(2) bool?);

    opInt16(p1: tag(1) int16?) -> (r1: tag(1) int16?, r2: tag(2) int16?);

    opInt32(p1: tag(1) int32?) -> (r1: tag(1) int32?, r2: tag(2) int32?);

    opInt64(p1: tag(1) int64?) -> (r1: tag(1) int64?, r2: tag(2) int64?);

    opFloat32(p1: tag(1) float32?) -> (r1: tag(1) float32?, r2: tag(2) float32?);

    opFloat64(p1: tag(1) float64?) -> (r1: tag(1) float64?, r2: tag(2) float64?);

    opString(p1: tag(1) string?) -> (r1: tag(1) string?, r2: tag(2) string?);

    opMyEnum(p1: tag(1) MyEnum?) -> (r1: tag(1) MyEnum?, r2: tag(2) MyEnum?);

    opMyCompactStruct(p1: tag(1) MyCompactStruct?) -> (r1: tag(1) MyCompactStruct?, r2: tag(2) MyCompactStruct?);

    opAnotherCompactStruct(p1: tag(1) AnotherCompactStruct?) -> (
        r1: tag(1) AnotherCompactStruct?,
        r2: tag(2) AnotherCompactStruct?,
    );

    opUInt8Seq(p1: tag(1) UInt8Seq?) -> (r1: tag(1) UInt8Seq?, r2: tag(2) UInt8Seq?);
    opUInt8List(p1: tag(1) UInt8List?) -> (r1: tag(1) UInt8List?, r2: tag(2) UInt8List?);

    opBoolSeq(p1: tag(1) BoolSeq?) -> (r1: tag(1) BoolSeq?, r2: tag(2) BoolSeq?);
    opBoolList(p1: tag(1) BoolList?) -> (r1: tag(1) BoolList?, r2: tag(2) BoolList?);

    opInt16Seq(p1: tag(1) Int16Seq?) -> (r1: tag(1) Int16Seq?, r2: tag(2) Int16Seq?);
    opInt16List(p1: tag(1) Int16List?) -> (r1: tag(1) Int16List?, r2: tag(2) Int16List?);

    opInt32Seq(p1: tag(1) Int32Seq?) -> (r1: tag(1) Int32Seq?, r2: tag(2) Int32Seq?);
    opInt32List(p1: tag(1) Int32List?) -> (r1: tag(1) Int32List?, r2: tag(2) Int32List?);

    opInt64Seq(p1: tag(1) Int64Seq?) -> (r1: tag(1) Int64Seq?, r2: tag(2) Int64Seq?);
    opInt64List(p1: tag(1) Int64List?) -> (r1: tag(1) Int64List?, r2: tag(2) Int64List?);

    opFloat32Seq(p1: tag(1) Float32Seq?) -> (r1: tag(1) Float32Seq?, r2: tag(2) Float32Seq?);
    opFloat32List(p1: tag(1) Float32List?) -> (r1: tag(1) Float32List?, r2: tag(2) Float32List?);

    opFloat64Seq(p1: tag(1) Float64Seq?) -> (r1: tag(1) Float64Seq?, r2: tag(2) Float64Seq?);
    opFloat64List(p1: tag(1) Float64List?) -> (r1: tag(1) Float64List?, r2: tag(2) Float64List?);

    opStringSeq(p1: tag(1) StringSeq?) -> (r1: tag(1) StringSeq?, r2: tag(2) StringSeq?);
    opStringList(p1: tag(1) StringList?) -> (r1: tag(1) StringList?, r2: tag(2) StringList?);

    opMyEnumSeq(p1: tag(1) MyEnumSeq?) -> (r1: tag(1) MyEnumSeq?, r2: tag(2) MyEnumSeq?);
    opMyEnumList(p1: tag(1) MyEnumList?) -> (r1: tag(1) MyEnumList?, r2: tag(2) MyEnumList?);

    opMyFixedLengthEnumSeq(p1: tag(1) MyFixedLengthEnumSeq?) -> (
        r1: tag(1) MyFixedLengthEnumSeq?,
        r2: tag(2) MyFixedLengthEnumSeq?,
    );
    opMyFixedLengthEnumList(p1: tag(1) MyFixedLengthEnumList?) -> (
        r1: tag(1) MyFixedLengthEnumList?,
        r2: tag(2) MyFixedLengthEnumList?,
    );

    opMyCompactStructSeq(p1: tag(1) MyCompactStructSeq?) -> (
        r1: tag(1) MyCompactStructSeq?,
        r2: tag(2) MyCompactStructSeq?,
    );
    opMyCompactStructList(p1: tag(1) MyCompactStructList?) -> (
        r1: tag(1) MyCompactStructList?,
        r2: tag(2) MyCompactStructList?,
    );

    opAnotherCompactStructSeq(p1: tag(1) AnotherCompactStructSeq?) -> (
        r1: tag(1) AnotherCompactStructSeq?,
        r2: tag(2) AnotherCompactStructSeq?,
    );
    opAnotherCompactStructList(p1: tag(1) AnotherCompactStructList?) -> (
        r1: tag(1) AnotherCompactStructList?,
        r2: tag(2) AnotherCompactStructList?,
    );

    opInt32Dict(p1: tag(1) Int32Dict?) -> (r1: tag(1) Int32Dict?, r2: tag(2) Int32Dict?);
    opStringDict(p1: tag(1) StringDict?) -> (r1: tag(1) StringDict?, r2: tag(2) StringDict?);

    opInt32CustomDict(p1: tag(1) Int32CustomDict?) -> (r1: tag(1) Int32CustomDict?, r2: tag(2) Int32CustomDict?);
    opStringCustomDict(p1: tag(1) StringCustomDict?) -> (
        r1: tag(1) StringCustomDict?,
        r2: tag(2) StringCustomDict?,
    );
}

interface OperationTagEncodedResult
{
    [cs:encoded-result] opMyCompactStruct(p1: tag(1) MyCompactStruct?) -> tag(1) MyCompactStruct?;
    [cs:encoded-result] opStringSeq(p1: tag(1) StringSeq?) -> tag(1) StringSeq?;
    [cs:encoded-result] opInt32Dict(p1: tag(1) Int32Dict?) -> tag(1) Int32Dict?;
}

interface OperationTag
{
    opInt32(p1: tag(0) int32?) -> tag(1) int32?;

    opVoid();
}

// An interface compatible with OperationTag except with fewer tags.
interface OperationTagMinus
{
    opInt32() -> tag(1) int32?;
}

// An interface compatible with OperationTag except with more tags.
interface OperationTagPlus
{
    opInt32(p1: tag(0) int32?, p2: tag(1) string?) -> (r1: tag(1) int32?, r2: tag(2) string?);

    opVoid(p1: tag(1) string?) -> tag(1) string?;
}
