// Copyright (c) ZeroC, Inc. All rights reserved.

module IceRpc::Tests::Slice;

typealias UInt8Seq = sequence<uint8>;
typealias BoolSeq = sequence<bool>;
typealias Int16Seq = sequence<int16>;
typealias UInt16Seq = sequence<uint16>;
typealias Int32Seq = sequence<int32>;
typealias VarInt32Seq = sequence<varint32>;
typealias UInt32Seq = sequence<uint32>;
typealias VarUInt32Seq = sequence<varuint32>;
typealias Int64Seq = sequence<int64>;
typealias VarInt62Seq = sequence<varint62>;
typealias UInt64Seq = sequence<uint64>;
typealias VarUInt62Seq = sequence<varuint62>;
typealias Float32Seq = sequence<float32>;
typealias Float64Seq = sequence<float64>;
typealias StringSeq = sequence<string>;

typealias MyEnumSeq = sequence<MyEnum>;
typealias MyFixedLengthEnumSeq = sequence<MyFixedLengthEnum>;
typealias MyUncheckedEnumSeq = sequence<MyUncheckedEnum>;

typealias MyCompactStructSeq = sequence<MyCompactStruct>;
typealias OperationsSeq = sequence<Operations>;
typealias AnotherCompactStructSeq = sequence<AnotherCompactStruct>;

// Sequence mapping
typealias UInt8List = [cs:generic("System.Collections.Generic.List")] sequence<uint8>;
typealias UInt8CustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<uint8>;

typealias BoolList = [cs:generic("System.Collections.Generic.List")] sequence<bool>;
typealias BoolCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<bool>;

typealias Int16List = [cs:generic("System.Collections.Generic.List")] sequence<int16>;
typealias Int16CustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<int16>;

typealias Int32List = [cs:generic("System.Collections.Generic.List")] sequence<int32>;
typealias Int32CustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<int32>;

typealias Int64List = [cs:generic("System.Collections.Generic.List")] sequence<int64>;
typealias Int64CustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<int64>;

typealias Float32List = [cs:generic("System.Collections.Generic.List")] sequence<float32>;
typealias Float32CustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<float32>;

typealias Float64List = [cs:generic("System.Collections.Generic.List")] sequence<float64>;
typealias Float64CustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<float64>;

typealias StringList = [cs:generic("System.Collections.Generic.List")] sequence<string>;
typealias StringCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<string>;

typealias MyEnumList = [cs:generic("System.Collections.Generic.List")] sequence<MyEnum>;
typealias MyEnumCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<MyEnum>;

typealias MyFixedLengthEnumList = [cs:generic("System.Collections.Generic.List")] sequence<MyFixedLengthEnum>;
typealias MyFixedLengthEnumCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<MyFixedLengthEnum>;

typealias MyUncheckedEnumList = [cs:generic("System.Collections.Generic.List")] sequence<MyUncheckedEnum>;
typealias MyUncheckedEnumCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<MyUncheckedEnum>;

typealias MyCompactStructList = [cs:generic("System.Collections.Generic.List")] sequence<MyCompactStruct>;
typealias MyCompactStructCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<MyCompactStruct>;

typealias OperationsList = [cs:generic("System.Collections.Generic.List")] sequence<Operations>;
typealias OperationsCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<Operations>;

typealias AnotherCompactStructList = [cs:generic("System.Collections.Generic.List")] sequence<AnotherCompactStruct>;
typealias AnotherCompactStructCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<AnotherCompactStruct>;

interface SequenceOperations
{
    // Builtin types sequences
    opUInt8Seq(p1: UInt8Seq, p2: UInt8Seq) -> (r1: UInt8Seq, r2: UInt8Seq);
    opBoolSeq(p1: BoolSeq, p2: BoolSeq) -> (r1: BoolSeq, r2: BoolSeq);
    opInt16Seq(p1: Int16Seq, p2: Int16Seq) -> (r1: Int16Seq, r2: Int16Seq);
    opUInt16Seq(p1: UInt16Seq, p2: UInt16Seq) -> (r1: UInt16Seq, r2: UInt16Seq);
    opInt32Seq(p1: Int32Seq, p2: Int32Seq) -> (r1: Int32Seq, r2: Int32Seq);
    opVarInt32Seq(p1: VarInt32Seq, p2: VarInt32Seq) -> (r1: VarInt32Seq, r2: VarInt32Seq);
    opUInt32Seq(p1: UInt32Seq, p2: UInt32Seq) -> (r1: UInt32Seq, r2: UInt32Seq);
    opVarUInt32Seq(p1: VarUInt32Seq, p2: VarUInt32Seq) -> (r1: VarUInt32Seq, r2: VarUInt32Seq);
    opInt64Seq(p1: Int64Seq, p2: Int64Seq) -> (r1: Int64Seq, r2: Int64Seq);
    opVarInt62Seq(p1: VarInt62Seq, p2: VarInt62Seq) -> (r1: VarInt62Seq, r2: VarInt62Seq);
    opUInt64Seq(p1: UInt64Seq, p2: UInt64Seq) -> (r1: UInt64Seq, r2: UInt64Seq);
    opVarUInt3262Seq(p1: VarUInt62Seq, p2: VarUInt62Seq) -> (r1: VarUInt62Seq, r2: VarUInt62Seq);
    opFloat32Seq(p1: Float32Seq, p2: Float32Seq) -> (r1: Float32Seq, r2: Float32Seq);
    opFloat64Seq(p1: Float64Seq, p2: Float64Seq) -> (r1: Float64Seq, r2: Float64Seq);
    opStringSeq(p1: StringSeq, p2: StringSeq) -> (r1: StringSeq, r2: StringSeq);

    // Defined types sequences
    opMyEnumSeq(p1: MyEnumSeq, p2: MyEnumSeq) -> (r1: MyEnumSeq, r2: MyEnumSeq);
    opMyFixedLengthEnumSeq(p1: MyFixedLengthEnumSeq, p2: MyFixedLengthEnumSeq) -> (
        r1: MyFixedLengthEnumSeq,
        r2: MyFixedLengthEnumSeq,
    );
    opMyUncheckedEnumSeq(p1: MyUncheckedEnumSeq, p2: MyUncheckedEnumSeq) -> (
        r1: MyUncheckedEnumSeq,
        r2: MyUncheckedEnumSeq,
    );
    opMyCompactStructSeq(p1: MyCompactStructSeq, p2: MyCompactStructSeq) -> (
        r1: MyCompactStructSeq,
        r2: MyCompactStructSeq,
    );
    opOperationsSeq(p1: OperationsSeq, p2: OperationsSeq) -> (r1: OperationsSeq, r2: OperationsSeq);
    opAnotherCompactStructSeq(p1: AnotherCompactStructSeq, p2: AnotherCompactStructSeq) -> (
        r1: AnotherCompactStructSeq,
        r2: AnotherCompactStructSeq,
    );

    // Sequence mapping
    opUInt8List(p1: UInt8List, p2: UInt8List) -> (r1: UInt8List, r2: UInt8List);
    opUInt8CustomSeq(p1: UInt8CustomSeq, p2: UInt8CustomSeq) -> (r1: UInt8CustomSeq, r2: UInt8CustomSeq);

    opBoolList(p1: BoolList, p2: BoolList) -> (r1: BoolList, r2: BoolList);
    opBoolCustomSeq(p1: BoolCustomSeq, p2: BoolCustomSeq) -> (r1: BoolCustomSeq, r2: BoolCustomSeq);

    opInt32List(p1: Int32List, p2: Int32List) -> (r1: Int32List, r2: Int32List);
    opInt32CustomSeq(p1: Int32CustomSeq, p2: Int32CustomSeq) -> (r1: Int32CustomSeq, r2: Int32CustomSeq);

    opInt64List(p1: Int64List, p2: Int64List) -> (r1: Int64List, r2: Int64List);
    opInt64CustomSeq(p1: Int64CustomSeq, p2: Int64CustomSeq) -> (r1: Int64CustomSeq, r2: Int64CustomSeq);

    opFloat32List(p1: Float32List, p2: Float32List) -> (r1: Float32List, r2: Float32List);
    opFloat32CustomSeq(p1: Float32CustomSeq, p2: Float32CustomSeq) -> (r1: Float32CustomSeq, r2: Float32CustomSeq);

    opStringList(p1: StringList, p2: StringList) -> (r1: StringList, r2: StringList);
    opStringCustomSeq(p1: StringCustomSeq, p2: StringCustomSeq) -> (r1: StringCustomSeq, r2: StringCustomSeq);

    opMyEnumList(p1: MyEnumList, p2: MyEnumList) -> (r1: MyEnumList, r2: MyEnumList);
    opMyEnumCustomSeq(p1: MyEnumCustomSeq, p2: MyEnumCustomSeq) -> (r1: MyEnumCustomSeq, r2: MyEnumCustomSeq);

    opMyFixedLengthEnumList(p1: MyFixedLengthEnumList, p2: MyFixedLengthEnumList) -> (
        r1: MyFixedLengthEnumList,
        r2: MyFixedLengthEnumList,
    );
    opMyFixedLengthEnumCustomSeq(p1: MyFixedLengthEnumCustomSeq, p2: MyFixedLengthEnumCustomSeq) -> (
        r1: MyFixedLengthEnumCustomSeq,
        r2: MyFixedLengthEnumCustomSeq,
    );

    opMyUncheckedEnumList(p1: MyUncheckedEnumList, p2: MyUncheckedEnumList) -> (
        r1: MyUncheckedEnumList,
        r2: MyUncheckedEnumList,
    );
    opMyUncheckedEnumCustomSeq(p1: MyUncheckedEnumCustomSeq, p2: MyUncheckedEnumCustomSeq) -> (
        r1: MyUncheckedEnumCustomSeq,
        r2: MyUncheckedEnumCustomSeq,
    );

    opMyCompactStructList(p1: MyCompactStructList, p2: MyCompactStructList) -> (
        r1: MyCompactStructList,
        r2: MyCompactStructList,
    );
    opMyCompactStructCustomSeq(p1: MyCompactStructCustomSeq, p2: MyCompactStructCustomSeq) -> (
        r1: MyCompactStructCustomSeq,
        r2: MyCompactStructCustomSeq,
    );

    opOperationsList(p1: OperationsList, p2: OperationsList) -> (r1: OperationsList, r2: OperationsList);
    opOperationsCustomSeq(p1: OperationsCustomSeq, p2: OperationsCustomSeq) -> (
        r1: OperationsCustomSeq,
        r2: OperationsCustomSeq,
    );

    opAnotherCompactStructList(p1: AnotherCompactStructList, p2: AnotherCompactStructList) -> (
        r1: AnotherCompactStructList,
        r2: AnotherCompactStructList,
    );
    opAnotherCompactStructCustomSeq(p1: AnotherCompactStructCustomSeq, p2: AnotherCompactStructCustomSeq) -> (
        r1: AnotherCompactStructCustomSeq,
        r2: AnotherCompactStructCustomSeq,
    );
}
