// Copyright (c) ZeroC, Inc. All rights reserved.

encoding = 1;

module IceRpc::Tests::Slice;

compact struct TaggedExceptionStruct
{
    s: string,
    v: int32,
}

exception TaggedException
{
    mStruct: tag(50) TaggedExceptionStruct?,
    mInt32: tag(1) int32?,
    mBool: bool,
    mString: tag(2) string?,
}

exception TaggedExceptionPlus
{
    mFloat32: tag(3) float32?,
    mStruct: tag(50) TaggedExceptionStruct?,
    mInt32: tag(1) int32?,
    mBool: bool,
    mString: tag(2) string?,
}

exception TaggedExceptionMinus
{
    mBool: bool,
    mString: tag(2) string?,
    mStruct: tag(50) TaggedExceptionStruct?,
}

exception DerivedException : TaggedException
{
    mString1: tag(600) string?,
    mStruct1: tag(601) TaggedExceptionStruct?,
}

exception RequiredException : TaggedException
{
    mString1: string,
    mStruct1: TaggedExceptionStruct,
}

interface ExceptionTag
{
    // TODO: exceptions as data types is only supported with Slice 2.
    //opTaggedException(p1: TaggedException) -> TaggedException;

    ThrowTaggedException(p1: tag(1) int32?, p2: tag(2) string?, p3: tag(3) TaggedExceptionStruct?);

    ThrowDerivedException(p1: tag(1) int32?, p2: tag(2) string?, p3: tag(3) TaggedExceptionStruct?);

    ThrowRequiredException(p1: tag(1) int32?, p2: tag(2) string?, p3: tag(3) TaggedExceptionStruct?);
}
