// Copyright (c) ZeroC, Inc.

namespace ZeroC.Slice;

/// <summary>Provides extension methods for <see cref="Type" />.</summary>
public static class TypeExtensions
{
    /// <summary>Retrieves the Slice type ID from a type with the attribute <see cref="SliceTypeIdAttribute"/>.
    /// </summary>
    /// <param name="type">The type of a class or interface generated by the Slice compiler.</param>
    /// <returns>The Slice type ID, or <see langword="null" /> if <paramref name="type" /> does not carry the
    /// <see cref="SliceTypeIdAttribute"/> attribute.
    /// </returns>
    public static string? GetSliceTypeId(this Type type)
    {
        object[] attributes = type.GetCustomAttributes(typeof(SliceTypeIdAttribute), false);
        return attributes.Length == 1 && attributes[0] is SliceTypeIdAttribute typeId ? typeId.Value : null;
    }

    /// <summary>Retrieves the compact Slice type ID from a type with the attribute
    /// <see cref="CompactSliceTypeIdAttribute"/>.</summary>
    /// <param name="type">The type of a class generated by the Slice compiler.</param>
    /// <returns>The compact Slice type ID, or <see langword="null" /> if <paramref name="type" /> does not carry the
    /// <see cref="CompactSliceTypeIdAttribute"/> attribute.</returns>
    public static int? GetCompactSliceTypeId(this Type type)
    {
        object[] attributes = type.GetCustomAttributes(typeof(CompactSliceTypeIdAttribute), false);
        return attributes.Length == 1 && attributes[0] is CompactSliceTypeIdAttribute typeId ? typeId.Value : null;
    }
}
