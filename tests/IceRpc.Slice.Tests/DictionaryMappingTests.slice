// Copyright (c) ZeroC, Inc.

module IceRpc::Slice::Tests

interface DictionaryMappingOperations {
    returnDictionaryTuple() -> (r1: Dictionary<int32, int32> r2: Dictionary<int32, int32>)

    returnDictionary() -> Dictionary<int32, int32>

    sendDictionary(p: Dictionary<int32, int32>)

    // We don't need to add tests for other cs::type arguments because the code path is always the same. The argument
    // must be a non-abstract generic type that implements ICollection<KeyValuePair<TKey, TValue>> and provides a
    // constructor with an initial capacity parameter.
    returnCustomDictionaryTuple() -> (
        r1: [cs::type("CustomDictionary<int, int>")] Dictionary<int32, int32>
        r2: [cs::type("CustomDictionary<int, int>")] Dictionary<int32, int32>
    )

    returnCustomDictionary() -> [cs::type("CustomDictionary<int, int>")] Dictionary<int32, int32>

    sendCustomDictionary(p: [cs::type("CustomDictionary<int, int>")] Dictionary<int32, int32>)

    returnCustomDictionary2() -> [cs::type("List<KeyValuePair<int, int>>")] Dictionary<int32, int32>

    sendCustomDictionary2(p: [cs::type("List<KeyValuePair<int, int>>")] Dictionary<int32, int32>)
}

[cs::readonly] compact struct LargeStruct {
    x: int64
    y: int64
}

[cs::readonly] compact struct KeyValuePair {
    Key: int32
    Value: string?
}

compact struct StructWithCustomDictionary {
    value: [cs::type("CustomDictionary<int, int>")] Dictionary<int32, int32>
}
