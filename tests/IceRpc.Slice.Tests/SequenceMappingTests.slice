// Copyright (c) ZeroC, Inc.

module IceRpc::Slice::Tests

interface SequenceMappingOperations {

    returnSequenceOfInt32() -> Sequence<int32>
    sendSequenceOfInt32(p: Sequence<int32>)

    returnSequenceOfString() -> Sequence<string>
    sendSequenceOfString(p: Sequence<string>)

    returnSequenceOfMyFixedSizeEnum() -> Sequence<MyFixedSizeEnum>
    sendSequenceOfMyFixedSizeEnum(p: Sequence<MyFixedSizeEnum>)

    returnSequenceOfMyStruct() -> Sequence<MyStruct>
    sendSequenceOfMyStruct(p: Sequence<MyStruct>)

    returnSequenceOfCustomValueType() -> Sequence<WellKnownTypes::TimeStamp>
    sendSequenceOfCustomValueType(p: Sequence<WellKnownTypes::TimeStamp>)

    returnSequenceOfCustomReferenceType() -> Sequence<WellKnownTypes::Uri>
    sendSequenceOfCustomReferenceType(p: Sequence<WellKnownTypes::Uri>)

    returnSequenceOfOptionalInt32() -> Sequence<int32?>
    sendSequenceOfOptionalInt32(p: Sequence<int32?>)

    returnSequenceOfOptionalString() -> Sequence<string?>
    sendSequenceOfOptionalString(p: Sequence<string?>)

    returnSequenceOfOptionalMyFixedSizeEnum() -> Sequence<MyFixedSizeEnum?>
    sendSequenceOfOptionalMyFixedSizeEnum(p: Sequence<MyFixedSizeEnum?>)

    returnSequenceOfOptionalMyStruct() -> Sequence<MyStruct?>
    sendSequenceOfOptionalMyStruct(p: Sequence<MyStruct?>)

    returnSequenceOfOptionalCustomValueType() -> Sequence<WellKnownTypes::TimeStamp?>
    sendSequenceOfOptionalCustomValueType(p: Sequence<WellKnownTypes::TimeStamp?>)

    returnSequenceOfOptionalCustomReferenceType() -> Sequence<WellKnownTypes::Uri?>
    sendSequenceOfOptionalCustomReferenceType(p: Sequence<WellKnownTypes::Uri?>)

    returnCustomSequenceOfInt32() -> [cs::type("CustomSequence<int>")] Sequence<int32>
    sendCustomSequenceOfInt32(p: [cs::type("CustomSequence<int>")] Sequence<int32>)

    returnCustomSequenceOfString() -> [cs::type("CustomSequence<string>")] Sequence<string>
    sendCustomSequenceOfString(p: [cs::type("CustomSequence<string>")] Sequence<string>)

    returnCustomSequenceOfMyFixedSizeEnum() -> [cs::type("CustomSequence<MyFixedSizeEnum>")] Sequence<MyFixedSizeEnum>
    sendCustomSequenceOfMyFixedSizeEnum(p: [cs::type("CustomSequence<MyFixedSizeEnum>")] Sequence<MyFixedSizeEnum>)

    returnCustomSequenceOfMyVarSizeEnum() -> [cs::type("CustomSequence<MyVarSizeEnum>")] Sequence<MyVarSizeEnum>
    sendCustomSequenceOfMyVarSizeEnum(p: [cs::type("CustomSequence<MyVarSizeEnum>")] Sequence<MyVarSizeEnum>)

    returnCustomSequenceOfMyUncheckedEnum() -> [cs::type("CustomSequence<MyUncheckedEnum>")] Sequence<MyUncheckedEnum>
    sendCustomSequenceOfMyUncheckedEnum(p: [cs::type("CustomSequence<MyUncheckedEnum>")] Sequence<MyUncheckedEnum>)

    returnCustomSequenceOfOptionalInt32() -> [cs::type("CustomSequence<int?>")] Sequence<int32?>
    sendCustomSequenceOfOptionalInt32(p: [cs::type("CustomSequence<int?>")] Sequence<int32?>)

    returnCustomSequenceOfOptionalString() -> [cs::type("CustomSequence<string?>")] Sequence<string?>
    sendCustomSequenceOfOptionalString(p: [cs::type("CustomSequence<string?>")] Sequence<string?>)

    returnCustomSequenceOfOptionalMyFixedSizeEnum() -> [cs::type("CustomSequence<MyFixedSizeEnum?>")] Sequence<MyFixedSizeEnum?>
    sendCustomSequenceOfOptionalMyFixedSizeEnum(p: [cs::type("CustomSequence<MyFixedSizeEnum?>")] Sequence<MyFixedSizeEnum?>)

    returnCustomSequenceOfOptionalMyVarSizeEnum() -> [cs::type("CustomSequence<MyVarSizeEnum?>")] Sequence<MyVarSizeEnum?>
    sendCustomSequenceOfOptionalMyVarSizeEnum(p: [cs::type("CustomSequence<MyVarSizeEnum?>")] Sequence<MyVarSizeEnum?>)

    returnCustomSequenceOfOptionalMyUncheckedEnum() -> [cs::type("CustomSequence<MyUncheckedEnum?>")] Sequence<MyUncheckedEnum?>
    sendCustomSequenceOfOptionalMyUncheckedEnum(p: [cs::type("CustomSequence<MyUncheckedEnum?>")] Sequence<MyUncheckedEnum?>)

    returnHashSetOfInt32() -> [cs::type("HashSet<int>")] Sequence<int32>
    sendHashSetOfInt32(p: [cs::type("HashSet<int>")] Sequence<int32>)

    opNumericTypeNestedSequence(p1: Sequence<Sequence<Sequence<uint8>>>) -> Sequence<Sequence<Sequence<uint8>>>
    opStructNestedSequence(p1: Sequence<Sequence<Sequence<MyStruct>>>) -> Sequence<Sequence<Sequence<MyStruct>>>

    opReturnTuple() -> (
        r1: [cs::type("CustomSequence<int>")] Sequence<int32>
        r2: [cs::type("CustomSequence<int>")] Sequence<int32>
    )
}
