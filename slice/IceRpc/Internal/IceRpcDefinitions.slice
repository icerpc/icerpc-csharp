// Copyright (c) ZeroC, Inc. All rights reserved.

[cs::internal]
module IceRpc::Internal;

// These definitions help with the encoding of icerpc frames.

/// Each icerpc control frame has a type identified by this enumeration.
enum IceRpcControlFrameType : varuint62
{
    /// The Settings frame is sent by each peer on connection establishment to exchange settings.
    Settings = 0,

    /// The GoAway frame is sent to notify the peer that the connection is being shutdown. The shutdown initiator
    /// sends it as soon as the connection is shutdown. The receiver sends back a GoAway frame in return.
    GoAway = 1,
}

/// Each icerpc request frame consists of:
/// - a request header size (varuint62)
/// - a request header (below)
/// - a request payload
[cs::readonly]
compact struct IceRpcRequestHeader
{
    path: string,
    operation: string,
    // fields: dictionary<RequestFieldKey, sequence<uint8>>, (encoded/decoded manually)
}

/// Each icerpc response frame consists of:
/// - a response header size (varuint62)
/// - a response header (below)
/// - a response payload
[cs::readonly]
compact struct IceRpcResponseHeader
{
    resultType: ResultType,
    // fields: dictionary<ResponseFieldKey, sequence<uint8>>, (encoded/decoded manually)
}

/// The settings frame is sent by each peer on connection establishment to exchange settings.
[cs::readonly]
compact struct IceRpcSettings
{
    value: dictionary<IceRpcSettingKey, varuint62>,
}

/// The keys for Settings entries.
unchecked enum IceRpcSettingKey : varuint62
{
    MaxHeaderSize = 0,
}

/// The GoAway frame is sent on connection shutdown to notify the remote peer that it shouldn't send additional requests
/// and to provide the stream IDs of the requests already dispatched or that are still being dispatched by the local
/// peer. Requests carried by streams with IDs superior to these stream IDs can safely be retried since the local peer
/// did not process them at all. A null stream ID value indicates that no request was dispatched by the local peer.
[cs::readonly] compact struct IceRpcGoAway {
    lastBidirectionalStreamId: varuint62?,
    lastUnidirectionalStreamId: varuint62?,
    message: string,
}

/// The icerpc-specific error codes carried by multiplexed connections. These values are shared and carried blindly by
/// all multiplexed transports. Multiplexed transports don't interpret these error codes or generate these codes.
unchecked enum IceRpcConnectionErrorCode : varuint62
{
    /// The connection closed without error.
    NoError = 0,

    /// The connection was refused by the server.
    Refused
}

/// The icerpc-specific error codes carried by multiplexed streams. These values are shared and carried blindly by
/// all multiplexed transports. Multiplexed transports don't interpret these error codes or generate these codes.
unchecked enum IceRpcStreamErrorCode : varuint62
{
    /// The stream (or one side of the stream) completed without error.
    NoError = 0,

    /// The stream (or one side of the stream) completed with an exception that could not be converted into a more
    /// specific error code.
    Unspecified,

    /// The stream completed because the associated invocation or dispatch was canceled.
    Canceled,

    /// The connection was shut down.
    ConnectionShutdown,

    /// The data carried by the stream could not be decoded.
    InvalidData
}
