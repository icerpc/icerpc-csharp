// Copyright (c) ZeroC, Inc. All rights reserved.

// <auto-generated/>
// slicec-cs version: '0.1.0'
// Generated from file: 'CRM.slice'

#nullable enable

#pragma warning disable 1591 // Missing XML Comment
#pragma warning disable 1573 // Parameter has no matching param tag in the XML comment

using IceRpc.Slice;

[assembly: IceRpc.Slice.Slice("CRM.slice")]

namespace Demo;

/// <summary>The client-side interface for Slice interface CRM. <seealso cref="ICrm"/>.</summary>
[IceRpc.Slice.TypeId("::Demo::CRM")]
public partial interface ICrmProxy
{
    /// <param name="features">The invocation features.</param>
    /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
    global::System.Threading.Tasks.Task<bool> TryAddCustomerAsync(
        string name,
        IceRpc.Features.IFeatureCollection? features = null,
        global::System.Threading.CancellationToken cancel = default);
}

/// <summary>Proxy record struct. It implements <see cref="ICrmProxy"/> by sending requests to a remote IceRPC service.</summary>
[IceRpc.Slice.TypeId("::Demo::CRM")]
public readonly partial record struct CrmProxy : ICrmProxy, IProxy
{
    /// <summary>Converts the arguments of each operation that takes arguments into a request payload.</summary>
    public static class Request
    {
        /// <summary>Creates the request payload for operation tryAddCustomer.</summary>
        /// <param name="encodeOptions">The Slice encode options.</param>
        /// <returns>The payload encoded with <see cref="SliceEncoding.Slice2"/>.</returns>
        public static global::System.IO.Pipelines.PipeReader TryAddCustomer(
            string name,
            SliceEncodeOptions? encodeOptions = null)
        {
            var pipe_ = new global::System.IO.Pipelines.Pipe(
                encodeOptions?.PipeOptions ?? SliceEncodeOptions.Default.PipeOptions);
            var encoder_ = new SliceEncoder(pipe_.Writer, SliceEncoding.Slice2, default);

            Span<byte> sizePlaceholder_ = encoder_.GetPlaceholderSpan(4);
            int startPos_ = encoder_.EncodedByteCount;

            encoder_.EncodeString(name);

            SliceEncoder.EncodeVarUInt62((ulong)(encoder_.EncodedByteCount - startPos_), sizePlaceholder_);

            pipe_.Writer.Complete();  // flush to reader and sets Is[Writer]Completed to true.
            return pipe_.Reader;
        }
    }

    /// <summary>Holds a <see cref="IceRpc.Slice.ResponseDecodeFunc{T}"/> for each non-void remote operation defined in <see cref="ICrmProxy"/>.</summary>
    public static class Response
    {
        /// <summary>The <see cref="ResponseDecodeFunc{T}"/> for the return value type of operation tryAddCustomer.</summary>
        public static global::System.Threading.Tasks.ValueTask<bool> TryAddCustomerAsync(
            IceRpc.IncomingResponse response,
            IceRpc.OutgoingRequest request,
            ServiceProxy sender,
            global::System.Threading.CancellationToken cancel) =>
            response.DecodeReturnValueAsync(
                request,
                SliceEncoding.Slice2,
                sender,
                _defaultActivator,
                (ref SliceDecoder decoder) => decoder.DecodeBool(),
                cancel);
    }

    /// <summary>The default service address for services that implement Slice interface <c>CRM</c>. Its
    /// protocol is icerpc and its path is computed from the Slice interface name.</summary>
    public static IceRpc.ServiceAddress DefaultServiceAddress { get; } =
        new(IceRpc.Protocol.IceRpc) { Path = typeof(CrmProxy).GetDefaultPath() };

    private static readonly IActivator _defaultActivator =
        SliceDecoder.GetActivator(typeof(CrmProxy).Assembly);

    /// <inheritdoc/>
    public SliceEncodeOptions? EncodeOptions { get; init; } = null;

    /// <inheritdoc/>
    public IceRpc.IInvoker? Invoker { get; init; } = null;

    /// <inheritdoc/>
    public IceRpc.ServiceAddress ServiceAddress { get; init; } = DefaultServiceAddress;

    /// <summary>Creates a relative proxy from a path.</summary>
    /// <param name="path">The path.</param>
    /// <returns>The new relative proxy.</returns>
    public static CrmProxy FromPath(string path) => new() { ServiceAddress = new() { Path = path } };

    /// <summary>Constructs a proxy from an invoker, a service address and encode options.</summary>
    /// <param name="invoker">The invocation pipeline of the proxy.</param>
    /// <param name="serviceAddress">The service address. Null is equivalent to <see cref="DefaultServiceAddress"/>.</param>
    /// <param name="encodeOptions">The encode options, used to customize the encoding of request payloads.</param>
    public CrmProxy(
        IceRpc.IInvoker invoker,
        IceRpc.ServiceAddress? serviceAddress = null,
        SliceEncodeOptions? encodeOptions = null)
    {
        Invoker = invoker;
        ServiceAddress = serviceAddress ?? DefaultServiceAddress;
        EncodeOptions = encodeOptions;
    }

    /// <summary>Constructs a proxy from an invoker, a service address URI and encode options.</summary>
    /// <param name="invoker">The invocation pipeline of the proxy.</param>
    /// <param name="serviceAddressUri">A URI that represents a service address.</param>
    /// <param name="encodeOptions">The encode options, used to customize the encoding of request payloads.</param>
    public CrmProxy(IceRpc.IInvoker invoker, System.Uri serviceAddressUri, SliceEncodeOptions? encodeOptions = null)
        : this(invoker, new IceRpc.ServiceAddress(serviceAddressUri), encodeOptions)
    {
    }

    /// <summary>Constructs a proxy with the default service address and a null invoker.</summary>
    public CrmProxy()
    {
    }

    /// <inheritdoc/>
    public global::System.Threading.Tasks.Task<bool> TryAddCustomerAsync(
        string name,
        IceRpc.Features.IFeatureCollection? features = null,
        global::System.Threading.CancellationToken cancel = default) =>
        this.InvokeAsync(
            "tryAddCustomer",
            Request.TryAddCustomer(name, encodeOptions: EncodeOptions),
            payloadStream: null,
            Response.TryAddCustomerAsync,
            features,
            cancel: cancel);
}

/// <summary>Interface used to implement services for Slice interface CRM. <seealso cref="ICrmProxy"/>.</summary>
[IceRpc.Slice.TypeId("::Demo::CRM")]
public partial interface ICrm
{
    /// <summary>Provides static methods that read the arguments of requests.</summary>
    public static class Request
    {
        /// <summary>Decodes the argument of operation TryAddCustomer.</summary>
        public static global::System.Threading.Tasks.ValueTask<string> TryAddCustomerAsync(
            IceRpc.IncomingRequest request,
            global::System.Threading.CancellationToken cancel) =>
            request.DecodeArgsAsync(
                SliceEncoding.Slice2,
                _defaultActivator,
                (ref SliceDecoder decoder) => decoder.DecodeString(),
                cancel);
    }

    /// <summary>Provides static methods that write the return values of responses.</summary>
    public static class Response
    {
        /// <summary>Creates a response payload for operation TryAddCustomer.</summary>
        /// <returns>A new response payload.</returns>
        /// <param name="returnValue">The operation return value</param>
        /// <param name="encodeOptions">The Slice encode options.</param>
        public static global::System.IO.Pipelines.PipeReader TryAddCustomer(
            bool returnValue,
            SliceEncodeOptions? encodeOptions = null)
        {
            var pipe_ = new global::System.IO.Pipelines.Pipe(
                encodeOptions?.PipeOptions ?? SliceEncodeOptions.Default.PipeOptions);
            var encoder_ = new SliceEncoder(pipe_.Writer, SliceEncoding.Slice2, default);

            Span<byte> sizePlaceholder_ = encoder_.GetPlaceholderSpan(4);
            int startPos_ = encoder_.EncodedByteCount;

            encoder_.EncodeBool(returnValue);

            SliceEncoder.EncodeVarUInt62((ulong)(encoder_.EncodedByteCount - startPos_), sizePlaceholder_);

            pipe_.Writer.Complete();  // flush to reader and sets Is[Writer]Completed to true.
            return pipe_.Reader;
        }
    }

    private static readonly IActivator _defaultActivator =
        SliceDecoder.GetActivator(typeof(ICrm).Assembly);

    /// <param name="features">The dispatch features</param>
    /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
    public global::System.Threading.Tasks.ValueTask<bool> TryAddCustomerAsync(
        string name,
        IceRpc.Features.IFeatureCollection features,
        global::System.Threading.CancellationToken cancel);

    [IceRpc.Slice.Operation("tryAddCustomer")]
    protected static async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponse> SliceDTryAddCustomerAsync(
        ICrm target,
        IceRpc.IncomingRequest request,
        global::System.Threading.CancellationToken cancel)
    {
        request.CheckNonIdempotent();
        var sliceP_name = await Request.TryAddCustomerAsync(request, cancel).ConfigureAwait(false);
        try
        {
            var returnValue = await target.TryAddCustomerAsync(sliceP_name, request.Features, cancel).ConfigureAwait(false);
            return new IceRpc.OutgoingResponse(request)
            {
                Payload = Response.TryAddCustomer(returnValue, request.Features.Get<ISliceFeature>()?.EncodeOptions),
                PayloadStream = null
            };
        }
        catch (RemoteException remoteException)
        {
            if (remoteException is DispatchException || remoteException.ConvertToUnhandled)
            {
                throw;
            }

            return request.CreateServiceFailureResponse(remoteException, SliceEncoding.Slice2);
        }
    }
}
