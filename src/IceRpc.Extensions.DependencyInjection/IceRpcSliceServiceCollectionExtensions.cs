// Copyright (c) ZeroC, Inc. All rights reserved.

using IceRpc;
using IceRpc.Slice;

namespace Microsoft.Extensions.DependencyInjection;

/// <summary>Extension methods for setting up IceRpc.Slice services in an <see cref="IServiceCollection"/>.</summary>
public static class IceRpcSliceServiceCollectionExtensions
{
    /// <summary>Adds a proxy singleton to this service collection.</summary>
    /// <typeparam name="TProxy">The proxy interface generated by the Slice compiler.</typeparam>
    /// <typeparam name="TProxyImplementation">The implementation of TProxy.</typeparam>
    /// <param name="services">The service collection to add services to.</param>
    /// <param name="serviceAddress">The service address of the proxy; null is equivalent to the the default service
    /// address for the proxy type.</param>
    /// <returns>The service collection.</returns>
    public static IServiceCollection AddIceRpcProxy<TProxy, TProxyImplementation>(
        this IServiceCollection services,
        ServiceAddress? serviceAddress = null)
        where TProxy : class
        where TProxyImplementation : IProxy, TProxy, new() =>
        services
            .AddSingleton<TProxy>(provider =>
                serviceAddress is null ?
                new TProxyImplementation
                {
                    // SliceEncodeOptions is not an IOption-compatible class (and can't be): that's why we look it up
                    // directly.
                    EncodeOptions = provider.GetService<SliceEncodeOptions>(),
                    Invoker = provider.GetRequiredService<IInvoker>()
                }
                :
                new TProxyImplementation
                {
                    EncodeOptions = provider.GetService<SliceEncodeOptions>(),
                    Invoker = provider.GetRequiredService<IInvoker>(),
                    ServiceAddress = serviceAddress
                });

    /// <summary>Adds a proxy singleton to this service collection.</summary>
    /// <typeparam name="TProxy">The proxy interface generated by the Slice compiler.</typeparam>
    /// <typeparam name="TProxyImplementation">The implementation of TProxy.</typeparam>
    /// <param name="services">The service collection to add services to.</param>
    /// <param name="serviceAddressUri">The service address of the proxy as a URI.</param>
    /// <returns>The service collection.</returns>
    public static IServiceCollection AddIceRpcProxy<TProxy, TProxyImplementation>(
        this IServiceCollection services,
        Uri serviceAddressUri)
        where TProxy : class
        where TProxyImplementation : IProxy, TProxy, new() =>
        services.AddIceRpcProxy<TProxy, TProxyImplementation>(new ServiceAddress(serviceAddressUri));
}
