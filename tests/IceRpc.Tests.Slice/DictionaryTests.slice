// Copyright (c) ZeroC, Inc. All rights reserved.

module IceRpc::Tests::Slice;

typealias UInt8Dict = dictionary<uint8, uint8>;
typealias BoolDict = dictionary<bool, bool>;
typealias Int16Dict = dictionary<int16, int16>;
typealias UInt16Dict = dictionary<uint16, uint16>;
typealias Int32Dict = dictionary<int32, int32>;
typealias VarInt32Dict = dictionary<varint32, varint32>;
typealias UInt32Dict = dictionary<uint32, uint32>;
typealias VarUInt32Dict = dictionary<varuint32, varuint32>;
typealias Int64Dict = dictionary<int64, int64>;
typealias VarInt62Dict = dictionary<varint62, varint62>;
typealias UInt64Dict = dictionary<uint64,uint64>;
typealias VarUInt62Dict = dictionary<varuint62, varuint62>;
typealias StringDict = dictionary<string, string>;

typealias MyEnumDict = dictionary<MyEnum, MyEnum>;
typealias MyFixedLengthEnumDict = dictionary<MyFixedLengthEnum, MyFixedLengthEnum>;
typealias MyUncheckedEnumDict = dictionary<MyUncheckedEnum, MyUncheckedEnum>;
typealias MyCompactStructDict = dictionary<MyCompactStruct, MyCompactStruct>;
typealias OperationsDict = dictionary<string, Operations>;
typealias AnotherCompactStructDict = dictionary<string, AnotherCompactStruct>;

typealias UInt8CustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<uint8, uint8>;
typealias BoolCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<bool, bool>;
typealias Int16CustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<int16, int16>;
typealias UInt16CustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<uint16, uint16>;
typealias Int32CustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<int32, int32>;
typealias VarInt32CustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<varint32, varint32>;
typealias UInt32CustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<uint32, uint32>;
typealias VarUInt32CustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<varuint32, varuint32>;
typealias Int64CustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<int64, int64>;
typealias VarInt62CustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<varint62, varint62>;
typealias UInt64CustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<uint64,uint64>;
typealias VarUInt62CustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<varuint62, varuint62>;
typealias StringCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<string, string>;

typealias MyEnumCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<MyEnum, MyEnum>;
typealias MyFixedLengthEnumCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<MyFixedLengthEnum, MyFixedLengthEnum>;
typealias MyUncheckedEnumCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<MyUncheckedEnum, MyUncheckedEnum>;

interface DictionaryOperations
{
    // Builtin type dictionaries
    opUInt8Dict(p1: UInt8Dict, p2: UInt8Dict) -> (r1: UInt8Dict, r2: UInt8Dict);
    opBoolDict(p1: BoolDict, p2: BoolDict) -> (r1: BoolDict, r2: BoolDict);
    opInt16Dict(p1: Int16Dict, p2: Int16Dict) -> (r1: Int16Dict, r2: Int16Dict);
    opUInt16Dict(p1: UInt16Dict, p2: UInt16Dict) -> (r1: UInt16Dict, r2: UInt16Dict);
    opInt32Dict(p1: Int32Dict, p2: Int32Dict) -> (r1: Int32Dict, r2: Int32Dict);
    opVarInt32Dict(p1: VarInt32Dict, p2: VarInt32Dict) -> (r1: VarInt32Dict, r2: VarInt32Dict);
    opUInt32Dict(p1: UInt32Dict, p2: UInt32Dict) -> (r1: UInt32Dict, r2: UInt32Dict);
    opVarUInt32Dict(p1: VarUInt32Dict, p2: VarUInt32Dict) -> (r1: VarUInt32Dict, r2: VarUInt32Dict);
    opInt64Dict(p1: Int64Dict, p2: Int64Dict) -> (r1: Int64Dict, r2: Int64Dict);
    opVarInt62Dict(p1: VarInt62Dict, p2: VarInt62Dict) -> (r1: VarInt62Dict, r2: VarInt62Dict);
    opUInt64Dict(p1: UInt64Dict, p2: UInt64Dict) -> (r1: UInt64Dict, r2: UInt64Dict);
    opVarUInt62Dict(p1: VarUInt62Dict, p2: VarUInt62Dict) -> (r1: VarUInt62Dict, r2: VarUInt62Dict);
    opStringDict(p1: StringDict, p2: StringDict) -> (r1: StringDict, r2: StringDict);

    // Dictionaries with constructed types
    opMyEnumDict(p1: MyEnumDict, p2: MyEnumDict) -> (r1: MyEnumDict, r2: MyEnumDict);
    opMyFixedLengthEnumDict(p1: MyFixedLengthEnumDict, p2: MyFixedLengthEnumDict) -> (
        r1: MyFixedLengthEnumDict,
        r2: MyFixedLengthEnumDict,
    );
    opMyUncheckedEnumDict(p1: MyUncheckedEnumDict, p2: MyUncheckedEnumDict) -> (
        r1: MyUncheckedEnumDict,
        r2: MyUncheckedEnumDict,
    );
    opMyCompactStructDict(p1: MyCompactStructDict, p2: MyCompactStructDict) -> (
        r1: MyCompactStructDict,
        r2: MyCompactStructDict,
    );
    opOperationsDict(p1: OperationsDict, p2: OperationsDict) -> (r1: OperationsDict, r2: OperationsDict);
    opAnotherCompactStructDict(p1: AnotherCompactStructDict, p2: AnotherCompactStructDict) -> (
        r1: AnotherCompactStructDict,
        r2: AnotherCompactStructDict,
    );

    // Sorted dictionaries with builtin types
    opUInt8CustomDict(p1: UInt8CustomDict, p2: UInt8CustomDict) -> (r1: UInt8CustomDict, r2: UInt8CustomDict);
    opBoolCustomDict(p1: BoolCustomDict, p2: BoolCustomDict) -> (r1: BoolCustomDict, r2: BoolCustomDict);
    opInt16CustomDict(p1: Int16CustomDict, p2: Int16CustomDict) -> (r1: Int16CustomDict, r2: Int16CustomDict);
    opUInt16CustomDict(p1: UInt16CustomDict, p2: UInt16CustomDict) -> (r1: UInt16CustomDict, r2: UInt16CustomDict);
    opInt32CustomDict(p1: Int32CustomDict, p2: Int32CustomDict) -> (r1: Int32CustomDict, r2: Int32CustomDict);
    opVarInt32CustomDict(p1: VarInt32CustomDict, p2: VarInt32CustomDict) -> (r1: VarInt32CustomDict, r2: VarInt32CustomDict);
    opUInt32CustomDict(p1: UInt32CustomDict, p2: UInt32CustomDict) -> (r1: UInt32CustomDict, r2: UInt32CustomDict);
    opVarUInt32CustomDict(p1: VarUInt32CustomDict, p2: VarUInt32CustomDict) -> (
        r1: VarUInt32CustomDict,
        r2: VarUInt32CustomDict,
    );
    opInt64CustomDict(p1: Int64CustomDict, p2: Int64CustomDict) -> (r1: Int64CustomDict, r2: Int64CustomDict);
    opVarInt62CustomDict(p1: VarInt62CustomDict, p2: VarInt62CustomDict) -> (
        r1: VarInt62CustomDict,
        r2: VarInt62CustomDict,
    );
    opUInt64CustomDict(p1: UInt64CustomDict, p2: UInt64CustomDict) -> (r1: UInt64CustomDict, r2: UInt64CustomDict);
    opVarUInt62CustomDict(p1: VarUInt62CustomDict, p2: VarUInt62CustomDict) -> (
        r1: VarUInt62CustomDict,
        r2: VarUInt62CustomDict,
    );
    opStringCustomDict(p1: StringCustomDict, p2: StringCustomDict) -> (r1: StringCustomDict, r2: StringCustomDict);

    // Sorted dictionaries with constructed types
    opMyEnumCustomDict(p1: MyEnumCustomDict, p2: MyEnumCustomDict) -> (r1: MyEnumCustomDict, r2: MyEnumCustomDict);
    opMyFixedLengthEnumCustomDict(p1: MyFixedLengthEnumCustomDict, p2: MyFixedLengthEnumCustomDict) -> (
        r1: MyFixedLengthEnumCustomDict,
        r2: MyFixedLengthEnumCustomDict,
    );
    opMyUncheckedEnumCustomDict(p1: MyUncheckedEnumCustomDict, p2: MyUncheckedEnumCustomDict) -> (
        r1: MyUncheckedEnumCustomDict,
        r2: MyUncheckedEnumCustomDict,
    );
    // TODO Allow structs as sorted dictionary keys, implementing IComparable
}
