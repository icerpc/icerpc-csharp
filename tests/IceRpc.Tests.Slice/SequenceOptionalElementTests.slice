// Copyright (c) ZeroC, Inc. All rights reserved.

module IceRpc::Tests::Slice;

typealias OptionalByteSeq = sequence<uint8?>;
typealias OptionalBoolSeq = sequence<bool?>;
typealias OptionalShortSeq = sequence<int16?>;
typealias OptionalUShortSeq = sequence<uint16?>;
typealias OptionalIntSeq = sequence<int32?>;
typealias OptionalVarIntSeq = sequence<varint32?>;
typealias OptionalUIntSeq = sequence<uint32?>;
typealias OptionalVarUIntSeq = sequence<varuint32?>;
typealias OptionalLongSeq = sequence<int64?>;
typealias OptionalVarLongSeq = sequence<varint62?>;
typealias OptionalULongSeq = sequence<uint64?>;
typealias OptionalVarULongSeq = sequence<varuint62?>;
typealias OptionalFloatSeq = sequence<float32?>;
typealias OptionalDoubleSeq = sequence<float64?>;
typealias OptionalStringSeq = sequence<string?>;

typealias OptionalMyEnumSeq = sequence<MyEnum?>;
typealias OptionalMyFixedLengthEnumSeq = sequence<MyFixedLengthEnum?>;
typealias OptionalMyUncheckedEnumSeq = sequence<MyUncheckedEnum?>;

typealias OptionalMyCompactStructSeq = sequence<MyCompactStruct?>;
typealias OptionalOperationsSeq = sequence<Operations?>;
typealias OptionalAnotherCompactStructSeq = sequence<AnotherCompactStruct?>;

interface SequenceOptionalElementOperations
{
    // Optional builtin types sequences
    opOptionalByteSeq(p1: OptionalByteSeq, p2: OptionalByteSeq) -> (r1: OptionalByteSeq, r2: OptionalByteSeq);
    opOptionalBoolSeq(p1: OptionalBoolSeq, p2: OptionalBoolSeq) -> (r1: OptionalBoolSeq, r2: OptionalBoolSeq);
    opOptionalShortSeq(p1: OptionalShortSeq, p2: OptionalShortSeq) -> (r1: OptionalShortSeq, r2: OptionalShortSeq);
    opOptionalUShortSeq(p1: OptionalUShortSeq, p2: OptionalUShortSeq) -> (
        r1: OptionalUShortSeq,
        r2: OptionalUShortSeq,
    );
    opOptionalIntSeq(p1: OptionalIntSeq, p2: OptionalIntSeq) -> (r1: OptionalIntSeq, r2: OptionalIntSeq);
    opOptionalVarIntSeq(p1: OptionalVarIntSeq, p2: OptionalVarIntSeq) -> (
        r1: OptionalVarIntSeq,
        r2: OptionalVarIntSeq,
    );
    opOptionalUIntSeq(p1: OptionalUIntSeq, p2: OptionalUIntSeq) -> (r1: OptionalUIntSeq, r2: OptionalUIntSeq);
    opOptionalVarUIntSeq(p1: OptionalVarUIntSeq, p2: OptionalVarUIntSeq) -> (
        r1: OptionalVarUIntSeq,
        r2: OptionalVarUIntSeq,
    );
    opOptionalLongSeq(p1: OptionalLongSeq, p2: OptionalLongSeq) -> (r1: OptionalLongSeq, r2: OptionalLongSeq);
    opOptionalVarLongSeq(p1: OptionalVarLongSeq, p2: OptionalVarLongSeq) -> (
        r1: OptionalVarLongSeq,
        r2: OptionalVarLongSeq,
    );
    opOptionalULongSeq(p1: OptionalULongSeq, p2: OptionalULongSeq) -> (
        r1: OptionalULongSeq,
        r2: OptionalULongSeq,
    );
    opOptionalVarULongSeq(p1: OptionalVarULongSeq, p2: OptionalVarULongSeq) -> (
        r1: OptionalVarULongSeq,
        r2: OptionalVarULongSeq,
    );
    opOptionalFloatSeq(p1: OptionalFloatSeq, p2: OptionalFloatSeq) -> (r1: OptionalFloatSeq, r2: OptionalFloatSeq);
    opOptionalDoubleSeq(p1: OptionalDoubleSeq, p2: OptionalDoubleSeq) -> (
        r1: OptionalDoubleSeq,
        r2: OptionalDoubleSeq,
    );
    opOptionalStringSeq(p1: OptionalStringSeq, p2: OptionalStringSeq) -> (
        r1: OptionalStringSeq,
        r2: OptionalStringSeq,
    );

    // Optional defined types sequences
    opOptionalMyEnumSeq(p1: OptionalMyEnumSeq, p2: OptionalMyEnumSeq) -> (
        r1: OptionalMyEnumSeq,
        r2: OptionalMyEnumSeq,
    );
    opOptionalMyFixedLengthEnumSeq(p1: OptionalMyFixedLengthEnumSeq, p2: OptionalMyFixedLengthEnumSeq) -> (
        r1: OptionalMyFixedLengthEnumSeq,
        r2: OptionalMyFixedLengthEnumSeq,
    );
    opOptionalMyUncheckedEnumSeq(p1: OptionalMyUncheckedEnumSeq, p2: OptionalMyUncheckedEnumSeq) -> (
        r1: OptionalMyUncheckedEnumSeq,
        r2: OptionalMyUncheckedEnumSeq,
    );
    opOptionalMyCompactStructSeq(p1: OptionalMyCompactStructSeq, p2: OptionalMyCompactStructSeq) -> (
        r1: OptionalMyCompactStructSeq,
        r2: OptionalMyCompactStructSeq,
    );
    opOptionalOperationsSeq(p1: OptionalOperationsSeq, p2: OptionalOperationsSeq) -> (
        r1: OptionalOperationsSeq,
        r2: OptionalOperationsSeq,
    );
    opOptionalAnotherCompactStructSeq(p1: OptionalAnotherCompactStructSeq, p2: OptionalAnotherCompactStructSeq) -> (
        r1: OptionalAnotherCompactStructSeq,
        r2: OptionalAnotherCompactStructSeq,
    );
}
