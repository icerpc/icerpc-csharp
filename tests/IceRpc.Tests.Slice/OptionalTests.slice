// Copyright (c) ZeroC, Inc. All rights reserved.

module IceRpc::Tests::Slice;

compact struct OneOptional
{
    a: int32?,
}

compact struct MultiOptional
{
    mByte: uint8?,
    mBool: bool?,
    mShort: int16?,
    mInt: int32?,
    mLong: int64?,
    mFloat: float32?,
    mDouble: float64?,
    mUShort: uint16?,
    mUInt: uint32?,
    mULong: uint64?,
    mVarInt: varint32?,
    mVarLong: varint62?,
    mVarUInt: varuint32?,
    mVarULong: varuint62?,
    mString: string?,

    mMyEnum: MyEnum?,
    mMyCompactStruct: MyCompactStruct?,
    mAnotherCompactStruct: AnotherCompactStruct?,

    mByteSeq: ByteSeq?,
    mStringSeq: StringSeq?,
    mShortSeq: ShortSeq?,
    mMyEnumSeq: MyEnumSeq?,
    mMyCompactStructSeq: MyCompactStructSeq?,
    mAnotherCompactStructSeq: AnotherCompactStructSeq?,

    mInt32Dict: Int32Dict?,
    mStringDict: StringDict?,
    mUShortSeq: UShortSeq?,
    mVarULongSeq: VarULongSeq?,
    mVarIntSeq: VarIntSeq?,

    mUInt8Dict: UInt8Dict?,
    mMyCompactStructDict: MyCompactStructDict?,
    mAnotherCompactStructDict: AnotherCompactStructDict?,
}

interface OptionalOperations
{
    pingPongOne(o: OneOptional?) -> OneOptional?;
    pingPongMulti(o: MultiOptional?) -> MultiOptional?;

    opUInt8(p1: uint8?) -> (r1: uint8?, r2: uint8?);

    opBool(p1: bool?) -> (r1: bool?, r2: bool?);

    opInt16(p1: int16?) -> (r1: int16?, r2: int16?);

    opInt32(p1: int32?) -> (r1: int32?, r2: int32?);

    opInt64(p1: int64?) -> (r1: int64?, r2: int64?);

    opFloat32(p1: float32?) -> (r1: float32?, r2: float32?);

    opFloat64(p1: float64?) -> (r1: float64?, r2: float64?);

    opString(p1: string?) -> (r1: string?, r2: string?);

    opMyEnum(p1: MyEnum?) -> (r1: MyEnum?, r2: MyEnum?);

    opMyCompactStruct(p1: MyCompactStruct?) -> (r1: MyCompactStruct?, r2: MyCompactStruct?);

    opAnotherCompactStruct(p1: AnotherCompactStruct?) -> (r1: AnotherCompactStruct?, r2: AnotherCompactStruct?);

    opUInt8Seq(p1: ByteSeq?) -> (r1: ByteSeq?, r2: ByteSeq?);
    opUInt8List(p1: ByteList?) -> (r1: ByteList?, r2: ByteList?);

    opBoolSeq(p1: BoolSeq?) -> (r1: BoolSeq?, r2: BoolSeq?);
    opBoolList(p1: BoolList?) -> (r1: BoolList?, r2: BoolList?);

    opInt16Seq(p1: ShortSeq?) -> (r1: ShortSeq?, r2: ShortSeq?);
    opInt16List(p1: ShortList?) -> (r1: ShortList?, r2: ShortList?);

    opInt32Seq(p1: IntSeq?) -> (r1: IntSeq?, r2: IntSeq?);
    opInt32List(p1: IntList?) -> (r1: IntList?, r2: IntList?);

    opInt64Seq(p1: LongSeq?) -> (r1: LongSeq?, r2: LongSeq?);
    opInt64List(p1: LongList?) -> (r1: LongList?, r2: LongList?);

    opFloat32Seq(p1: FloatSeq?) -> (r1: FloatSeq?, r2: FloatSeq?);
    opFloat32List(p1: FloatList?) -> (r1: FloatList?, r2: FloatList?);

    opFloat64Seq(p1: DoubleSeq?) -> (r1: DoubleSeq?, r2: DoubleSeq?);
    opFloat64List(p1: DoubleList?) -> (r1: DoubleList?, r2: DoubleList?);

    opStringSeq(p1: StringSeq?) -> (r1: StringSeq?, r2: StringSeq?);
    opStringList(p1: StringList?) -> (r1: StringList?, r2: StringList?);

    opMyCompactStructSeq(p1: MyCompactStructSeq?) -> (r1: MyCompactStructSeq?, r2: MyCompactStructSeq?);
    opMyCompactStructList(p1: MyCompactStructList?) -> (r1: MyCompactStructList?, r2: MyCompactStructList?);

    opAnotherCompactStructSeq(p1: AnotherCompactStructSeq?) -> (
        r1: AnotherCompactStructSeq?,
        r2: AnotherCompactStructSeq?,
    );
    opAnotherCompactStructList(p1: AnotherCompactStructList?) -> (
        r1: AnotherCompactStructList?,
        r2: AnotherCompactStructList?,
    );

    opInt32Dict(p1: Int32Dict?) -> (r1: Int32Dict?, r2: Int32Dict?);
    opStringDict(p1: StringDict?) -> (r1: StringDict?, r2: StringDict?);

    [cs:encoded-result] opMyCompactStructMarshaledResult(p1: MyCompactStruct?) -> MyCompactStruct?;
    [cs:encoded-result] opStringSeqMarshaledResult(p1: StringSeq?) -> StringSeq?;
    [cs:encoded-result] opInt32DictMarshaledResult(p1: Int32Dict?) -> Int32Dict?;
}
