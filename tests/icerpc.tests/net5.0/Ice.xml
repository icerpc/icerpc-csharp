<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ice</name>
    </assembly>
    <members>
        <member name="T:ZeroC.Ice.AnyClass">
            <summary>The base class for classes defined in Slice.</summary>
        </member>
        <member name="F:ZeroC.Ice.AnyClass.IceReader">
            <summary>An InputStream reader used to read non nullable class instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.AnyClass.IceReaderIntoNullable">
            <summary>An InputStream reader used to read nullable class instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.AnyClass.IceWriter">
            <summary>An OutputStream writer used to write non nullable class instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.AnyClass.IceWriterFromNullable">
            <summary>An OutputStream writer used to write nullable class instances.</summary>
        </member>
        <member name="P:ZeroC.Ice.AnyClass.IceSlicedData">
            <summary>Returns the sliced data if the class has a preserved-slice base class and has been sliced during
            unmarshaling, otherwise <c>null</c>.</summary>
        </member>
        <member name="M:ZeroC.Ice.AnyClass.IceRead(ZeroC.Ice.InputStream,System.Boolean)">
            <summary>Unmarshals the current object by reading its data members from the <see cref="T:ZeroC.Ice.InputStream"/>.
            </summary>
            <param name="istr">The stream to read from.</param>
            <param name="firstSlice"><c>True</c> if this is the first Slice otherwise<c>False</c>.</param>
        </member>
        <member name="M:ZeroC.Ice.AnyClass.IceWrite(ZeroC.Ice.OutputStream,System.Boolean)">
            <summary>Marshals the current object by writing its data to from the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
            <param name="firstSlice"><c>True</c> if this is the first Slice otherwise<c>False</c>.</param>
        </member>
        <member name="T:ZeroC.Ice.AnyClassExtensions">
            <summary>Provides public extensions methods for AnyClass instances.</summary>
        </member>
        <member name="M:ZeroC.Ice.AnyClassExtensions.GetSlicedData(ZeroC.Ice.AnyClass)">
            <summary>During unmarshaling, Ice can slice off derived slices that it does not know how to read, and it can
            optionally preserve those "unknown" slices. See the Slice preserve metadata directive and class
            <see cref="T:ZeroC.Ice.UnknownSlicedClass"/>.</summary>
            <returns>A SlicedData value that provides the list of sliced-off slices.</returns>
        </member>
        <member name="T:ZeroC.Ice.AsyncSemaphore">
            <summary>A lightweight semaphore implementation that provides FIFO guarantee for WaitAsync. WaitAsync also
            relies on ManualResetValueTaskCompletionSource to minimize heap allocations and provide a ValueTask based
            WaitAsync operation.</summary>
        </member>
        <member name="T:ZeroC.Ice.BinaryContextKey">
            <summary>Constants used as keys for BinaryContext entries.</summary>
        </member>
        <member name="F:ZeroC.Ice.BinaryContextKey.RetryPolicy">
            <summary>Key used to encode the retry policy entry.</summary>
        </member>
        <member name="M:ZeroC.Ice.BinaryContextHelper.ReadBinaryContext(ZeroC.Ice.InputStream)">
            <summary>Reads a binary context from the stream.</summary>
            <param name="istr">The input stream.</param>
            <returns>The binary context as an immutable dictionary.</returns>
            <remarks>The values of the dictionary reference memory in the stream's underlying buffer.</remarks>
        </member>
        <member name="T:ZeroC.Ice.BitSequence">
            <summary>Presents one or two <see cref="T:System.Span`1"/> of bytes as a continuous sequence of bits.</summary>
        </member>
        <member name="F:ZeroC.Ice.BitSequence.FirstSpan">
            <summary>The first underlying span of bytes.</summary>
        </member>
        <member name="P:ZeroC.Ice.BitSequence.Item(System.Int32)">
            <summary>Gets or sets a bit in the bit sequence.</summary>
            <param name="index">The index of the bit to get or set. Must be between 0 and Length - 1.</param>
            <value>True when the bit is set, false when the bit is unset.</value>
        </member>
        <member name="P:ZeroC.Ice.BitSequence.Length">
            <summary>The length of the bit sequence.</summary>
        </member>
        <member name="F:ZeroC.Ice.BitSequence.SecondSpan">
            <summary>The second underlying span of bytes.</summary>
        </member>
        <member name="M:ZeroC.Ice.BitSequence.#ctor(System.Span{System.Byte},System.Span{System.Byte})">
            <summary>Constructs a bit sequence over one or two spans of bytes.</summary>
        </member>
        <member name="M:ZeroC.Ice.BitSequence.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ZeroC.Ice.ReadOnlyBitSequence">
            <summary>Presents a <see cref="T:System.ReadOnlySpan`1"/> of bytes as a continuous read-only sequence of bits.</summary>
        </member>
        <member name="P:ZeroC.Ice.ReadOnlyBitSequence.Item(System.Int32)">
            <summary>Gets a bit in the bit sequence.</summary>
            <param name="index">The index of the bit to get. Must be between 0 and Length - 1.</param>
            <value>True when the bit is set, false when the bit is unset.</value>
        </member>
        <member name="P:ZeroC.Ice.ReadOnlyBitSequence.Length">
            <summary>The length of the bit sequence.</summary>
        </member>
        <member name="F:ZeroC.Ice.ReadOnlyBitSequence.Span">
            <summary>The underlying span of bytes.</summary>
        </member>
        <member name="M:ZeroC.Ice.ReadOnlyBitSequence.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>Constructs a read-only bit sequence over a read-only span of bytes.</summary>
        </member>
        <member name="M:ZeroC.Ice.ReadOnlyBitSequence.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ZeroC.Ice.BufferedReceiveOverSingleStreamSocket">
            <summary>The BufferedReceiveOverSingleStreamSocket is a wrapper around SingleStreamSocket to provide
            buffered data receive. This helps to limit the number of operating system Receive calls when the user
            needs to read only few bytes before reading more (typically to read a frame header) by receiving the
            data in a small buffer. It's similar to the C# System.IO.BufferedStream class. It's used to implement
            Slic and WebSocket.
            </summary>
        </member>
        <member name="M:ZeroC.Ice.BufferedReceiveOverSingleStreamSocket.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.BufferedReceiveOverSingleStreamSocket.ReceiveAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>Returns buffered data. If there's no buffered data, the buffer is filled using the underlying
            socket to receive additional data. The method returns when the buffer contains at least byteCount
            data. If byteCount is set to zero, it returns all the buffered data.</summary>
            <param name="byteCount">The number of bytes of buffered data to return. It can be set to null to get all
            the buffered data.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <return>The buffered data. The returned data points to an internal buffer that is only valid until the next
            ReceiveAsync call.</return>
        </member>
        <member name="M:ZeroC.Ice.BufferedReceiveOverSingleStreamSocket.Rewind(System.Int32)">
            <summary>Rewinds the buffered data. This can be used if too much buffered data has been read to add
            it back to the buffer.</summary>
            <param name="bytes">The number of bytes to unread from the buffer.</param>
        </member>
        <member name="T:ZeroC.Ice.ByteBufferExtensions">
            <summary>Provides extension methods for byte buffers (such as <c>ReadOnlyMemory{byte}</c>) to read and write
            data encoded using the Ice encoding.</summary>
        </member>
        <member name="M:ZeroC.Ice.ByteBufferExtensions.Read``1(System.ReadOnlyMemory{System.Byte},ZeroC.Ice.Encoding,ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.Communicator,ZeroC.Ice.Connection,ZeroC.Ice.IObjectPrx)">
            <summary>Reads a value from the buffer. This value cannot contain classes or exceptions.</summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="buffer">The byte buffer.</param>
            <param name="encoding">The encoding of the data in the buffer.</param>
            <param name="reader">The <see cref="T:ZeroC.Ice.InputStreamReader`1"/> that reads the value from the buffer using an
            <see cref="T:ZeroC.Ice.InputStream"/>.</param>
            <param name="communicator">The communicator (optional).</param>
            <param name="connection">The connection (optional).</param>
            <param name="proxy">The proxy (optional).</param>
            <returns>The value read from the buffer.</returns>
            <exception name="InvalidDataException">Thrown when <c>reader</c> finds invalid data or <c>reader</c> leaves
            unread data in the buffer.</exception>
            <remarks>When reading proxies, communicator, connection or proxy must be non-null.</remarks>
        </member>
        <member name="M:ZeroC.Ice.ByteBufferExtensions.Read``1(System.ReadOnlyMemory{System.Byte},ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.Communicator,ZeroC.Ice.Connection,ZeroC.Ice.IObjectPrx)">
            <summary>Reads a value from the buffer that uses the Ice 2.0 encoding. This value cannot contain classes or
            exceptions.</summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="buffer">The byte buffer.</param>
            <param name="reader">The <see cref="T:ZeroC.Ice.InputStreamReader`1"/> that reads the value from the buffer using an
            <see cref="T:ZeroC.Ice.InputStream"/>.</param>
            <param name="communicator">The communicator (optional).</param>
            <param name="connection">The connection (optional).</param>
            <param name="proxy">The proxy (optional).</param>
            <returns>The value read from the buffer.</returns>
            <exception name="InvalidDataException">Thrown when <c>reader</c> finds invalid data or <c>reader</c> leaves
            unread data in the buffer.</exception>
            <remarks>When reading proxies, communicator, connection or proxy must be non-null.</remarks>
        </member>
        <member name="M:ZeroC.Ice.ByteBufferExtensions.ReadEmptyEncapsulation(System.ReadOnlyMemory{System.Byte},ZeroC.Ice.Encoding)">
            <summary>Reads an empty encapsulation from the buffer.</summary>
            <param name="buffer">The byte buffer.</param>
            <param name="encoding">The encoding of encapsulation header.</param>
            <exception name="InvalidDataException">Thrown when the buffer is not an empty encapsulation, for example
            when buffer contains an encapsulation that does not have only tagged parameters.</exception>
        </member>
        <member name="M:ZeroC.Ice.ByteBufferExtensions.ReadEmptyEncapsulation(System.ReadOnlyMemory{System.Byte})">
            <summary>Reads an empty encapsulation from the buffer, with the encapsulation header encoded using the 2.0
            encoding.</summary>
            <param name="buffer">The byte buffer.</param>
            <exception name="InvalidDataException">Thrown when the buffer is not an empty encapsulation, for example
            when buffer contains an encapsulation that does not have only tagged parameters.</exception>
        </member>
        <member name="M:ZeroC.Ice.ByteBufferExtensions.ReadEncapsulation``1(System.ReadOnlyMemory{System.Byte},ZeroC.Ice.Encoding,ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.Communicator,ZeroC.Ice.Connection,ZeroC.Ice.IObjectPrx)">
            <summary>Reads the contents of an encapsulation from the buffer.</summary>
            <typeparam name="T">The type of the contents.</typeparam>
            <param name="buffer">The byte buffer.</param>
            <param name="encoding">The encoding of encapsulation header in the buffer.</param>
            <param name="payloadReader">The <see cref="T:ZeroC.Ice.InputStreamReader`1"/> that reads the payload of the
            encapsulation using an <see cref="T:ZeroC.Ice.InputStream"/>.</param>
            <param name="communicator">The communicator (optional).</param>
            <param name="connection">The connection (optional).</param>
            <param name="proxy">The proxy (optional).</param>
            <returns>The contents of the encapsulation read from the buffer.</returns>
            <exception name="InvalidDataException">Thrown when <c>buffer</c> is not a valid encapsulation or
            <c>payloadReader</c> finds invalid data.</exception>
            <remarks>When reading classes, proxies or exceptions, communicator, connection or proxy must be non-null.
            </remarks>
        </member>
        <member name="M:ZeroC.Ice.ByteBufferExtensions.ReadEncapsulation``1(System.ReadOnlyMemory{System.Byte},ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.Communicator,ZeroC.Ice.Connection,ZeroC.Ice.IObjectPrx)">
            <summary>Reads the contents of an encapsulation from the buffer, with the encapsulation header encoded
            using the 2.0 encoding.</summary>
            <typeparam name="T">The type of the contents.</typeparam>
            <param name="buffer">The byte buffer.</param>
            <param name="payloadReader">The <see cref="T:ZeroC.Ice.InputStreamReader`1"/> that reads the payload of the
            encapsulation using an <see cref="T:ZeroC.Ice.InputStream"/>.</param>
            <param name="communicator">The communicator (optional).</param>
            <param name="connection">The connection (optional).</param>
            <param name="proxy">The proxy (optional).</param>
            <returns>The contents of the encapsulation read from the buffer.</returns>
            <exception name="InvalidDataException">Thrown when <c>buffer</c> is not a valid encapsulation or
            <c>payloadReader</c> finds invalid data.</exception>
            <remarks>When reading classes, proxies or exceptions, communicator, connection or proxy must be non-null.
            </remarks>
        </member>
        <member name="M:ZeroC.Ice.ByteBufferExtensions.ReadString(System.ReadOnlySpan{System.Byte})">
            <summary>Reads a string from a UTF-8 byte buffer. The size of the byte buffer corresponds to the number of
            UTF-8 code points in the string.</summary>
            <param name="buffer">The byte buffer.</param>
            <returns>The string read from the buffer.</returns>
        </member>
        <member name="M:ZeroC.Ice.ByteBufferExtensions.WriteFixedLengthSize20(System.Span{System.Byte},System.Int64)">
            <summary>Writes a size into a span of bytes using a fixed number of bytes.</summary>
            <param name="buffer">The destination byte buffer, which must be 1, 2, 4 or 8 bytes long.</param>
            <param name="size">The size to write.</param>
        </member>
        <member name="T:ZeroC.Ice.ColocatedAcceptor">
            <summary>The IAcceptor implementation for the colocated transport.</summary>
        </member>
        <member name="T:ZeroC.Ice.ColocatedEndpoint">
            <summary>The Endpoint class for the colocated transport.</summary>
        </member>
        <member name="T:ZeroC.Ice.ColocatedSocket">
            <summary>The MultiStreamSocket class for the colocated transport.</summary>
        </member>
        <member name="T:ZeroC.Ice.ColocatedStream">
            <summary>The SocketStream class for the colocated transport.</summary>
        </member>
        <member name="M:ZeroC.Ice.ColocatedStream.#ctor(ZeroC.Ice.ColocatedSocket,System.Int64)">
            <summary>Constructor for incoming colocated stream</summary>
        </member>
        <member name="M:ZeroC.Ice.ColocatedStream.#ctor(ZeroC.Ice.ColocatedSocket,System.Boolean,System.Boolean)">
            <summary>Constructor for outgoing colocated stream</summary>
        </member>
        <member name="T:ZeroC.Ice.Communicator">
            <summary>The central object in Ice. One or more communicators can be instantiated for an Ice application.
            </summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.ShutdownComplete">
            <summary>Returns a task that completes when the communicator's shutdown is complete: see
            <see cref="M:ZeroC.Ice.Communicator.ShutdownAsync"/>. This property can be retrieved before shutdown is initiated. A typical use-case
            is to call <c>await communicator.ShutdownComplete;</c> in the Main method of a server to prevent the server
            from exiting immediately. Once this task completes, the server can still make remote invocations since a
            communicator that is shut down (but not disposed) remains usable for remote invocations.</summary>
        </member>
        <member name="M:ZeroC.Ice.Communicator.ShutdownAsync">
            <summary>Shuts down this communicator's server functionality. This triggers the disposal of all object
            adapters. After this method returns, no new requests are processed. However, requests that have been started
            before ShutdownAsync was called might still be active until the returned task completes.</summary>
        </member>
        <member name="M:ZeroC.Ice.Communicator.CreateObjectAdapter(System.Boolean,System.Threading.Tasks.TaskScheduler,ZeroC.Ice.Protocol)">
            <summary>Creates a new nameless object adapter. Such an object adapter has no configuration and can be
            associated with a bidirectional connection.</summary>
            <param name="serializeDispatch">Indicates whether or not this object adapter serializes the dispatching of
            of requests received over the same connection.</param>
            <param name="taskScheduler">The optional task scheduler to use for dispatching requests.</param>
            <param name="protocol">The protocol used for this object adapter.</param>
            <returns>The new object adapter.</returns>
        </member>
        <member name="M:ZeroC.Ice.Communicator.CreateObjectAdapter(System.String,System.Boolean,System.Threading.Tasks.TaskScheduler)">
            <summary>Creates a new object adapter. The communicator uses the object adapter's name to lookup its
            properties, such as name.Endpoints.</summary>
            <param name="name">The object adapter name. Cannot be empty.</param>
            <param name="serializeDispatch">Indicates whether or not this object adapter serializes the dispatching of
            of requests received over the same connection.</param>
            <param name="taskScheduler">The optional task scheduler to use for dispatching requests.</param>
            <returns>The new object adapter.</returns>
        </member>
        <member name="M:ZeroC.Ice.Communicator.CreateObjectAdapterWithEndpoints(System.String,System.String,System.Boolean,System.Threading.Tasks.TaskScheduler)">
            <summary>Creates a new object adapter with the specified endpoint string. Calling this method is equivalent
            to setting the name.Endpoints property and then calling
            <see cref="M:ZeroC.Ice.Communicator.CreateObjectAdapter(System.String,System.Boolean,System.Threading.Tasks.TaskScheduler)"/>.</summary>
            <param name="name">The object adapter name. Cannot be empty.</param>
            <param name="endpoints">The endpoint string for the object adapter.</param>
            <param name="serializeDispatch">Indicates whether or not this object adapter serializes the dispatching of
            of requests received over the same connection.</param>
            <param name="taskScheduler">The optional task scheduler to use for dispatching requests.</param>
            <returns>The new object adapter.</returns>
        </member>
        <member name="M:ZeroC.Ice.Communicator.CreateObjectAdapterWithEndpoints(System.String,System.Boolean,System.Threading.Tasks.TaskScheduler)">
            <summary>Creates a new object adapter with the specified endpoint string. This method generates a UUID for
            the object adapter name and then calls
            <see cref="M:ZeroC.Ice.Communicator.CreateObjectAdapterWithEndpoints(System.String,System.String,System.Boolean,System.Threading.Tasks.TaskScheduler)"/>.
            </summary>
            <param name="endpoints">The endpoint string for the object adapter.</param>
            <param name="serializeDispatch">Indicates whether or not this object adapter serializes the dispatching of
            of requests received over the same connection.</param>
            <param name="taskScheduler">The optional task scheduler to use for dispatching requests.</param>
            <returns>The new object adapter.</returns>
        </member>
        <member name="M:ZeroC.Ice.Communicator.GetProperty(System.String)">
            <summary>Gets the value of a property. If the property is not set, returns null.</summary>
            <param name="name">The property name.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:ZeroC.Ice.Communicator.GetProperties(System.String)">
            <summary>Gets all properties whose keys begins with forPrefix. If forPrefix is the empty string, then all
            properties are returned.</summary>
            <param name="forPrefix">The prefix to search for (empty string if none).</param>
            <returns>The matching property set.</returns>
        </member>
        <member name="M:ZeroC.Ice.Communicator.SetProperty(System.String,System.String)">
            <summary>Inserts a new property or changes the value of an existing property. Setting the value of a
            property to the empty string removes this property if it was present, and does nothing otherwise.</summary>
            <param name="name">The property name.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:ZeroC.Ice.Communicator.SetProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Inserts new properties or changes the value of existing properties. Setting the value of a property
            to the empty string removes this property if it was present, and does nothing otherwise.</summary>
            <param name="updates">A dictionary of properties. This methods removes properties that did not change
            anything from this dictionary.</param>
        </member>
        <member name="M:ZeroC.Ice.Communicator.RemoveProperty(System.String)">
            <summary>Removes a property.</summary>
            <param name="name">The property name.</param>
            <returns>true if the property is successfully found and removed; otherwise false.</returns>
        </member>
        <member name="M:ZeroC.Ice.Communicator.GetUnusedProperties">
            <summary>Gets all properties that were not read.</summary>
            <returns>The properties that were not read as a list of keys.</returns>
        </member>
        <member name="P:ZeroC.Ice.Communicator.AcceptNonSecure">
            <summary>Indicates under what conditions the object adapters created by this communicator accept non-secure
            incoming connections. This property corresponds to the Ice.AcceptNonSecure configuration property. It can
            be overridden for each object adapter by the object adapter property with the same name.</summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.CloseTimeout">
            <summary>The connection close timeout.</summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.ConnectTimeout">
            <summary>The connection establishment timeout.</summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.CurrentContext">
            <summary>Each time you send a request without an explicit context parameter, Ice sends automatically the
            per-thread CurrentContext combined with the proxy's context.</summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.DefaultContext">
            <summary>The default context for proxies created using this communicator. Changing the value of
            DefaultContext does not change the context of previously created proxies.</summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.DefaultDispatchInterceptors">
            <summary>The default dispatch interceptors for object adapters created using this communicator. Changing the
            value of DefaultDispatchInterceptors does not change the dispatch interceptors of previously created object
            adapters.</summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.DefaultInvocationInterceptors">
            <summary>The default invocation interceptors for proxies created using this communicator. Changing the value
            of DefaultInvocationInterceptors does not change the invocation interceptors of previously created proxies.
            </summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.DefaultLocator">
            <summary>The default locator for this communicator. To disable the default locator, null can be used.
            All newly created proxies and object adapters will use this default locator. Note that setting this property
            has no effect on existing proxies or object adapters.</summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.DefaultPreferExistingConnection">
            <summary>Gets the communicator's preference for reusing existing connections.</summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.DefaultPreferNonSecure">
            <summary>Gets the communicator's preference for establishing non-secure connections.</summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.DefaultSourceAddress">
            <summary>Gets the default source address value used by proxies created with this communicator.</summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.DefaultInvocationTimeout">
            <summary>Gets the default invocation timeout value used by proxies created with this communicator.
            </summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.DefaultLocatorCacheTimeout">
            <summary>Gets the default value for the locator cache timeout used by proxies created with this
            communicator.</summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.Logger">
            <summary>The logger for this communicator.</summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.Observer">
            <summary>Gets the communicator observer used by the Ice run-time or null if a communicator observer
            was not set during communicator construction.</summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.ToStringMode">
            <summary>The output mode or format for ToString on Ice proxies when the protocol is ice1. See
            <see cref="T:ZeroC.Ice.ToStringMode"/>.</summary>
        </member>
        <member name="P:ZeroC.Ice.Communicator.InvocationMaxAttempts">
            <summary>Gets the maximum number of invocation attempts made to send a request including the original
            invocation. It must be a number greater than 0.</summary>
        </member>
        <member name="M:ZeroC.Ice.Communicator.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},ZeroC.Ice.ILogger,ZeroC.Ice.Instrumentation.ICommunicatorObserver,ZeroC.Ice.TlsClientOptions,ZeroC.Ice.TlsServerOptions)">
            <summary>Constructs a new communicator.</summary>
            <param name="properties">The properties of the new communicator.</param>
            <param name="logger">The logger used by the new communicator.</param>
            <param name="observer">The communicator observer used by the new communicator.</param>
            <param name="tlsClientOptions">Client side configuration for TLS connections.</param>
            <param name="tlsServerOptions">Server side configuration for TLS connections.</param>
        </member>
        <member name="M:ZeroC.Ice.Communicator.#ctor(System.String[]@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},ZeroC.Ice.ILogger,ZeroC.Ice.Instrumentation.ICommunicatorObserver,ZeroC.Ice.TlsClientOptions,ZeroC.Ice.TlsServerOptions)">
            <summary>Constructs a new communicator.</summary>
            <param name="args">An array of command-line arguments used to set or override Ice.* properties.</param>
            <param name="properties">The properties of the new communicator.</param>
            <param name="logger">The logger used by the new communicator.</param>
            <param name="observer">The communicator observer used by the new communicator.</param>
            <param name="tlsClientOptions">Client side configuration for TLS connections.</param>
            <param name="tlsServerOptions">Server side configuration for TLS connections.</param>
        </member>
        <member name="M:ZeroC.Ice.Communicator.#ctor(System.Collections.Specialized.NameValueCollection,ZeroC.Ice.ILogger,ZeroC.Ice.Instrumentation.ICommunicatorObserver,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},ZeroC.Ice.TlsClientOptions,ZeroC.Ice.TlsServerOptions)">
            <summary>Constructs a new communicator.</summary>
            <param name="appSettings">Collection of settings to configure the new communicator properties. The
            appSettings param has precedence over the properties param.</param>
            <param name="logger">The logger used by the new communicator.</param>
            <param name="observer">The communicator observer used by the Ice run-time.</param>
            <param name="properties">The properties of the new communicator.</param>
            <param name="tlsClientOptions">Client side configuration for TLS connections.</param>
            <param name="tlsServerOptions">Server side configuration for TLS connections.</param>
        </member>
        <member name="M:ZeroC.Ice.Communicator.#ctor(System.String[]@,System.Collections.Specialized.NameValueCollection,ZeroC.Ice.ILogger,ZeroC.Ice.Instrumentation.ICommunicatorObserver,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},ZeroC.Ice.TlsClientOptions,ZeroC.Ice.TlsServerOptions)">
            <summary>Constructs a new communicator.</summary>
            <param name="args">An array of command-line arguments used to set or override Ice.* properties.</param>
            <param name="appSettings">Collection of settings to configure the new communicator properties. The
            appSettings param has precedence over the properties param.</param>
            <param name="logger">The logger used by the new communicator.</param>
            <param name="observer">The communicator observer used by the new communicator.</param>
            <param name="properties">The properties of the new communicator.</param>
            <param name="tlsClientOptions">Client side configuration for TLS connections.</param>
            <param name="tlsServerOptions">Server side configuration for TLS connections.</param>
        </member>
        <member name="M:ZeroC.Ice.Communicator.ActivateAsync(System.Threading.CancellationToken)">
            <summary>Activates the built-in locator implementation of this communicator, if any.</summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that completes when the activation completes.</returns>
        </member>
        <member name="M:ZeroC.Ice.Communicator.DestroyAsync">
            <summary>Releases all resources used by this communicator. This method calls <see cref="M:ZeroC.Ice.Communicator.ShutdownAsync"/>
            implicitly, and can be called multiple times.</summary>
            <returns>A task that completes when the destruction is complete.</returns>
        </member>
        <member name="M:ZeroC.Ice.Communicator.DisposeAsync">
            <summary>An alias for <see cref="M:ZeroC.Ice.Communicator.DestroyAsync"/>, except this method returns a <see cref="T:System.Threading.Tasks.ValueTask"/>.
            </summary>
            <returns>A value task constructed using the task returned by DestroyAsync.</returns>
        </member>
        <member name="M:ZeroC.Ice.Communicator.RegisterIce1Transport(ZeroC.Ice.Transport,System.String,ZeroC.Ice.Ice1EndpointFactory,ZeroC.Ice.Ice1EndpointParser)">
            <summary>Registers a new transport for the ice1 protocol.</summary>
            <param name="transport">The transport.</param>
            <param name="transportName">The name of the transport in lower case, for example "tcp".</param>
            <param name="factory">A delegate that Ice will use to unmarshal endpoints for this transport.</param>
            <param name="parser">A delegate that Ice will use to parse endpoints for this transport.</param>
        </member>
        <member name="M:ZeroC.Ice.Communicator.RegisterIce2Transport(ZeroC.Ice.Transport,System.String,ZeroC.Ice.Ice2EndpointFactory,ZeroC.Ice.Ice2EndpointParser,System.UInt16)">
            <summary>Registers a new transport for the ice2 protocol.</summary>
            <param name="transport">The transport.</param>
            <param name="transportName">The name of the transport in lower case, for example "tcp".</param>
            <param name="factory">A delegate that Ice will use to unmarshal endpoints for this transport.</param>
            <param name="parser">A delegate that Ice will use to parse endpoints for this transport.</param>
            <param name="defaultPort">The default port for URI endpoints that don't specificy a port explicitly.</param>
        </member>
        <member name="T:ZeroC.Ice.CompressionLevel">
            <summary>Specifies values that indicate whether a compression operation emphasizes speed or compression size.
            </summary>
        </member>
        <member name="F:ZeroC.Ice.CompressionLevel.Fastest">
            <summary>The compression operation should complete as quickly as possible.</summary>
        </member>
        <member name="F:ZeroC.Ice.CompressionLevel.Optimal">
            <summary>The compression operation should be optimal, even if the operation takes a longer time to
            complete.</summary>
        </member>
        <member name="T:ZeroC.Ice.ConnectionState">
            <summary>The state of an Ice connection.</summary>
        </member>
        <member name="F:ZeroC.Ice.ConnectionState.Initializing">
            <summary>The connection is being initialized.</summary>
        </member>
        <member name="F:ZeroC.Ice.ConnectionState.Active">
            <summary>The connection is active and can send and receive messages.</summary>
        </member>
        <member name="F:ZeroC.Ice.ConnectionState.Closing">
            <summary>The connection is being gracefully shutdown and waits for the peer to close its end of the
            connection.</summary>
        </member>
        <member name="F:ZeroC.Ice.ConnectionState.Closed">
            <summary>The connection is closed and eventually waits for potential dispatch to be finished before being
            destroyed.</summary>
        </member>
        <member name="T:ZeroC.Ice.Connection">
            <summary>Represents a connection used to send and receive Ice frames.</summary>
        </member>
        <member name="P:ZeroC.Ice.Connection.Adapter">
            <summary>Gets or sets the object adapter that dispatches requests received over this connection.
            A client can invoke an operation on a server using a proxy, and then set an object adapter for the
            outgoing connection used by the proxy in order to receive callbacks. This is useful if the server
            cannot establish a connection back to the client, for example because of firewalls.</summary>
            <value>The object adapter that dispatches requests for the connection, or null if no adapter is set.
            </value>
        </member>
        <member name="P:ZeroC.Ice.Connection.Communicator">
            <summary>Gets the communicator.</summary>
        </member>
        <member name="P:ZeroC.Ice.Connection.Endpoint">
            <summary>Gets the endpoint from which the connection was created.</summary>
            <value>The endpoint from which the connection was created.</value>
        </member>
        <member name="P:ZeroC.Ice.Connection.IdleTimeout">
            <summary>Gets the connection idle timeout.</summary>
        </member>
        <member name="P:ZeroC.Ice.Connection.IsIncoming">
            <summary><c>true</c> for incoming connections <c>false</c> otherwise.</summary>
        </member>
        <member name="P:ZeroC.Ice.Connection.IsSecure">
            <summary><c>true</c> if the connection uses encryption <c>false</c> otherwise.</summary>
        </member>
        <member name="P:ZeroC.Ice.Connection.KeepAlive">
            <summary>Enables or disables the keep alive. When enabled, the connection is kept alive by sending ping
            frames at regular time intervals when the connection is idle.</summary>
        </member>
        <member name="P:ZeroC.Ice.Connection.Label">
            <summary>Gets the label which was used to create the connection, can be non-null only for outgoing
            connections</summary>
            <value>The label which was used to create the connection.</value>
        </member>
        <member name="P:ZeroC.Ice.Connection.PeerIncomingFrameMaxSize">
            <summary>The peer's incoming frame maximum size. This is only supported with ice2 connections. For
            ice1 connections, the value is always -1.</summary>
        </member>
        <member name="P:ZeroC.Ice.Connection.Protocol">
            <summary>The protocol used by the connection.</summary>
        </member>
        <member name="M:ZeroC.Ice.Connection.AbortAsync(System.String)">
            <summary>Aborts the connection.</summary>
            <param name="message">A description of the connection abortion reason.</param>
        </member>
        <member name="M:ZeroC.Ice.Connection.CreateProxy``1(ZeroC.Ice.Identity,System.String,ZeroC.Ice.ProxyFactory{``0})">
            <summary>Creates a special "fixed" proxy that always uses this connection. This proxy can be used for
            callbacks from a server to a client if the server cannot directly establish a connection to the client,
            for example because of firewalls. In this case, the server would create a proxy using an already
            established connection from the client.</summary>
            <param name="identity">The identity for which a proxy is to be created.</param>
            <param name="facet">The facet.</param>
            <param name="factory">The proxy factory. Use INamePrx.Factory, where INamePrx is the desired proxy type.
            </param>
            <returns>A proxy that matches the given identity and facet, and uses this connection.</returns>
        </member>
        <member name="E:ZeroC.Ice.Connection.Closed">
            <summary>This event is raised when the connection is closed. If the subscriber needs more information about
            the closure, it can call Connection.ThrowException. The connection object is passed as the event sender
            argument.</summary>
        </member>
        <member name="M:ZeroC.Ice.Connection.GoAwayAsync(System.String,System.Threading.CancellationToken)">
            <summary>Gracefully closes the connection by sending a GoAway frame to the peer.</summary>
            <param name="message">The message transmitted to the peer with the GoAway frame.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="E:ZeroC.Ice.Connection.PingReceived">
            <summary>This event is raised when the connection receives a ping frame. The connection object is
            passed as the event sender argument.</summary>
        </member>
        <member name="P:ZeroC.Ice.Connection.IsActive">
            <summary>Returns <c>true</c> if the connection is active. Outgoing streams can be created and incoming
            streams accepted when the connection is active. The connection is no longer considered active as soon
            as <see cref="M:ZeroC.Ice.Connection.GoAwayAsync(System.String,System.Threading.CancellationToken)"/> is called to initiate a graceful connection
            closure.</summary>
            <return><c>true</c> if the connection is active, <c>false</c> if it's closing or closed.</return>
        </member>
        <member name="M:ZeroC.Ice.Connection.PingAsync(System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Sends an asynchronous ping frame.</summary>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Connection.ToString">
            <summary>Returns a description of the connection as human readable text, suitable for logging or error
            messages.</summary>
            <returns>The description of the connection as human readable text.</returns>
        </member>
        <member name="T:ZeroC.Ice.ColocatedConnection">
            <summary>Represents a connection to a colocated object adapter.</summary>
        </member>
        <member name="T:ZeroC.Ice.IPConnection">
            <summary>Represents a connection to an IP-endpoint.</summary>
        </member>
        <member name="P:ZeroC.Ice.IPConnection.LocalEndpoint">
            <summary>The socket local IP-endpoint or null if it is not available.</summary>
        </member>
        <member name="P:ZeroC.Ice.IPConnection.RemoteEndpoint">
            <summary>The socket remote IP-endpoint or null if it is not available.</summary>
        </member>
        <member name="T:ZeroC.Ice.TcpConnection">
            <summary>Represents a connection to a TCP-endpoint.</summary>
        </member>
        <member name="P:ZeroC.Ice.TcpConnection.CheckCertRevocationStatus">
            <summary>Gets a Boolean value that indicates whether the certificate revocation list is checked during the
            certificate validation process.</summary>
        </member>
        <member name="P:ZeroC.Ice.TcpConnection.IsEncrypted">
            <summary>Gets a Boolean value that indicates whether this SslStream uses data encryption.</summary>
        </member>
        <member name="P:ZeroC.Ice.TcpConnection.IsMutuallyAuthenticated">
            <summary>Gets a Boolean value that indicates whether both server and client have been authenticated.
            </summary>
        </member>
        <member name="P:ZeroC.Ice.TcpConnection.IsSecure">
            <inheritdoc/>
        </member>
        <member name="P:ZeroC.Ice.TcpConnection.IsSigned">
            <summary>Gets a Boolean value that indicates whether the data sent using this stream is signed.</summary>
        </member>
        <member name="P:ZeroC.Ice.TcpConnection.LocalCertificate">
            <summary>Gets the certificate used to authenticate the local endpoint or null if no certificate was
            supplied.</summary>
        </member>
        <member name="P:ZeroC.Ice.TcpConnection.NegotiatedApplicationProtocol">
            <summary>The negotiated application protocol in TLS handshake.</summary>
        </member>
        <member name="P:ZeroC.Ice.TcpConnection.NegotiatedCipherSuite">
            <summary>Gets the cipher suite which was negotiated for this connection.</summary>
        </member>
        <member name="P:ZeroC.Ice.TcpConnection.RemoteCertificate">
            <summary>Gets the certificate used to authenticate the remote endpoint or null if no certificate was
            supplied.</summary>
        </member>
        <member name="P:ZeroC.Ice.TcpConnection.SslProtocol">
            <summary>Gets a value that indicates the security protocol used to authenticate this connection or
            null if the connection is not secure.</summary>
        </member>
        <member name="T:ZeroC.Ice.UdpConnection">
            <summary>Represents a connection to a UDP-endpoint.</summary>
        </member>
        <member name="P:ZeroC.Ice.UdpConnection.MulticastEndpoint">
            <summary>The multicast IP-endpoint for a multicast connection otherwise null.</summary>
        </member>
        <member name="T:ZeroC.Ice.WSConnection">
            <summary>Represents a connection to a WS-endpoint.</summary>
        </member>
        <member name="P:ZeroC.Ice.WSConnection.Headers">
            <summary>The HTTP headers in the WebSocket upgrade request.</summary>
        </member>
        <member name="T:ZeroC.Ice.Current">
            <summary>Information about the current method dispatch for servers. Each method on the server has a
            Current as its final parameter.</summary>
        </member>
        <member name="P:ZeroC.Ice.Current.Adapter">
            <summary>The object adapter.</summary>
        </member>
        <member name="P:ZeroC.Ice.Current.Communicator">
            <summary>The communicator.</summary>
        </member>
        <member name="P:ZeroC.Ice.Current.Connection">
            <summary>The <see cref="P:ZeroC.Ice.Current.Connection"/> over which the request was dispatched.</summary>
        </member>
        <member name="P:ZeroC.Ice.Current.Context">
            <summary>The request context, as received from the client.</summary>
        </member>
        <member name="P:ZeroC.Ice.Current.Deadline">
            <summary>The deadline corresponds to the request's expiration time. Once the deadline is reached, the
            caller is no longer interested in the response and discards the request. The server-side runtime does not
            enforce this deadline - it's provided "for information" to the application. The Ice client runtime sets
            this deadline automatically using the proxy's invocation timeout and sends it with ice2 requests but not
            with ice1 requests. As a result, the deadline for an ice1 request is always <see cref="F:System.DateTime.MaxValue"/>
            on the server-side even though the invocation timeout is usually not infinite.</summary>
        </member>
        <member name="P:ZeroC.Ice.Current.Encoding">
            <summary>The encoding used by the request.</summary>
        </member>
        <member name="P:ZeroC.Ice.Current.Facet">
            <summary>The Ice object facet.</summary>
        </member>
        <member name="P:ZeroC.Ice.Current.Identity">
            <summary>The Ice object Identity.</summary>
        </member>
        <member name="P:ZeroC.Ice.Current.IsIdempotent">
            <summary><c>True</c> if the operation was marked as idempotent, <c>False</c> otherwise.</summary>
        </member>
        <member name="P:ZeroC.Ice.Current.IsOneway">
            <summary><c>True</c> for oneway requests, <c>False</c> otherwise.</summary>
        </member>
        <member name="P:ZeroC.Ice.Current.Location">
            <summary>The location of the target Ice object.</summary>
        </member>
        <member name="P:ZeroC.Ice.Current.Operation">
            <summary>The operation name.</summary>
        </member>
        <member name="P:ZeroC.Ice.Current.Protocol">
            <summary>The protocol used by the request.</summary>
        </member>
        <member name="P:ZeroC.Ice.Current.StreamId">
            <summary>The stream ID</summary>
        </member>
        <member name="M:ZeroC.Ice.DictionaryExtensions.DictionaryEqual``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>Compares two dictionaries for equality. <see
            cref="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/> provides the equivalent
            functionality for sequences.</summary>
            <typeparam name="TKey">The type of dictionary's key.</typeparam>
            <typeparam name="TValue">The type of dictionary's value.</typeparam>
            <param name="lhs">The first dictionary to compare.</param>
            <param name="rhs">The second dictionary to compare.</param>
            <returns>True if the two dictionaries have the exact same entries using the value's default equality
            comparison; otherwise, false.</returns>
        </member>
        <member name="M:ZeroC.Ice.DictionaryExtensions.DictionaryEqual``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>Compares two dictionaries for equality. <see
            cref="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/>
            provides the equivalent functionality for sequences.</summary>
            <typeparam name="TKey">The type of dictionary's key.</typeparam>
            <typeparam name="TValue">The type of dictionary's value.</typeparam>
            <param name="lhs">The first dictionary to compare.</param>
            <param name="rhs">The second dictionary to compare.</param>
            <param name="valueComparer">The comparer used to compare values for equality. When null, this method uses
            the default comparer.</param>
            <returns>True if the two dictionaries have the exact same entries; otherwise, false.</returns>
        </member>
        <member name="M:ZeroC.Ice.DictionaryExtensions.GetDictionaryHashCode``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>Computes the hash code for a dictionary using the dictionary value's default comparer.</summary>
            <typeparam name="TKey">The type of dictionary's key.</typeparam>
            <typeparam name="TValue">The type of dictionary's value.</typeparam>
            <param name="dict">The dictionary.</param>
            <returns>A hash code computed using the dictionary's entries.</returns>
        </member>
        <member name="M:ZeroC.Ice.DictionaryExtensions.GetDictionaryHashCode``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>Computes the hash code for a dictionary.</summary>
            <typeparam name="TKey">The type of dictionary's key.</typeparam>
            <typeparam name="TValue">The type of dictionary's value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="valueComparer">The comparer used to get the hash code of each value. When null, this method
            uses the default comparer.</param>
            <returns>A hash code computed using the dictionary's entries.</returns>
        </member>
        <member name="T:ZeroC.Ice.Discovery.Locator">
            <summary>Servant class that implements the Slice interface Ice::Locator.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.Locator.InvokeAsync``1(System.Func{ZeroC.Ice.Discovery.ILookupPrx,ZeroC.Ice.IObjectPrx,System.Threading.Tasks.Task},ZeroC.Ice.Discovery.ReplyServant{``0})">
            <summary>Invokes a find or resolve request on a Lookup object and processes the reply(ies).</summary>
            <param name="findAsync">A delegate that performs the remote call. Its parameters correspond to an entry in
            the _lookups dictionary.</param>
            <param name="replyServant">The reply servant.</param>
        </member>
        <member name="T:ZeroC.Ice.Discovery.ReplyServant`1">
            <summary>The base class of all Reply servant that helps collect / gather the reply(ies) to a lookup reques.
            </summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.FindAdapterByIdReply">
            <summary>Servant class that implements the Slice interface FindAdapterByIdReply.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.FindObjectByIdReply">
            <summary>Servant class that implements the Slice interface FindObjectByIdReply.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.ResolveAdapterIdReply">
            <summary>Servant class that implements the Slice interface ResolveAdapterIdReply.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.ResolveWellKnownProxyReply">
            <summary>Servant class that implements the Slice interface ResolveWellKnownProxyReply.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.LocatorRegistry">
            <summary>Servant class that implements the Slice interface Ice::LocatorRegistry.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.Lookup">
            <summary>Servant class that implements the Slice interface Ice::Discovery::Lookup using the local
            LocatorRegistry servant.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.ILookupPrx">
            <summary>Proxy interface used to call remote Ice objects that implement Slice interface Lookup.
            The Ice.Discovery.Multicast object adapter of a server application hosts a Lookup object that receives discovery
            requests from Discovery clients.
            <seealso cref="T:ZeroC.Ice.Discovery.ILookup"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.ILookupPrx.Request">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> factory method for each remote operation defined in <see cref="T:ZeroC.Ice.Discovery.ILookupPrx"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookupPrx.Request.FindAdapterById(ZeroC.Ice.IObjectPrx,System.ValueTuple{System.String,System.String,ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for FindAdapterById operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookupPrx.Request.FindObjectById(ZeroC.Ice.IObjectPrx,System.ValueTuple{System.String,ZeroC.Ice.Identity,System.String,ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for FindObjectById operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookupPrx.Request.ResolveAdapterId(ZeroC.Ice.IObjectPrx,System.ValueTuple{System.String,System.String,ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for ResolveAdapterId operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookupPrx.Request.ResolveWellKnownProxy(ZeroC.Ice.IObjectPrx,System.ValueTuple{System.String,ZeroC.Ice.Identity,System.String,ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for ResolveWellKnownProxy operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookupPrx.FindAdapterById(System.String,System.String,ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Finds an ice1 object adapter hosted by the target object's server.</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="id">The adapter ID.</param>
            <param name="reply">A proxy to a FindAdapterByIdReply object created by the caller. The server calls
            foundAdapterById on this object when it hosts an ice1 object adapter that has the requested adapter ID (or
            replica group ID).</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookupPrx.FindAdapterByIdAsync(System.String,System.String,ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Finds an ice1 object adapter hosted by the target object's server.</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="id">The adapter ID.</param>
            <param name="reply">A proxy to a FindAdapterByIdReply object created by the caller. The server calls
            foundAdapterById on this object when it hosts an ice1 object adapter that has the requested adapter ID (or
            replica group ID).</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookupPrx.FindObjectById(System.String,ZeroC.Ice.Identity,System.String,ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Finds an object hosted by an ice1 object adapter of the target object's server</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="id">The object identity.</param>
            <param name="facet">The facet of the object. Null is equivalent to the empty string.</param>
            <param name="reply">A proxy to a FindObjectByIdReply object created by the caller. The server calls foundObjectById
            on this object when it hosts an object with the requested identity and facet in an ice1 object adapter.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookupPrx.FindObjectByIdAsync(System.String,ZeroC.Ice.Identity,System.String,ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Finds an object hosted by an ice1 object adapter of the target object's server</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="id">The object identity.</param>
            <param name="facet">The facet of the object. Null is equivalent to the empty string.</param>
            <param name="reply">A proxy to a FindObjectByIdReply object created by the caller. The server calls foundObjectById
            on this object when it hosts an object with the requested identity and facet in an ice1 object adapter.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookupPrx.ResolveAdapterId(System.String,System.String,ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Finds an ice2 object adapter hosted by the target object's server.</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="adapterId">The adapter ID.</param>
            <param name="reply">A proxy to a ResolveAdapterIdReply object created by the caller. The server calls
            foundAdapterId on this object when it hosts an ice2 object adapter that has the requested adapter ID (or
            replica group ID).</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookupPrx.ResolveAdapterIdAsync(System.String,System.String,ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Finds an ice2 object adapter hosted by the target object's server.</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="adapterId">The adapter ID.</param>
            <param name="reply">A proxy to a ResolveAdapterIdReply object created by the caller. The server calls
            foundAdapterId on this object when it hosts an ice2 object adapter that has the requested adapter ID (or
            replica group ID).</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookupPrx.ResolveWellKnownProxy(System.String,ZeroC.Ice.Identity,System.String,ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Finds an object hosted by an ice2 object adapter of the target object's server.</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="identity">The identity of the object.</param>
            <param name="facet">The facet of the object.</param>
            <param name="reply">A proxy to a ResolvedWellKnownProxyReply object created by the caller. The server calls
            foundWellKnownProxy on this object when it has an ice2 object adapter that hosts an object with the given
            identity and facet.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookupPrx.ResolveWellKnownProxyAsync(System.String,ZeroC.Ice.Identity,System.String,ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Finds an object hosted by an ice2 object adapter of the target object's server.</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="identity">The identity of the object.</param>
            <param name="facet">The facet of the object.</param>
            <param name="reply">A proxy to a ResolvedWellKnownProxyReply object created by the caller. The server calls
            foundWellKnownProxy on this object when it has an ice2 object adapter that hosts an object with the given
            identity and facet.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="F:ZeroC.Ice.Discovery.ILookupPrx.Factory">
            <summary>Factory for <see cref="T:ZeroC.Ice.Discovery.ILookupPrx"/> proxies.</summary>
        </member>
        <member name="F:ZeroC.Ice.Discovery.ILookupPrx.IceReader">
            <summary>An <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Discovery.ILookupPrx"/> proxies.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookupPrx.Parse(System.String,ZeroC.Ice.Communicator)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.Discovery.ILookupPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <returns>The new proxy</returns>
            <exception cref="T:System.FormatException"><c>s</c> does not contain a valid string representation of a proxy.</exception>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookupPrx.TryParse(System.String,ZeroC.Ice.Communicator,ZeroC.Ice.Discovery.ILookupPrx@)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.Discovery.ILookupPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <param name="prx">When this method returns it contains the new proxy, if the conversion succeeded or null if the conversion failed.</param>
            <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx">
            <summary>Proxy interface used to call remote Ice objects that implement Slice interface FindAdapterByIdReply.
            Handles the reply or replies to findAdapterById calls on <see cref="T:ZeroC.Ice.Discovery.Lookup"/>.
            <seealso cref="T:ZeroC.Ice.Discovery.IFindAdapterByIdReply"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx.Request">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> factory method for each remote operation defined in <see cref="T:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx.Request.FoundAdapterById(ZeroC.Ice.IObjectPrx,System.ValueTuple{System.String,ZeroC.Ice.IObjectPrx,System.Boolean}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for FoundAdapterById operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx.FoundAdapterById(System.String,ZeroC.Ice.IObjectPrx,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Provides the endpoints for an object adapter in response to a findAdapterById call on a Lookup object.</summary>
            <param name="id">The adapter or replica group ID, as specified in the findAdapterById call.</param>
            <param name="proxy">A dummy proxy that carries the endpoints of the object adapter.</param>
            <param name="isReplicaGroup">True if `id` corresponds to a replica group ID and false otherwise.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx.FoundAdapterByIdAsync(System.String,ZeroC.Ice.IObjectPrx,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Provides the endpoints for an object adapter in response to a findAdapterById call on a Lookup object.</summary>
            <param name="id">The adapter or replica group ID, as specified in the findAdapterById call.</param>
            <param name="proxy">A dummy proxy that carries the endpoints of the object adapter.</param>
            <param name="isReplicaGroup">True if `id` corresponds to a replica group ID and false otherwise.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="F:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx.Factory">
            <summary>Factory for <see cref="T:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx"/> proxies.</summary>
        </member>
        <member name="F:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx.IceReader">
            <summary>An <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx"/> proxies.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx.Parse(System.String,ZeroC.Ice.Communicator)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <returns>The new proxy</returns>
            <exception cref="T:System.FormatException"><c>s</c> does not contain a valid string representation of a proxy.</exception>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx.TryParse(System.String,ZeroC.Ice.Communicator,ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx@)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <param name="prx">When this method returns it contains the new proxy, if the conversion succeeded or null if the conversion failed.</param>
            <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx">
            <summary>Proxy interface used to call remote Ice objects that implement Slice interface FindObjectByIdReply.
            Handles the reply or replies to findObjectById calls on <see cref="T:ZeroC.Ice.Discovery.Lookup"/>.
            <seealso cref="T:ZeroC.Ice.Discovery.IFindObjectByIdReply"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx.Request">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> factory method for each remote operation defined in <see cref="T:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx.Request.FoundObjectById(ZeroC.Ice.IObjectPrx,System.ValueTuple{ZeroC.Ice.Identity,ZeroC.Ice.IObjectPrx}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for FoundObjectById operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx.FoundObjectById(ZeroC.Ice.Identity,ZeroC.Ice.IObjectPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Provides the adapter ID or endpoints for an object in response to a findObjectById call on a Lookup object.</summary>
            <param name="id">The identity of the object, as specified in the findObjectById call.</param>
            <param name="proxy">A dummy proxy that carries the adapter ID or endpoints for the well-known object.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx.FoundObjectByIdAsync(ZeroC.Ice.Identity,ZeroC.Ice.IObjectPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Provides the adapter ID or endpoints for an object in response to a findObjectById call on a Lookup object.</summary>
            <param name="id">The identity of the object, as specified in the findObjectById call.</param>
            <param name="proxy">A dummy proxy that carries the adapter ID or endpoints for the well-known object.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="F:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx.Factory">
            <summary>Factory for <see cref="T:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx"/> proxies.</summary>
        </member>
        <member name="F:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx.IceReader">
            <summary>An <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx"/> proxies.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx.Parse(System.String,ZeroC.Ice.Communicator)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <returns>The new proxy</returns>
            <exception cref="T:System.FormatException"><c>s</c> does not contain a valid string representation of a proxy.</exception>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx.TryParse(System.String,ZeroC.Ice.Communicator,ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx@)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <param name="prx">When this method returns it contains the new proxy, if the conversion succeeded or null if the conversion failed.</param>
            <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx">
            <summary>Proxy interface used to call remote Ice objects that implement Slice interface ResolveAdapterIdReply.
            Handles the reply or replies to resolveAdapterId calls on <see cref="T:ZeroC.Ice.Discovery.Lookup"/>.
            <seealso cref="T:ZeroC.Ice.Discovery.IResolveAdapterIdReply"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx.Request">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> factory method for each remote operation defined in <see cref="T:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx.Request.FoundAdapterId(ZeroC.Ice.IObjectPrx,System.ValueTuple{System.Collections.Generic.IEnumerable{ZeroC.Ice.EndpointData},System.Boolean}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for FoundAdapterId operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx.FoundAdapterId(System.Collections.Generic.IEnumerable{ZeroC.Ice.EndpointData},System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Provides the endpoints for an object adapter in response to a resolveAdapterId call on a Lookup object.</summary>
            <param name="endpoints">A sequence of endpoints. Cannot be empty.</param>
            <param name="isReplicaGroup">True if the adapter ID provided to the resolveAdapterId call corresponds to a replica
            group ID and false otherwise.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx.FoundAdapterIdAsync(System.Collections.Generic.IEnumerable{ZeroC.Ice.EndpointData},System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Provides the endpoints for an object adapter in response to a resolveAdapterId call on a Lookup object.</summary>
            <param name="endpoints">A sequence of endpoints. Cannot be empty.</param>
            <param name="isReplicaGroup">True if the adapter ID provided to the resolveAdapterId call corresponds to a replica
            group ID and false otherwise.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="F:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx.Factory">
            <summary>Factory for <see cref="T:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx"/> proxies.</summary>
        </member>
        <member name="F:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx.IceReader">
            <summary>An <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx"/> proxies.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx.Parse(System.String,ZeroC.Ice.Communicator)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <returns>The new proxy</returns>
            <exception cref="T:System.FormatException"><c>s</c> does not contain a valid string representation of a proxy.</exception>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx.TryParse(System.String,ZeroC.Ice.Communicator,ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx@)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <param name="prx">When this method returns it contains the new proxy, if the conversion succeeded or null if the conversion failed.</param>
            <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx">
            <summary>Proxy interface used to call remote Ice objects that implement Slice interface ResolveWellKnownProxyReply.
            Handles the reply or replies to resolveWellKnownProxy calls on <see cref="T:ZeroC.Ice.Discovery.Lookup"/>.
            <seealso cref="T:ZeroC.Ice.Discovery.IResolveWellKnownProxyReply"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx.Request">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> factory method for each remote operation defined in <see cref="T:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx.Request.FoundWellKnownProxy(ZeroC.Ice.IObjectPrx,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for FoundWellKnownProxy operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx.FoundWellKnownProxy(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Provides the adapter ID or replica group ID for an object adapter that hosts the desired well-known object,
            in response to a resolveWellKnownProxy call on a Lookup object.</summary>
            <param name="adapterId">The adapter ID or replica group ID of the object adapter that hosts the object.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx.FoundWellKnownProxyAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Provides the adapter ID or replica group ID for an object adapter that hosts the desired well-known object,
            in response to a resolveWellKnownProxy call on a Lookup object.</summary>
            <param name="adapterId">The adapter ID or replica group ID of the object adapter that hosts the object.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="F:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx.Factory">
            <summary>Factory for <see cref="T:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx"/> proxies.</summary>
        </member>
        <member name="F:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx.IceReader">
            <summary>An <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx"/> proxies.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx.Parse(System.String,ZeroC.Ice.Communicator)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <returns>The new proxy</returns>
            <exception cref="T:System.FormatException"><c>s</c> does not contain a valid string representation of a proxy.</exception>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx.TryParse(System.String,ZeroC.Ice.Communicator,ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx@)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <param name="prx">When this method returns it contains the new proxy, if the conversion succeeded or null if the conversion failed.</param>
            <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ZeroC.Ice.Discovery.ILookup">
            <summary>Interface used to implement servants for Slice interface Lookup.
            The Ice.Discovery.Multicast object adapter of a server application hosts a Lookup object that receives discovery
            requests from Discovery clients.
            <seealso cref="T:ZeroC.Ice.Discovery.ILookupPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.ILookup.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.Discovery.ILookup"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookup.Request.FindAdapterById(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation FindAdapterById.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookup.Request.FindObjectById(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation FindObjectById.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookup.Request.ResolveAdapterId(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation ResolveAdapterId.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookup.Request.ResolveWellKnownProxy(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation ResolveWellKnownProxy.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookup.FindAdapterById(System.String,System.String,ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Finds an ice1 object adapter hosted by the target object's server.</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="id">The adapter ID.</param>
            <param name="reply">A proxy to a FindAdapterByIdReply object created by the caller. The server calls
            foundAdapterById on this object when it hosts an ice1 object adapter that has the requested adapter ID (or
            replica group ID).</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookup.FindObjectById(System.String,ZeroC.Ice.Identity,System.String,ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Finds an object hosted by an ice1 object adapter of the target object's server</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="id">The object identity.</param>
            <param name="facet">The facet of the object. Null is equivalent to the empty string.</param>
            <param name="reply">A proxy to a FindObjectByIdReply object created by the caller. The server calls foundObjectById
            on this object when it hosts an object with the requested identity and facet in an ice1 object adapter.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookup.ResolveAdapterId(System.String,System.String,ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Finds an ice2 object adapter hosted by the target object's server.</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="adapterId">The adapter ID.</param>
            <param name="reply">A proxy to a ResolveAdapterIdReply object created by the caller. The server calls
            foundAdapterId on this object when it hosts an ice2 object adapter that has the requested adapter ID (or
            replica group ID).</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.Discovery.ILookup.ResolveWellKnownProxy(System.String,ZeroC.Ice.Identity,System.String,ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Finds an object hosted by an ice2 object adapter of the target object's server.</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="identity">The identity of the object.</param>
            <param name="facet">The facet of the object.</param>
            <param name="reply">A proxy to a ResolvedWellKnownProxyReply object created by the caller. The server calls
            foundWellKnownProxy on this object when it has an ice2 object adapter that hosts an object with the given
            identity and facet.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IFindAdapterByIdReply">
            <summary>Interface used to implement servants for Slice interface FindAdapterByIdReply.
            Handles the reply or replies to findAdapterById calls on <see cref="T:ZeroC.Ice.Discovery.Lookup"/>.
            <seealso cref="T:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IFindAdapterByIdReply.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.Discovery.IFindAdapterByIdReply"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IFindAdapterByIdReply.Request.FoundAdapterById(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation FoundAdapterById.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IFindAdapterByIdReply.FoundAdapterById(System.String,ZeroC.Ice.IObjectPrx,System.Boolean,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Provides the endpoints for an object adapter in response to a findAdapterById call on a Lookup object.</summary>
            <param name="id">The adapter or replica group ID, as specified in the findAdapterById call.</param>
            <param name="proxy">A dummy proxy that carries the endpoints of the object adapter.</param>
            <param name="isReplicaGroup">True if `id` corresponds to a replica group ID and false otherwise.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IFindObjectByIdReply">
            <summary>Interface used to implement servants for Slice interface FindObjectByIdReply.
            Handles the reply or replies to findObjectById calls on <see cref="T:ZeroC.Ice.Discovery.Lookup"/>.
            <seealso cref="T:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IFindObjectByIdReply.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.Discovery.IFindObjectByIdReply"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IFindObjectByIdReply.Request.FoundObjectById(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation FoundObjectById.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IFindObjectByIdReply.FoundObjectById(ZeroC.Ice.Identity,ZeroC.Ice.IObjectPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Provides the adapter ID or endpoints for an object in response to a findObjectById call on a Lookup object.</summary>
            <param name="id">The identity of the object, as specified in the findObjectById call.</param>
            <param name="proxy">A dummy proxy that carries the adapter ID or endpoints for the well-known object.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IResolveAdapterIdReply">
            <summary>Interface used to implement servants for Slice interface ResolveAdapterIdReply.
            Handles the reply or replies to resolveAdapterId calls on <see cref="T:ZeroC.Ice.Discovery.Lookup"/>.
            <seealso cref="T:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IResolveAdapterIdReply.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.Discovery.IResolveAdapterIdReply"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IResolveAdapterIdReply.Request.FoundAdapterId(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation FoundAdapterId.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IResolveAdapterIdReply.FoundAdapterId(ZeroC.Ice.EndpointData[],System.Boolean,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Provides the endpoints for an object adapter in response to a resolveAdapterId call on a Lookup object.</summary>
            <param name="endpoints">A sequence of endpoints. Cannot be empty.</param>
            <param name="isReplicaGroup">True if the adapter ID provided to the resolveAdapterId call corresponds to a replica
            group ID and false otherwise.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IResolveWellKnownProxyReply">
            <summary>Interface used to implement servants for Slice interface ResolveWellKnownProxyReply.
            Handles the reply or replies to resolveWellKnownProxy calls on <see cref="T:ZeroC.Ice.Discovery.Lookup"/>.
            <seealso cref="T:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IResolveWellKnownProxyReply.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.Discovery.IResolveWellKnownProxyReply"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IResolveWellKnownProxyReply.Request.FoundWellKnownProxy(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameter of operation FoundWellKnownProxy.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IResolveWellKnownProxyReply.FoundWellKnownProxy(System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Provides the adapter ID or replica group ID for an object adapter that hosts the desired well-known object,
            in response to a resolveWellKnownProxy call on a Lookup object.</summary>
            <param name="adapterId">The adapter ID or replica group ID of the object adapter that hosts the object.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IAsyncLookup">
            <summary>Interface used to implement servants for Slice interface Lookup.
            The Ice.Discovery.Multicast object adapter of a server application hosts a Lookup object that receives discovery
            requests from Discovery clients.
            <seealso cref="T:ZeroC.Ice.Discovery.ILookupPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IAsyncLookup.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.Discovery.IAsyncLookup"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncLookup.Request.FindAdapterById(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation FindAdapterById.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncLookup.Request.FindObjectById(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation FindObjectById.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncLookup.Request.ResolveAdapterId(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation ResolveAdapterId.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncLookup.Request.ResolveWellKnownProxy(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation ResolveWellKnownProxy.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncLookup.FindAdapterByIdAsync(System.String,System.String,ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Finds an ice1 object adapter hosted by the target object's server.</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="id">The adapter ID.</param>
            <param name="reply">A proxy to a FindAdapterByIdReply object created by the caller. The server calls
            foundAdapterById on this object when it hosts an ice1 object adapter that has the requested adapter ID (or
            replica group ID).</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncLookup.FindObjectByIdAsync(System.String,ZeroC.Ice.Identity,System.String,ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Finds an object hosted by an ice1 object adapter of the target object's server</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="id">The object identity.</param>
            <param name="facet">The facet of the object. Null is equivalent to the empty string.</param>
            <param name="reply">A proxy to a FindObjectByIdReply object created by the caller. The server calls foundObjectById
            on this object when it hosts an object with the requested identity and facet in an ice1 object adapter.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncLookup.ResolveAdapterIdAsync(System.String,System.String,ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Finds an ice2 object adapter hosted by the target object's server.</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="adapterId">The adapter ID.</param>
            <param name="reply">A proxy to a ResolveAdapterIdReply object created by the caller. The server calls
            foundAdapterId on this object when it hosts an ice2 object adapter that has the requested adapter ID (or
            replica group ID).</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncLookup.ResolveWellKnownProxyAsync(System.String,ZeroC.Ice.Identity,System.String,ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Finds an object hosted by an ice2 object adapter of the target object's server.</summary>
            <param name="domainId">The Discovery domain ID. An Discovery server only replies to requests that include a domain
            ID that matches the server's configured domain ID.</param>
            <param name="identity">The identity of the object.</param>
            <param name="facet">The facet of the object.</param>
            <param name="reply">A proxy to a ResolvedWellKnownProxyReply object created by the caller. The server calls
            foundWellKnownProxy on this object when it has an ice2 object adapter that hosts an object with the given
            identity and facet.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IAsyncFindAdapterByIdReply">
            <summary>Interface used to implement servants for Slice interface FindAdapterByIdReply.
            Handles the reply or replies to findAdapterById calls on <see cref="T:ZeroC.Ice.Discovery.Lookup"/>.
            <seealso cref="T:ZeroC.Ice.Discovery.IFindAdapterByIdReplyPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IAsyncFindAdapterByIdReply.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.Discovery.IAsyncFindAdapterByIdReply"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncFindAdapterByIdReply.Request.FoundAdapterById(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation FoundAdapterById.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncFindAdapterByIdReply.FoundAdapterByIdAsync(System.String,ZeroC.Ice.IObjectPrx,System.Boolean,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Provides the endpoints for an object adapter in response to a findAdapterById call on a Lookup object.</summary>
            <param name="id">The adapter or replica group ID, as specified in the findAdapterById call.</param>
            <param name="proxy">A dummy proxy that carries the endpoints of the object adapter.</param>
            <param name="isReplicaGroup">True if `id` corresponds to a replica group ID and false otherwise.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IAsyncFindObjectByIdReply">
            <summary>Interface used to implement servants for Slice interface FindObjectByIdReply.
            Handles the reply or replies to findObjectById calls on <see cref="T:ZeroC.Ice.Discovery.Lookup"/>.
            <seealso cref="T:ZeroC.Ice.Discovery.IFindObjectByIdReplyPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IAsyncFindObjectByIdReply.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.Discovery.IAsyncFindObjectByIdReply"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncFindObjectByIdReply.Request.FoundObjectById(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation FoundObjectById.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncFindObjectByIdReply.FoundObjectByIdAsync(ZeroC.Ice.Identity,ZeroC.Ice.IObjectPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Provides the adapter ID or endpoints for an object in response to a findObjectById call on a Lookup object.</summary>
            <param name="id">The identity of the object, as specified in the findObjectById call.</param>
            <param name="proxy">A dummy proxy that carries the adapter ID or endpoints for the well-known object.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IAsyncResolveAdapterIdReply">
            <summary>Interface used to implement servants for Slice interface ResolveAdapterIdReply.
            Handles the reply or replies to resolveAdapterId calls on <see cref="T:ZeroC.Ice.Discovery.Lookup"/>.
            <seealso cref="T:ZeroC.Ice.Discovery.IResolveAdapterIdReplyPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IAsyncResolveAdapterIdReply.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.Discovery.IAsyncResolveAdapterIdReply"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncResolveAdapterIdReply.Request.FoundAdapterId(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation FoundAdapterId.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncResolveAdapterIdReply.FoundAdapterIdAsync(ZeroC.Ice.EndpointData[],System.Boolean,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Provides the endpoints for an object adapter in response to a resolveAdapterId call on a Lookup object.</summary>
            <param name="endpoints">A sequence of endpoints. Cannot be empty.</param>
            <param name="isReplicaGroup">True if the adapter ID provided to the resolveAdapterId call corresponds to a replica
            group ID and false otherwise.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IAsyncResolveWellKnownProxyReply">
            <summary>Interface used to implement servants for Slice interface ResolveWellKnownProxyReply.
            Handles the reply or replies to resolveWellKnownProxy calls on <see cref="T:ZeroC.Ice.Discovery.Lookup"/>.
            <seealso cref="T:ZeroC.Ice.Discovery.IResolveWellKnownProxyReplyPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Discovery.IAsyncResolveWellKnownProxyReply.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.Discovery.IAsyncResolveWellKnownProxyReply"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncResolveWellKnownProxyReply.Request.FoundWellKnownProxy(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameter of operation FoundWellKnownProxy.</summary>
        </member>
        <member name="M:ZeroC.Ice.Discovery.IAsyncResolveWellKnownProxyReply.FoundWellKnownProxyAsync(System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Provides the adapter ID or replica group ID for an object adapter that hosts the desired well-known object,
            in response to a resolveWellKnownProxy call on a Lookup object.</summary>
            <param name="adapterId">The adapter ID or replica group ID of the object adapter that hosts the object.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:ZeroC.Ice.Dispatcher">
            <summary>A dispatcher is a delegate that dispatches an incoming request to a dispatch interceptor or to a
            servant.</summary>
            <param name="request">The incoming request being dispatched.</param>
            <param name="current">The current object for the dispatch.</param>
            <param name="cancel">A cancellation token that is notified of cancellation when the dispatch is cancelled.
            </param>
            <returns>The outgoing response frame.</returns>
        </member>
        <member name="T:ZeroC.Ice.DispatchInterceptor">
            <summary>A dispatch interceptor can be registered with the Communicator or with an ObjectAdapter to intercept
            operation dispatches.</summary>
            <param name="request">The incoming request being dispatched.</param>
            <param name="current">The current object for the dispatch.</param>
            <param name="next">The next dispatcher in the dispatch chain.</param>
            <param name="cancel">A cancellation token that is notified of cancellation when the dispatch is cancelled.
            </param>
            <returns>The outgoing response frame.</returns>
        </member>
        <member name="T:ZeroC.Ice.Encoding">
            <summary>The Ice encoding defines how Slice constructs are marshaled to and later unmarshaled from sequences of bytes.
            An Encoding struct holds a version of the Ice encoding.</summary>
        </member>
        <member name="F:ZeroC.Ice.Encoding.V10">
            <summary>Version 1.0 of the Ice encoding, supported by Ice 1.0 to Ice 3.7.</summary>
        </member>
        <member name="F:ZeroC.Ice.Encoding.V11">
            <summary>Version 1.1 of the Ice encoding, supported since Ice 3.5.</summary>
        </member>
        <member name="F:ZeroC.Ice.Encoding.V20">
            <summary>Version 2.0 of the Ice encoding, supported since Ice 4.0.</summary>
        </member>
        <member name="M:ZeroC.Ice.Encoding.Parse(System.String)">
            <summary>Parses a string into an Encoding.</summary>
            <param name="str">The string to parse.</param>
            <returns>A new encoding.</returns>
        </member>
        <member name="M:ZeroC.Ice.Encoding.TryParse(System.String,ZeroC.Ice.Encoding@)">
            <summary>Attempts to parse a string into an Encoding.</summary>
            <param name="str">The string to parse.</param>
            <param name="encoding">The resulting encoding.</param>
            <returns>True if the parsing succeeded and encoding contains the result; otherwise, false.</returns>
        </member>
        <member name="M:ZeroC.Ice.Encoding.ToString">
            <inheritdoc/>
        </member>
        <member name="F:ZeroC.Ice.Encoding.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Encoding"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Encoding.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.Ice.Encoding"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Encoding.Major">
            <summary>The major version number of this version of the Ice encoding.</summary>
        </member>
        <member name="F:ZeroC.Ice.Encoding.Minor">
            <summary>The minor version number of this version of the Ice encoding.</summary>
        </member>
        <member name="M:ZeroC.Ice.Encoding.op_Equality(ZeroC.Ice.Encoding,ZeroC.Ice.Encoding)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Encoding.op_Inequality(ZeroC.Ice.Encoding,ZeroC.Ice.Encoding)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Encoding.#ctor(System.Byte,System.Byte)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Encoding"/>.</summary>
            <param name="major">The major version number of this version of the Ice encoding.</param>
            <param name="minor">The minor version number of this version of the Ice encoding.</param>
        </member>
        <member name="M:ZeroC.Ice.Encoding.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Encoding"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.Ice.Encoding.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Encoding.Equals(ZeroC.Ice.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Encoding.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Encoding.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.EncodingDefinitions.SliceFlags">
            <summary>The first byte of each encoded class or exception slice.</summary>
        </member>
        <member name="F:ZeroC.Ice.EncodingDefinitions.SliceFlags.TypeIdMask">
            <summary>The first 2 bits of SliceFlags represent the TypeIdKind, which can be extracted using
            GetTypeIdKind.</summary>
        </member>
        <member name="T:ZeroC.Ice.EncodingDefinitions.TypeIdKind">
            <summary>The first 2 bits of the SliceFlags.</summary>
        </member>
        <member name="T:ZeroC.Ice.EncodingDefinitions.TagFormat">
            <summary>Each tagged parameter has a specific tag format. This tag format describes how the data is encoded
            and how it can be skipped by the unmarshaling code if the tagged parameter is present in the input stream
            but is not known to the receiver.</summary>
        </member>
        <member name="F:ZeroC.Ice.EncodingDefinitions.TagFormat.VInt">
            <summary>VInt is a special value that is never marshaled and that means "one of F1, F2, F4 or F8".
            </summary>
        </member>
        <member name="M:ZeroC.Ice.SliceFlagsExtensions.GetTypeIdKind(ZeroC.Ice.EncodingDefinitions.SliceFlags)">
            <summary>Extracts the TypeIdKind of a SliceFlags value.</summary>
            <param name="sliceFlags">The SliceFlags value.</param>
            <returns>The TypeIdKind encoded in sliceFlags.</returns>
        </member>
        <member name="T:ZeroC.Ice.Endpoint">
            <summary>An endpoint describes a server-side network sink for Ice requests: an object adapter listens on one or
            more endpoints and a client establishes a connection to a given object adapter endpoint. Its properties are
            a network transport protocol such as TCP or Bluetooth RFCOMM, a host or address, a port number, and
            transport-specific options.</summary>
        </member>
        <member name="P:ZeroC.Ice.Endpoint.Communicator">
            <summary>Gets the communicator that created this endpoint.</summary>
        </member>
        <member name="P:ZeroC.Ice.Endpoint.Data">
            <summary>Gets the external "over the wire" representation of this endpoint. With ice2 (and up) this is the
            actual data structure sent and received over the wire for this endpoint. With ice1, it is a subset of this
            external representation.</summary>
            <remarks>The Options field of EndpointData is a writable array but should be treated as if it was read-only.
            Do not update the contents of this array.</remarks>
        </member>
        <member name="P:ZeroC.Ice.Endpoint.Host">
            <summary>The host name or address.</summary>
        </member>
        <member name="P:ZeroC.Ice.Endpoint.IsAlwaysSecure">
            <summary>Indicates whether or not this endpoint's transport is always secure. Only applies to ice1.</summary>
            <value>True when this endpoint's transport is secure; otherwise, false.</value>
        </member>
        <member name="P:ZeroC.Ice.Endpoint.IsDatagram">
            <summary>Indicates whether or not this endpoint's transport uses datagrams with no ordering or delivery
            guarantees.</summary>
            <value>True when this endpoint's transport is datagram-based; otherwise, false. There is currently a
            single datagram-based transport: UDP.</value>
        </member>
        <member name="P:ZeroC.Ice.Endpoint.Item(System.String)">
            <summary>Gets an option of the endpoint.</summary>
            <param name="option">The name of the option to retrieve.</param>
            <value>The value of this option, or null if this option is unknown, not set or set to its default value.
            </value>
        </member>
        <member name="P:ZeroC.Ice.Endpoint.Port">
            <summary>The port number.</summary>
        </member>
        <member name="P:ZeroC.Ice.Endpoint.Protocol">
            <summary>The Ice protocol of this endpoint.</summary>
        </member>
        <member name="P:ZeroC.Ice.Endpoint.Scheme">
            <summary>The scheme for this endpoint. With ice1, it's the transport name (tcp, ssl etc.) or opaque. With
            ice2, it's ice+transport (ice+tcp, ice+quic etc.) or ice+universal.</summary>
        </member>
        <member name="P:ZeroC.Ice.Endpoint.Transport">
            <summary>The <see cref="T:ZeroC.Ice.Transport"></see> of this endpoint.</summary>
        </member>
        <member name="P:ZeroC.Ice.Endpoint.TransportName">
            <summary>The name of the endpoint's transport in lowercase.</summary>
        </member>
        <member name="P:ZeroC.Ice.Endpoint.DefaultPort">
            <summary>Gets the default port of this endpoint.</summary>
        </member>
        <member name="P:ZeroC.Ice.Endpoint.HasDnsHost">
            <summary>Returns true when Host is a DNS name that needs to be resolved; otherwise, returns false.
            When a derived implementation returns true, it must override <see cref="M:ZeroC.Ice.Endpoint.ExpandHostAsync(System.Threading.CancellationToken)"/>.</summary>
        </member>
        <member name="P:ZeroC.Ice.Endpoint.HasOptions">
            <summary>Indicates whether or not this endpoint has options with non default values that ToString would
            print. Always true for ice1 endpoints.</summary>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.ConnectAsync(ZeroC.Ice.NonSecure,System.Object,System.Threading.CancellationToken)">
            <summary>Creates a connection to this endpoint.</summary>
            <param name="preferNonSecure">Indicates under what conditions establishing a non-secure connection should
            be preferred.</param>
            <param name="label">The corresponding Connection property <see cref="P:ZeroC.Ice.Connection.Label"/> can be non-null
            only for outgoing connections.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The new established connection.</returns>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.op_Equality(ZeroC.Ice.Endpoint,ZeroC.Ice.Endpoint)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.op_Inequality(ZeroC.Ice.Endpoint,ZeroC.Ice.Endpoint)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.Equals(ZeroC.Ice.Endpoint)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.ToString">
            <summary>Converts the endpoint into a string. The format of this string depends on the protocol: either
            ice1 format (for ice1) or URI format (for ice2 and up).</summary>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.IsLocal(ZeroC.Ice.Endpoint)">
            <summary>Checks whether this endpoint and the given endpoint point to the same local peer. This is used for
            the colocation optimization check to figure out whether or not a proxy endpoint points to a local adapter.
            </summary>
            <param name="endpoint">The other endpoint.</param>
            <returns><c>True</c> if the other endpoint point to the same local peer, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.AppendOptions(System.Text.StringBuilder,System.Char)">
            <summary>Appends the options of this endpoint with non default values to the string builder.</summary>
            <param name="sb">The string builder.</param>
            <param name="optionSeparator">The character used to separate two options. This separator is not used for
            ice1 endpoints.</param>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.GetEquivalentHashCode">
            <summary>Provides the same hash code for two equivalent endpoints. See <see cref="M:ZeroC.Ice.Endpoint.IsEquivalent(ZeroC.Ice.Endpoint)"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.IsEquivalent(ZeroC.Ice.Endpoint)">
            <summary>Two endpoints are considered equivalent if they are equal or their differences should not trigger
            the establishment of separate connections to those endpoints. For example, two tcp endpoints that are
            identical except for their ice1 HashCompressedFlag property are equivalent but are not equal.</summary>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.WriteOptions(ZeroC.Ice.OutputStream)">
            <summary>Writes the options of this endpoint to the output stream. ice1-only.</summary>
            <param name="ostr">The output stream.</param>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.Acceptor(ZeroC.Ice.ObjectAdapter)">
            <summary>Returns an acceptor for this endpoint. An acceptor listens for connection establishment requests
            from clients and creates a new connection for each client. This is typically used to implement a
            stream-based transport. Datagram transports don't implement this method but instead implement the
            <see cref="M:ZeroC.Ice.Endpoint.CreateDatagramServerConnection(ZeroC.Ice.ObjectAdapter)"/> method.</summary>
            <param name="adapter">The object adapter associated to the acceptor.</param>
            <returns>An acceptor for this endpoint.</returns>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.CreateDatagramServerConnection(ZeroC.Ice.ObjectAdapter)">
            <summary>Creates a datagram server side connection for this endpoint to receive datagrams from clients.
            Unlike stream-based transports, datagram endpoints don't support an acceptor responsible for accepting new
            connections but implement this method to provide a connection responsible for receiving datagrams from
            clients.</summary>
            <returns>The datagram server side connection.</returns>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.ExpandHostAsync(System.Threading.CancellationToken)">
            <summary>Expands endpoint into separate endpoints for each IP address returned by the DNS resolver.
            Precondition: <see cref="P:ZeroC.Ice.Endpoint.HasDnsHost"/> is true.</summary>
            <returns>A value task holding the expanded endpoints.</returns>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.GetPublishedEndpoint(System.String)">
            <summary>Returns the published endpoint for this object adapter endpoint.</summary>
            <param name="serverName">The server name, to be used as the host of the published endpoint when the
            endpoint's type supports DNS resolution of its hosts. Otherwise, <c>serverName</c> is not used.</param>
            <returns>The published endpoint.</returns>
        </member>
        <member name="M:ZeroC.Ice.Endpoint.#ctor(ZeroC.Ice.EndpointData,ZeroC.Ice.Communicator,ZeroC.Ice.Protocol)">
            <summary>Constructs a new endpoint</summary>
            <param name="data">The <see cref="T:ZeroC.Ice.EndpointData"/> struct.</param>
            <param name="communicator">The endpoint's communicator.</param>
            <param name="protocol">The endpoint's protocol.</param>
        </member>
        <member name="M:ZeroC.Ice.EndpointExtensions.ToEndpoint(ZeroC.Ice.EndpointData,ZeroC.Ice.Communicator,ZeroC.Ice.Protocol)">
            <summary>Creates an endpoint from an <see cref="T:ZeroC.Ice.EndpointData"/> struct.</summary>
            <param name="data">The endpoint's data.</param>
            <param name="communicator">The communicator.</param>
            <param name="protocol">The endpoint's protocol. Must be ice2 or greater.</param>
            <returns>A new endpoint.</returns>
        </member>
        <member name="M:ZeroC.Ice.EndpointExtensions.ToEndpointDataList(System.Collections.Generic.IEnumerable{ZeroC.Ice.Endpoint})">
            <summary>Creates an endpoint data list from a sequence of endpoints.</summary>
            <param name="endpoints">The sequence of endpoints.</param>
            <returns>A new list of endpoint data.</returns>
        </member>
        <member name="M:ZeroC.Ice.EndpointExtensions.ToEndpointList(System.Collections.Generic.IEnumerable{ZeroC.Ice.EndpointData},ZeroC.Ice.Communicator,ZeroC.Ice.Protocol)">
            <summary>Creates an endpoint list from a sequence of <see cref="T:ZeroC.Ice.EndpointData"/> structs.</summary>
            <param name="dataSequence">The sequence of endpoint data.</param>
            <param name="communicator">The communicator.</param>
            <param name="protocol">The endpoint's protocol. Must be ice2 or greater.</param>
            <returns>A new list of endpoints.</returns>
        </member>
        <member name="M:ZeroC.Ice.EndpointExtensions.AppendEndpoint(System.Text.StringBuilder,ZeroC.Ice.Endpoint,System.String,System.Boolean,System.Char)">
            <summary>Appends the endpoint and all its options (if any) to this string builder, when using the URI
            format.</summary>
            <param name="sb">The string builder.</param>
            <param name="endpoint">The endpoint to append.</param>
            <param name="path">The path of the endpoint URI. Use this parameter to start building a proxy URI.</param>
            <param name="includeScheme">When true, first appends the endpoint's scheme followed by ://.</param>
            <param name="optionSeparator">The character that separates options in the query component of the URI.
            </param>
            <returns>The string builder parameter.</returns>
        </member>
        <member name="T:ZeroC.Ice.Ice1EndpointFactory">
            <summary>Creates an ice1 endpoint from an <see cref="T:ZeroC.Ice.InputStream"/> stream.</summary>
            <param name="transport">The transport of the endpoint previously read from the stream.</param>
            <param name="istr">The stream to read from.</param>
            <returns>A new endpoint for the ice1 protocol.</returns>
        </member>
        <member name="T:ZeroC.Ice.Ice1EndpointParser">
            <summary>Creates an ice1 endpoint from a parsed ice1 endpoint string.</summary>
            <param name="transport">The transport of the new endpoint.</param>
            <param name="options">The options of the new endpoint. This delegate removes any option it understands from this
            dictionary.</param>
            <param name="communicator">The communicator.</param>
            <param name="oaEndpoint">When true, the new endpoint corresponds to an object adapter's endpoint configuration;
            when false, endpointString represents a proxy endpoint.</param>
            <param name="endpointString">The original endpoint string, for error messages and tracing.</param>
            <returns>A new endpoint for the ice1 protocol.</returns>
        </member>
        <member name="T:ZeroC.Ice.Ice2EndpointFactory">
            <summary>Creates an ice2 endpoint from an <see cref="T:ZeroC.Ice.EndpointData"/> struct.</summary>
            <param name="data">The endpoint's data.</param>
            <param name="communicator">The communicator.</param>
            <returns>A new endpoint for the ice2 protocol.</returns>
        </member>
        <member name="T:ZeroC.Ice.Ice2EndpointParser">
            <summary>Creates an ice2 endpoint from a parsed URI.</summary>
            <param name="transport">The transport of the new endpoint.</param>
            <param name="host">The host name or IP address.</param>
            <param name="port">The port number.</param>
            <param name="options">The options of the new endpoint. This delegate removes any option it understands from this
            dictionary.</param>
            <param name="communicator">The communicator.</param>
            <param name="oaEndpoint">When true, the new endpoint corresponds to an object adapter's endpoint configuration;
            when false, represents a proxy endpoint.</param>
            <returns>A new endpoint for the ice2 protocol.</returns>
        </member>
        <member name="M:ZeroC.Ice.EnumerableExtensions.GetSequenceHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Computes the hash code for a sequence, using each element's default comparer.</summary>
            <param name="sequence">The sequence.</param>
            <typeparam name="T">The type of sequence's element.</typeparam>
            <returns>A hash code computed using the sequence's elements.</returns>
        </member>
        <member name="M:ZeroC.Ice.EnumerableExtensions.GetSequenceHashCode``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Computes the hash code for a sequence.</summary>
            <typeparam name="T">The type of sequence's element.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="comparer">The comparer used to get each element's hash code. When null, this method uses the
            default comparer.</param>
            <returns>A hash code computed using the sequence's elements.</returns>
        </member>
        <member name="M:ZeroC.Ice.ExceptionExtensions.IsConnectionLost(System.Exception)">
            <summary>This method tries to distinguish connection loss error conditions from other error conditions.
            It's a bit tedious since it's difficult to have an exhaustive list of errors that match this condition.
            An alternative would be to change the transports to always throw ConnectionLostException on failure to
            receive or send data.</summary>
        </member>
        <member name="M:ZeroC.Ice.ExceptionUtil.Throw(System.Exception)">
            <summary>Rethrows an an exception while preserving its stack trace. This method does not return and
            is typically called as <code>throw ExceptionUtil.Throw(ex);</code>.</summary>
        </member>
        <member name="T:ZeroC.Ice.FormatType">
            <summary>This enumeration describes the possible formats for classes and exceptions. As of Ice 4.0,
            exceptions are always marshaled in the Sliced format, but can be received in the Compact format from
            applications using earlier versions of Ice.</summary>
        </member>
        <member name="F:ZeroC.Ice.FormatType.Compact">
            <summary>The Compact format assumes the sender and receiver have the same Slice definitions for classes
            and exceptions. If an application receives a derived class or exception it does not know, it is
            not capable to unmarshal it into a known base class or exception because there is not enough information
            in the encoded payload. The Compact format is the default for classes.</summary>
        </member>
        <member name="F:ZeroC.Ice.FormatType.Sliced">
            <summary>The Sliced format allows slicing of unknown slices by the receiver. If an application receives
            a derived class or exception it does not know, it can slice off the derived bits and create a base class
            or exception. Exceptions are always marshaled using the Sliced format.</summary>
        </member>
        <member name="T:ZeroC.Ice.CompressionFormat">
            <summary>With the 2.0 encoding, the payload of an encapsulation (and by extension the payload of a protocol frame)
            may be compressed. CompressionFormat describes the format of such a payload.</summary>
        </member>
        <member name="F:ZeroC.Ice.CompressionFormat.Decompressed">
            <summary>The payload is not compressed and can be read directly.</summary>
        </member>
        <member name="F:ZeroC.Ice.CompressionFormat.GZip">
            <summary>The payload is compressed using the gzip format.</summary>
        </member>
        <member name="T:ZeroC.Ice.CompressionFormatHelper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.CompressionFormat"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Transport">
            <summary>Identifies a transport protocol that Ice can use to send requests and receive responses. The enumerators of
            Transport correspond to the transports that the Ice runtime knows and implements in some programming languages
            and for some version of the Ice protocol. Other transports, with short values not represented by these
            enumerators, can be implemented and registered using transport plug-ins.</summary>
        </member>
        <member name="F:ZeroC.Ice.Transport.Colocated">
            <summary>Colocated transport.</summary>
        </member>
        <member name="F:ZeroC.Ice.Transport.TCP">
            <summary>TCP transport.</summary>
        </member>
        <member name="F:ZeroC.Ice.Transport.SSL">
            <summary>SSL transport.</summary>
        </member>
        <member name="F:ZeroC.Ice.Transport.UDP">
            <summary>UDP transport.</summary>
        </member>
        <member name="F:ZeroC.Ice.Transport.WS">
            <summary>Web Socket transport.</summary>
        </member>
        <member name="F:ZeroC.Ice.Transport.WSS">
            <summary>Secure Web Socket transport.</summary>
        </member>
        <member name="F:ZeroC.Ice.Transport.BT">
            <summary>Bluetooth transport.</summary>
        </member>
        <member name="F:ZeroC.Ice.Transport.BTS">
            <summary>Secure Bluetooth transport.</summary>
        </member>
        <member name="F:ZeroC.Ice.Transport.iAP">
            <summary>Apple iAP transport.</summary>
        </member>
        <member name="F:ZeroC.Ice.Transport.iAPS">
            <summary>Secure Apple iAP transport.</summary>
        </member>
        <member name="T:ZeroC.Ice.TransportHelper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.Transport"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.EndpointData">
            <summary>The "on-the-wire" representation of an endpoint for the ice2 protocol.</summary>
        </member>
        <member name="F:ZeroC.Ice.EndpointData.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.EndpointData"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.EndpointData.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.Ice.EndpointData"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.EndpointData.Transport">
            <summary>The transport.</summary>
        </member>
        <member name="F:ZeroC.Ice.EndpointData.Host">
            <summary>The host name or address. Its exact meaning depends on the transport. For IP-based transports, it's a DNS
            name or IP address. For Bluetooth RFCOMM, it's a Bluetooth Device Address.</summary>
        </member>
        <member name="F:ZeroC.Ice.EndpointData.Port">
            <summary>The port number. Its exact meaning depends on the transport. For IP-based transports, it's a port number.
            For Bluetooth RFCOMM, it's always 0.</summary>
        </member>
        <member name="F:ZeroC.Ice.EndpointData.Options">
            <summary>A sequence of options. With tcp, ssl and udp, options is always empty. With ws and wss, option may include
            a single entry with a "resource" string.</summary>
        </member>
        <member name="M:ZeroC.Ice.EndpointData.op_Equality(ZeroC.Ice.EndpointData,ZeroC.Ice.EndpointData)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.EndpointData.op_Inequality(ZeroC.Ice.EndpointData,ZeroC.Ice.EndpointData)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.EndpointData.#ctor(ZeroC.Ice.Transport,System.String,System.UInt16,System.String[])">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.EndpointData"/>.</summary>
            <param name="transport">The transport.</param>
            <param name="host">The host name or address. Its exact meaning depends on the transport. For IP-based transports, it's a DNS
            name or IP address. For Bluetooth RFCOMM, it's a Bluetooth Device Address.</param>
            <param name="port">The port number. Its exact meaning depends on the transport. For IP-based transports, it's a port number.
            For Bluetooth RFCOMM, it's always 0.</param>
            <param name="options">A sequence of options. With tcp, ssl and udp, options is always empty. With ws and wss, option may include
            a single entry with a "resource" string.</param>
        </member>
        <member name="M:ZeroC.Ice.EndpointData.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.EndpointData"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.Ice.EndpointData.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.EndpointData.Equals(ZeroC.Ice.EndpointData)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.EndpointData.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.EndpointData.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.RemoteExceptionOrigin">
            <summary>Represents the origin of a remote exception. With the Ice 2.0 encoding, all remote exceptions have an implicit
            origin data member set during marshaling. With the Ice 1.1 encoding, this origin data member is only set and
            marshaled for ObjectNotExistException and OperationNotExistException.</summary>
        </member>
        <member name="F:ZeroC.Ice.RemoteExceptionOrigin.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.RemoteExceptionOrigin"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.RemoteExceptionOrigin.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.Ice.RemoteExceptionOrigin"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.RemoteExceptionOrigin.Identity">
            <summary>The Ice object Identity.</summary>
        </member>
        <member name="F:ZeroC.Ice.RemoteExceptionOrigin.Facet">
            <summary>The Ice object facet.</summary>
        </member>
        <member name="F:ZeroC.Ice.RemoteExceptionOrigin.Operation">
            <summary>The operation name.</summary>
        </member>
        <member name="M:ZeroC.Ice.RemoteExceptionOrigin.op_Equality(ZeroC.Ice.RemoteExceptionOrigin,ZeroC.Ice.RemoteExceptionOrigin)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.RemoteExceptionOrigin.op_Inequality(ZeroC.Ice.RemoteExceptionOrigin,ZeroC.Ice.RemoteExceptionOrigin)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.RemoteExceptionOrigin.#ctor(ZeroC.Ice.Identity,System.String,System.String)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.RemoteExceptionOrigin"/>.</summary>
            <param name="identity">The Ice object Identity.</param>
            <param name="facet">The Ice object facet.</param>
            <param name="operation">The operation name.</param>
        </member>
        <member name="M:ZeroC.Ice.RemoteExceptionOrigin.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.RemoteExceptionOrigin"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.Ice.RemoteExceptionOrigin.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.RemoteExceptionOrigin.Equals(ZeroC.Ice.RemoteExceptionOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.RemoteExceptionOrigin.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.RemoteExceptionOrigin.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.ObjectNotExistException">
            <summary>The object adapter could not find a servant for the target object.</summary>
        </member>
        <member name="M:ZeroC.Ice.ObjectNotExistException.#ctor(System.String,System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.ObjectNotExistException"/>.</summary>
            <param name="message">Message that describes the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="M:ZeroC.Ice.ObjectNotExistException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.ObjectNotExistException"/>.</summary>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="P:ZeroC.Ice.ObjectNotExistException.DefaultMessage">
            <inheritdoc/>
        </member>
        <member name="T:ZeroC.Ice.OperationNotExistException">
            <summary>The object adapter found a servant for the target object but this servant does not implement the requested
            operation. This exception is typically thrown when a client with newer Slice definitions calls an implementation
            based on older Slice definitions.</summary>
        </member>
        <member name="M:ZeroC.Ice.OperationNotExistException.#ctor(System.String,System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.OperationNotExistException"/>.</summary>
            <param name="message">Message that describes the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="M:ZeroC.Ice.OperationNotExistException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.OperationNotExistException"/>.</summary>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="P:ZeroC.Ice.OperationNotExistException.DefaultMessage">
            <inheritdoc/>
        </member>
        <member name="T:ZeroC.Ice.UnhandledException">
            <summary>An unhandled exception is thrown when an operation implementation throws an exception not derived from
            RemoteException or when it throws a RemoteException with its convertToUnhandled flag set to true.
            With ice1, an UnhandledException is transmitted as an "UnknownLocalException" with just a string (the message)
            as its payload. When receiving any Unknown exception over ice1, the mapped exception is UnhandledException.</summary>
        </member>
        <member name="M:ZeroC.Ice.UnhandledException.#ctor(System.String,System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.UnhandledException"/>.</summary>
            <param name="message">Message that describes the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="M:ZeroC.Ice.UnhandledException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.UnhandledException"/>.</summary>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="M:ZeroC.Ice.UnhandledException.#ctor(System.Exception)">
            <summary>Constructs a new exception.</summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ZeroC.Ice.InvalidArgumentException">
            <summary>One of the arguments to the operation has an invalid value.</summary>
        </member>
        <member name="F:ZeroC.Ice.InvalidArgumentException.ParamName">
            <summary>The name of the corresponding parameter.</summary>
        </member>
        <member name="M:ZeroC.Ice.InvalidArgumentException.#ctor(System.String,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.InvalidArgumentException"/>.</summary>
            <param name="paramName">The name of the corresponding parameter.</param>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="M:ZeroC.Ice.InvalidArgumentException.#ctor(System.String,System.String,System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.InvalidArgumentException"/>.</summary>
            <param name="message">Message that describes the exception.</param>
            <param name="paramName">The name of the corresponding parameter.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="T:ZeroC.Ice.ServerException">
            <summary>A server exception is thrown when an implementation error occured. This can occur for example if the
            response can't be sent because it's larger than the peer's incoming frame maximum size.</summary>
        </member>
        <member name="M:ZeroC.Ice.ServerException.#ctor(System.String,System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.ServerException"/>.</summary>
            <param name="message">Message that describes the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="M:ZeroC.Ice.ServerException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.ServerException"/>.</summary>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="T:ZeroC.Ice.Ice1FrameType">
            <summary>Each ice1 frame has a type identified by this enumeration.</summary>
        </member>
        <member name="T:ZeroC.Ice.Ice1FrameTypeHelper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.Ice1FrameType"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.OperationMode">
            <summary>Determines the retry behavior an invocation in case of a (potentially) recoverable error. OperationMode is
            sent with each ice1 request to allow the server to verify the assumptions made by the caller.</summary>
        </member>
        <member name="F:ZeroC.Ice.OperationMode.Normal">
            <summary>Ordinary operations have Normal mode. These operations can modify object state; invoking such
            an operation twice in a row may have different semantics than invoking it once. The Ice run time guarantees
            that it will not violate at-most-once semantics for Normal operations.</summary>
        </member>
        <member name="F:ZeroC.Ice.OperationMode.Nonmutating">
            <summary>Nonmutating is deprecated; use Idempotent instead.</summary>
        </member>
        <member name="F:ZeroC.Ice.OperationMode.Idempotent">
            <summary>Operations that use the Slice idempotent keyword can modify object state, but invoking an
            operation twice in a row must result in the same object state as invoking it once. For example,
            x = 1 is an idempotent statement, whereas x += 1 is not. For idempotent
            operations, the Ice run-time does not guarantee at-most-once semantics.</summary>
        </member>
        <member name="T:ZeroC.Ice.OperationModeHelper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.OperationMode"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Ice1RequestHeader">
            <summary>Each ice1 request frame has:
            - a frame prologue, with the frame type and the overall frame size
            - a request header (below)
            - a request payload</summary>
        </member>
        <member name="F:ZeroC.Ice.Ice1RequestHeader.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Ice1RequestHeader"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Ice1RequestHeader.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.Ice.Ice1RequestHeader"/> instances.</summary>
        </member>
        <member name="M:ZeroC.Ice.Ice1RequestHeader.op_Equality(ZeroC.Ice.Ice1RequestHeader,ZeroC.Ice.Ice1RequestHeader)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice1RequestHeader.op_Inequality(ZeroC.Ice.Ice1RequestHeader,ZeroC.Ice.Ice1RequestHeader)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice1RequestHeader.#ctor(ZeroC.Ice.Identity,System.String[],System.String,ZeroC.Ice.OperationMode,System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Ice1RequestHeader"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Ice1RequestHeader.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Ice1RequestHeader"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.Ice.Ice1RequestHeader.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice1RequestHeader.Equals(ZeroC.Ice.Ice1RequestHeader)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice1RequestHeader.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice1RequestHeader.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.ReplyStatus">
            <summary>The reply status of an ice1 response frame.</summary>
        </member>
        <member name="F:ZeroC.Ice.ReplyStatus.OK">
            <summary>A successful reply message.</summary>
        </member>
        <member name="F:ZeroC.Ice.ReplyStatus.UserException">
            <summary>A user exception reply message.</summary>
        </member>
        <member name="F:ZeroC.Ice.ReplyStatus.ObjectNotExistException">
            <summary>The target object does not exist.</summary>
        </member>
        <member name="F:ZeroC.Ice.ReplyStatus.FacetNotExistException">
            <summary>The target object does not support the facet.</summary>
        </member>
        <member name="F:ZeroC.Ice.ReplyStatus.OperationNotExistException">
            <summary>The target object does not support the operation.</summary>
        </member>
        <member name="F:ZeroC.Ice.ReplyStatus.UnknownLocalException">
            <summary>The reply message carries an unknown Ice local exception.</summary>
        </member>
        <member name="F:ZeroC.Ice.ReplyStatus.UnknownUserException">
            <summary>The reply message carries an unknown Ice user exception.</summary>
        </member>
        <member name="F:ZeroC.Ice.ReplyStatus.UnknownException">
            <summary>The reply message carries an unknown exception.</summary>
        </member>
        <member name="T:ZeroC.Ice.ReplyStatusHelper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.ReplyStatus"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Ice2FrameType">
            <summary>Each ice2 frame has a type identified by this enumeration.</summary>
        </member>
        <member name="T:ZeroC.Ice.Ice2FrameTypeHelper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.Ice2FrameType"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Priority">
            <summary>The priority of this request.</summary>
        </member>
        <member name="T:ZeroC.Ice.PriorityHelper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.Priority"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Ice2ParameterKey">
            <summary>The keys for supported ice2 connection parameters.</summary>
        </member>
        <member name="T:ZeroC.Ice.Ice2ParameterKeyHelper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.Ice2ParameterKey"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Ice2RequestHeaderBody">
            <summary>The request header body, see Ice2RequestHeader.</summary>
        </member>
        <member name="F:ZeroC.Ice.Ice2RequestHeaderBody.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Ice2RequestHeaderBody"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Ice2RequestHeaderBody.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.Ice.Ice2RequestHeaderBody"/> instances.</summary>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeaderBody.op_Equality(ZeroC.Ice.Ice2RequestHeaderBody,ZeroC.Ice.Ice2RequestHeaderBody)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeaderBody.op_Inequality(ZeroC.Ice.Ice2RequestHeaderBody,ZeroC.Ice.Ice2RequestHeaderBody)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeaderBody.#ctor(ZeroC.Ice.Identity,System.String,System.String[],System.String,System.Nullable{System.Boolean},System.Nullable{ZeroC.Ice.Priority},System.Int64,System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Ice2RequestHeaderBody"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeaderBody.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Ice2RequestHeaderBody"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeaderBody.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeaderBody.Equals(ZeroC.Ice.Ice2RequestHeaderBody)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeaderBody.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeaderBody.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.Ice2RequestHeader">
            <summary>Each ice2 request frame has:
            - a frame prologue, with the frame type and the overall frame size
            - a request header (below)
            - a request payload</summary>
        </member>
        <member name="F:ZeroC.Ice.Ice2RequestHeader.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Ice2RequestHeader"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Ice2RequestHeader.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.Ice.Ice2RequestHeader"/> instances.</summary>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeader.op_Equality(ZeroC.Ice.Ice2RequestHeader,ZeroC.Ice.Ice2RequestHeader)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeader.op_Inequality(ZeroC.Ice.Ice2RequestHeader,ZeroC.Ice.Ice2RequestHeader)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeader.#ctor(System.UInt64,ZeroC.Ice.Ice2RequestHeaderBody,System.Collections.Generic.Dictionary{System.Int32,System.Byte[]})">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Ice2RequestHeader"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeader.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Ice2RequestHeader"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeader.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeader.Equals(ZeroC.Ice.Ice2RequestHeader)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeader.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice2RequestHeader.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.Ice2ResponseHeader">
            <summary>Each ice2 response frame has:
            - a frame prologue, with the frame type and the overall frame size
            - a response header (below)
            - a response payload</summary>
        </member>
        <member name="F:ZeroC.Ice.Ice2ResponseHeader.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Ice2ResponseHeader"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Ice2ResponseHeader.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.Ice.Ice2ResponseHeader"/> instances.</summary>
        </member>
        <member name="M:ZeroC.Ice.Ice2ResponseHeader.op_Equality(ZeroC.Ice.Ice2ResponseHeader,ZeroC.Ice.Ice2ResponseHeader)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice2ResponseHeader.op_Inequality(ZeroC.Ice.Ice2ResponseHeader,ZeroC.Ice.Ice2ResponseHeader)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice2ResponseHeader.#ctor(System.UInt64,System.Collections.Generic.Dictionary{System.Int32,System.Byte[]})">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Ice2ResponseHeader"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Ice2ResponseHeader.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Ice2ResponseHeader"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.Ice.Ice2ResponseHeader.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice2ResponseHeader.Equals(ZeroC.Ice.Ice2ResponseHeader)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice2ResponseHeader.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice2ResponseHeader.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.ResultType">
            <summary>The type of result carried by an ice2 response frame. The values Success and Failure match the values of OK and
            UserException in <see cref="T:ZeroC.Ice.ReplyStatus"/>. The first byte of an ice2 response frame payload is a ResultType.</summary>
        </member>
        <member name="F:ZeroC.Ice.ResultType.Success">
            <summary>The request succeeded.</summary>
        </member>
        <member name="F:ZeroC.Ice.ResultType.Failure">
            <summary>The request failed.</summary>
        </member>
        <member name="T:ZeroC.Ice.ResultTypeHelper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.ResultType"/>.</summary>
        </member>
        <member name="F:ZeroC.Ice.StreamResetErrorCode.RequestCanceled">
            <summary>The caller canceled the request.</summary>
        </member>
        <member name="F:ZeroC.Ice.StreamResetErrorCode.StopStreamingData">
            <summary>The peer no longer wants to receive data from the stream.</summary>
        </member>
        <member name="T:ZeroC.Ice.StreamResetErrorCodeHelper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.StreamResetErrorCode"/>.</summary>
        </member>
        <member name="F:ZeroC.Ice.Ice2GoAwayBody.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Ice2GoAwayBody"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Ice2GoAwayBody.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.Ice.Ice2GoAwayBody"/> instances.</summary>
        </member>
        <member name="M:ZeroC.Ice.Ice2GoAwayBody.op_Equality(ZeroC.Ice.Ice2GoAwayBody,ZeroC.Ice.Ice2GoAwayBody)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice2GoAwayBody.op_Inequality(ZeroC.Ice.Ice2GoAwayBody,ZeroC.Ice.Ice2GoAwayBody)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice2GoAwayBody.#ctor(System.UInt64,System.UInt64,System.String)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Ice2GoAwayBody"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.Ice2GoAwayBody.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Ice2GoAwayBody"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.Ice.Ice2GoAwayBody.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice2GoAwayBody.Equals(ZeroC.Ice.Ice2GoAwayBody)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice2GoAwayBody.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Ice2GoAwayBody.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.Identity">
            <summary>The identity of an Ice object.</summary>
        </member>
        <member name="F:ZeroC.Ice.Identity.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Identity"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Identity.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.Ice.Identity"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Identity.Name">
            <summary>The name of the Ice object. An empty name is not a valid name.</summary>
        </member>
        <member name="F:ZeroC.Ice.Identity.Category">
            <summary>The Ice object category.</summary>
        </member>
        <member name="M:ZeroC.Ice.Identity.op_Equality(ZeroC.Ice.Identity,ZeroC.Ice.Identity)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Identity.op_Inequality(ZeroC.Ice.Identity,ZeroC.Ice.Identity)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Identity.#ctor(System.String,System.String)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Identity"/>.</summary>
            <param name="name">The name of the Ice object. An empty name is not a valid name.</param>
            <param name="category">The Ice object category.</param>
        </member>
        <member name="M:ZeroC.Ice.Identity.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Identity"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.Ice.Identity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Identity.Equals(ZeroC.Ice.Identity)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Identity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Identity.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="F:ZeroC.Ice.Identity.Empty">
            <summary>The empty Identity.</summary>
        </member>
        <member name="M:ZeroC.Ice.Identity.Parse(System.String,System.Boolean)">
            <summary>Converts the string representation of an identity to its equivalent Identity struct.</summary>
            <param name="s">A string [escapedCategory/]escapedName.</param>
            <param name="uriFormat">When true (the default), the string is a relative URI. When false, the string
            uses the ice1 format. See also <see cref="T:ZeroC.Ice.ToStringMode"/>.</param>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
            <returns>An Identity equivalent to the identity contained in s.</returns>
        </member>
        <member name="M:ZeroC.Ice.Identity.TryParse(System.String,System.Boolean,ZeroC.Ice.Identity@)">
            <summary>Converts the string representation of an identity to its equivalent Identity struct.</summary>
            <param name="s">A string containing an identity to convert.</param>
            <param name="uriFormat">When true, the string is a relative URI. When false, the string uses the ice1
            format. See also <see cref="T:ZeroC.Ice.ToStringMode"/>.</param>
            <param name="identity">When this method returns, contains an Identity struct equivalent to the identity
            contained in s, if the conversion succeeded, or a default identity if failed. </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:ZeroC.Ice.Identity.ToString">
            <summary>Converts an object identity to a relative URI string. All characters in category and name are
            percent escaped, except unreserved characters.</summary>
            <returns>A relative URI string [escapedCategory/]escapedName for this identity.</returns>
        </member>
        <member name="M:ZeroC.Ice.Identity.ToString(ZeroC.Ice.ToStringMode)">
            <summary>Converts an object identity to a string, using the format specified by ToStringMode.</summary>
            <param name="mode">Specifies if and how non-printable ASCII characters are escaped in the result. See
            <see cref="T:ZeroC.Ice.ToStringMode"/>.</param>
            <returns>The string representation of the object identity.</returns>
        </member>
        <member name="T:ZeroC.Ice.AdapterAlreadyActiveException">
            <summary>This exception is thrown when a server tries to register endpoints for an object adapter that is already active.</summary>
        </member>
        <member name="M:ZeroC.Ice.AdapterAlreadyActiveException.#ctor(System.String,System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.AdapterAlreadyActiveException"/>.</summary>
            <param name="message">Message that describes the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="M:ZeroC.Ice.AdapterAlreadyActiveException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.AdapterAlreadyActiveException"/>.</summary>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="T:ZeroC.Ice.AdapterNotFoundException">
            <summary>This exception is thrown when an object adapter was not found.</summary>
        </member>
        <member name="M:ZeroC.Ice.AdapterNotFoundException.#ctor(System.String,System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.AdapterNotFoundException"/>.</summary>
            <param name="message">Message that describes the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="M:ZeroC.Ice.AdapterNotFoundException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.AdapterNotFoundException"/>.</summary>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="T:ZeroC.Ice.InvalidReplicaGroupIdException">
            <summary>This exception is thrown when the provided replica group is invalid.</summary>
        </member>
        <member name="M:ZeroC.Ice.InvalidReplicaGroupIdException.#ctor(System.String,System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.InvalidReplicaGroupIdException"/>.</summary>
            <param name="message">Message that describes the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="M:ZeroC.Ice.InvalidReplicaGroupIdException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.InvalidReplicaGroupIdException"/>.</summary>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="T:ZeroC.Ice.ObjectNotFoundException">
            <summary>This exception is thrown when an Ice object was not found.</summary>
        </member>
        <member name="M:ZeroC.Ice.ObjectNotFoundException.#ctor(System.String,System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.ObjectNotFoundException"/>.</summary>
            <param name="message">Message that describes the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="M:ZeroC.Ice.ObjectNotFoundException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.ObjectNotFoundException"/>.</summary>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="T:ZeroC.Ice.ServerNotFoundException">
            <summary>This exception is thrown when a server was not found.</summary>
        </member>
        <member name="M:ZeroC.Ice.ServerNotFoundException.#ctor(System.String,System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.ServerNotFoundException"/>.</summary>
            <param name="message">Message that describes the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="M:ZeroC.Ice.ServerNotFoundException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.ServerNotFoundException"/>.</summary>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="T:ZeroC.Ice.ILocatorPrx">
            <summary>Proxy interface used to call remote Ice objects that implement Slice interface Locator.
            Client applications use Locator to resolve locations and well-known proxies. The Locator object also allows
            server applications to retrieve a proxy to the LocatorRegistry object.
            <seealso cref="T:ZeroC.Ice.ILocator"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.ILocatorPrx.Request">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> factory method for each remote operation defined in <see cref="T:ZeroC.Ice.ILocatorPrx"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.Request.FindObjectById(ZeroC.Ice.IObjectPrx,System.ValueTuple{ZeroC.Ice.Identity,System.String}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for FindObjectById operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.Request.FindAdapterById(ZeroC.Ice.IObjectPrx,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for FindAdapterById operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.Request.GetRegistry(ZeroC.Ice.IObjectPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for GetRegistry operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.Request.ResolveLocation(ZeroC.Ice.IObjectPrx,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for ResolveLocation operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.Request.ResolveWellKnownProxy(ZeroC.Ice.IObjectPrx,System.ValueTuple{ZeroC.Ice.Identity,System.String}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for ResolveWellKnownProxy operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="T:ZeroC.Ice.ILocatorPrx.Response">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each non-void remote operation defined in <see cref="T:ZeroC.Ice.ILocatorPrx"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.Response.FindObjectById(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingResponseFrame)">
            <summary>The <see cref="T:ZeroC.Ice.ResponseReader`1"/> for the return type of operation FindObjectById.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.Response.FindAdapterById(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingResponseFrame)">
            <summary>The <see cref="T:ZeroC.Ice.ResponseReader`1"/> for the return type of operation FindAdapterById.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.Response.GetRegistry(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingResponseFrame)">
            <summary>The <see cref="T:ZeroC.Ice.ResponseReader`1"/> for the return type of operation GetRegistry.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.Response.ResolveLocation(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingResponseFrame)">
            <summary>The <see cref="T:ZeroC.Ice.ResponseReader`1"/> for the return type of operation ResolveLocation.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.Response.ResolveWellKnownProxy(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingResponseFrame)">
            <summary>The <see cref="T:ZeroC.Ice.ResponseReader`1"/> for the return type of operation ResolveWellKnownProxy.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.FindObjectById(ZeroC.Ice.Identity,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Finds an object by identity and facet and returns a proxy that provides a location or endpoint(s) that can
            be used to reach the object using the ice1 protocol.</summary>
            <param name="id">The identity.</param>
            <param name="facet">The facet. A null value is equivalent to the empty string.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>An ice1 proxy that provides a location or endpoint(s), or null if an object with the requested
            identity and facet was not found.</returns>
            <exceptions cref="T:ZeroC.Ice.ObjectNotFoundException">Thrown if an object with the requested identity and facet was not found. The
            caller should treat this exception like a null return value.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.FindObjectByIdAsync(ZeroC.Ice.Identity,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Finds an object by identity and facet and returns a proxy that provides a location or endpoint(s) that can
            be used to reach the object using the ice1 protocol.</summary>
            <param name="id">The identity.</param>
            <param name="facet">The facet. A null value is equivalent to the empty string.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.Ice.ObjectNotFoundException">Thrown if an object with the requested identity and facet was not found. The
            caller should treat this exception like a null return value.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.FindAdapterById(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Finds an object adapter by id and returns a proxy that provides the object adapter's endpoint(s). This
            operation is for object adapters using the ice1 protocol.</summary>
            <param name="id">The adapter ID.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>An ice1 proxy with the adapter's endpoint(s), or null if an object adapter with adapter ID `id' was
            not found.</returns>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if an object adapter with this adapter ID was not found. The caller
            should treat this exception like a null return value.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.FindAdapterByIdAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Finds an object adapter by id and returns a proxy that provides the object adapter's endpoint(s). This
            operation is for object adapters using the ice1 protocol.</summary>
            <param name="id">The adapter ID.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if an object adapter with this adapter ID was not found. The caller
            should treat this exception like a null return value.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.GetRegistry(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Gets the locator registry.</summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The locator registry, or null if this locator has no registry.</returns>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.GetRegistryAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Gets the locator registry.</summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.ResolveLocation(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Resolves the location of a proxy that uses the ice2 protocol.</summary>
            <param name="location">The location to resolve.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>A sequence of one or more endpoints when the location can be resolved, and an empty sequence of
            endpoints when the location cannot be resolved.</returns>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.ResolveLocationAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Resolves the location of a proxy that uses the ice2 protocol.</summary>
            <param name="location">The location to resolve.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.ResolveWellKnownProxy(ZeroC.Ice.Identity,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Resolves the well-known object with the given identity and facet. This object must be reachable using the
            ice2 protocol.</summary>
            <param name="identity">The identity of the well-known Ice object.</param>
            <param name="facet">The facet of the well-known Ice object.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>Named tuple with the following fields:</returns>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.ResolveWellKnownProxyAsync(ZeroC.Ice.Identity,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Resolves the well-known object with the given identity and facet. This object must be reachable using the
            ice2 protocol.</summary>
            <param name="identity">The identity of the well-known Ice object.</param>
            <param name="facet">The facet of the well-known Ice object.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="F:ZeroC.Ice.ILocatorPrx.Factory">
            <summary>Factory for <see cref="T:ZeroC.Ice.ILocatorPrx"/> proxies.</summary>
        </member>
        <member name="F:ZeroC.Ice.ILocatorPrx.IceReader">
            <summary>An <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.ILocatorPrx"/> proxies.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.Parse(System.String,ZeroC.Ice.Communicator)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.ILocatorPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <returns>The new proxy</returns>
            <exception cref="T:System.FormatException"><c>s</c> does not contain a valid string representation of a proxy.</exception>
        </member>
        <member name="M:ZeroC.Ice.ILocatorPrx.TryParse(System.String,ZeroC.Ice.Communicator,ZeroC.Ice.ILocatorPrx@)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.ILocatorPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <param name="prx">When this method returns it contains the new proxy, if the conversion succeeded or null if the conversion failed.</param>
            <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ZeroC.Ice.ILocatorRegistryPrx">
            <summary>Proxy interface used to call remote Ice objects that implement Slice interface LocatorRegistry.
            A server application registers the endpoints of its indirect object adapters with the LocatorRegistry object.
            <seealso cref="T:ZeroC.Ice.ILocatorRegistry"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.ILocatorRegistryPrx.Request">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> factory method for each remote operation defined in <see cref="T:ZeroC.Ice.ILocatorRegistryPrx"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.Request.RegisterAdapterEndpoints(ZeroC.Ice.IObjectPrx,System.ValueTuple{System.String,System.String,System.Collections.Generic.IEnumerable{ZeroC.Ice.EndpointData}}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for RegisterAdapterEndpoints operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.Request.SetAdapterDirectProxy(ZeroC.Ice.IObjectPrx,System.ValueTuple{System.String,ZeroC.Ice.IObjectPrx}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for SetAdapterDirectProxy operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.Request.SetReplicatedAdapterDirectProxy(ZeroC.Ice.IObjectPrx,System.ValueTuple{System.String,System.String,ZeroC.Ice.IObjectPrx}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for SetReplicatedAdapterDirectProxy operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.Request.SetServerProcessProxy(ZeroC.Ice.IObjectPrx,System.ValueTuple{System.String,ZeroC.Ice.IProcessPrx}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for SetServerProcessProxy operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.Request.UnregisterAdapterEndpoints(ZeroC.Ice.IObjectPrx,System.ValueTuple{System.String,System.String}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for UnregisterAdapterEndpoints operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.RegisterAdapterEndpoints(System.String,System.String,System.Collections.Generic.IEnumerable{ZeroC.Ice.EndpointData},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Registers the endpoints of an object adapter that uses the ice2 protocol.</summary>
            <param name="adapterId">The adapter ID.</param>
            <param name="replicaGroupId">The replica group ID. It is set to the empty string when the object adapter does not
            belong to a replica group.</param>
            <param name="endpoints">A sequence of one or more endpoints. The locator considers an object adapter to be active
            after it has registered its endpoints.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID and replica group ID (if applicable) was
            registered with the locator.</exceptions>
            <exceptions cref="T:ZeroC.Ice.InvalidArgumentException">Thrown if any of the provided arguments is invalid, such as an empty
            adapter ID, empty endpoint sequence or adapter ID and replica group ID are inconsistent.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.RegisterAdapterEndpointsAsync(System.String,System.String,System.Collections.Generic.IEnumerable{ZeroC.Ice.EndpointData},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Registers the endpoints of an object adapter that uses the ice2 protocol.</summary>
            <param name="adapterId">The adapter ID.</param>
            <param name="replicaGroupId">The replica group ID. It is set to the empty string when the object adapter does not
            belong to a replica group.</param>
            <param name="endpoints">A sequence of one or more endpoints. The locator considers an object adapter to be active
            after it has registered its endpoints.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID and replica group ID (if applicable) was
            registered with the locator.</exceptions>
            <exceptions cref="T:ZeroC.Ice.InvalidArgumentException">Thrown if any of the provided arguments is invalid, such as an empty
            adapter ID, empty endpoint sequence or adapter ID and replica group ID are inconsistent.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.SetAdapterDirectProxy(System.String,ZeroC.Ice.IObjectPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Registers or unregisters the endpoints of an object adapter that uses the ice1 protocol.</summary>
            <param name="id">The adapter ID.</param>
            <param name="proxy">A dummy direct proxy created by the object adapter that provides the object adapter's
            endpoints. The locator considers an object adapter to be active after it has registered its endpoints. When
            proxy is null, the endpoints are unregistered and the locator considers the object adapter inactive.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <exceptions cref="T:ZeroC.Ice.AdapterAlreadyActiveException">Thrown if an object adapter with the same adapter ID has already
            registered its endpoints.</exceptions>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID was registered with the locator.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.SetAdapterDirectProxyAsync(System.String,ZeroC.Ice.IObjectPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Registers or unregisters the endpoints of an object adapter that uses the ice1 protocol.</summary>
            <param name="id">The adapter ID.</param>
            <param name="proxy">A dummy direct proxy created by the object adapter that provides the object adapter's
            endpoints. The locator considers an object adapter to be active after it has registered its endpoints. When
            proxy is null, the endpoints are unregistered and the locator considers the object adapter inactive.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.Ice.AdapterAlreadyActiveException">Thrown if an object adapter with the same adapter ID has already
            registered its endpoints.</exceptions>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID was registered with the locator.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.SetReplicatedAdapterDirectProxy(System.String,System.String,ZeroC.Ice.IObjectPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Registers or unregisters the endpoints of an object adapter that uses the ice1 protocol. This object adapter
            is member of a replica group.</summary>
            <param name="adapterId">The adapter ID.</param>
            <param name="replicaGroupId">The replica group ID.</param>
            <param name="proxy">A dummy direct proxy created by the object adapter that provides the object adapter's
            endpoints. The locator considers an object adapter to be active after it has registered its endpoints. When
            proxy is null, the endpoints are unregistered and the locator considers the object adapter inactive.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <exceptions cref="T:ZeroC.Ice.AdapterAlreadyActiveException">Thrown if an object adapter with the same adapter ID has already</exceptions>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID was registered with the locator.</exceptions>
            <exceptions cref="T:ZeroC.Ice.InvalidReplicaGroupIdException">Thrown if the given replica group does not match the replica group
            associated with the adapter ID in the locator's database.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.SetReplicatedAdapterDirectProxyAsync(System.String,System.String,ZeroC.Ice.IObjectPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Registers or unregisters the endpoints of an object adapter that uses the ice1 protocol. This object adapter
            is member of a replica group.</summary>
            <param name="adapterId">The adapter ID.</param>
            <param name="replicaGroupId">The replica group ID.</param>
            <param name="proxy">A dummy direct proxy created by the object adapter that provides the object adapter's
            endpoints. The locator considers an object adapter to be active after it has registered its endpoints. When
            proxy is null, the endpoints are unregistered and the locator considers the object adapter inactive.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.Ice.AdapterAlreadyActiveException">Thrown if an object adapter with the same adapter ID has already</exceptions>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID was registered with the locator.</exceptions>
            <exceptions cref="T:ZeroC.Ice.InvalidReplicaGroupIdException">Thrown if the given replica group does not match the replica group
            associated with the adapter ID in the locator's database.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.SetServerProcessProxy(System.String,ZeroC.Ice.IProcessPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Registers a proxy for a server's Process object.</summary>
            <param name="serverId">The server ID.</param>
            <param name="proxy">A proxy for the server's Process object.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <exceptions cref="T:ZeroC.Ice.ServerNotFoundException">Thrown if the locator does not know a server with this server ID.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.SetServerProcessProxyAsync(System.String,ZeroC.Ice.IProcessPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Registers a proxy for a server's Process object.</summary>
            <param name="serverId">The server ID.</param>
            <param name="proxy">A proxy for the server's Process object.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.Ice.ServerNotFoundException">Thrown if the locator does not know a server with this server ID.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.UnregisterAdapterEndpoints(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Unregisters the endpoints of an object adapter that uses the ice2 protocol, or does nothing if this object
            adapter is not active.</summary>
            <param name="adapterId">The adapter ID.</param>
            <param name="replicaGroupId">The replica group ID. It is set to the empty string when the object adapter does not
            belong to a replica group.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID and replica group ID (if applicable) was
            registered with the locator.</exceptions>
            <exceptions cref="T:ZeroC.Ice.InvalidArgumentException">Thrown if any of the provided arguments is invalid.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.UnregisterAdapterEndpointsAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Unregisters the endpoints of an object adapter that uses the ice2 protocol, or does nothing if this object
            adapter is not active.</summary>
            <param name="adapterId">The adapter ID.</param>
            <param name="replicaGroupId">The replica group ID. It is set to the empty string when the object adapter does not
            belong to a replica group.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID and replica group ID (if applicable) was
            registered with the locator.</exceptions>
            <exceptions cref="T:ZeroC.Ice.InvalidArgumentException">Thrown if any of the provided arguments is invalid.</exceptions>
        </member>
        <member name="F:ZeroC.Ice.ILocatorRegistryPrx.Factory">
            <summary>Factory for <see cref="T:ZeroC.Ice.ILocatorRegistryPrx"/> proxies.</summary>
        </member>
        <member name="F:ZeroC.Ice.ILocatorRegistryPrx.IceReader">
            <summary>An <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.ILocatorRegistryPrx"/> proxies.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.Parse(System.String,ZeroC.Ice.Communicator)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.ILocatorRegistryPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <returns>The new proxy</returns>
            <exception cref="T:System.FormatException"><c>s</c> does not contain a valid string representation of a proxy.</exception>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistryPrx.TryParse(System.String,ZeroC.Ice.Communicator,ZeroC.Ice.ILocatorRegistryPrx@)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.ILocatorRegistryPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <param name="prx">When this method returns it contains the new proxy, if the conversion succeeded or null if the conversion failed.</param>
            <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ZeroC.Ice.ILocatorFinderPrx">
            <summary>Proxy interface used to call remote Ice objects that implement Slice interface LocatorFinder.
            This interface is implemented by services that implement the Ice::Locator interface, and is advertised as an Ice
            object with the identity `Ice/LocatorFinder'. This allows clients to retrieve the locator proxy with just the
            endpoint information of the service.
            <seealso cref="T:ZeroC.Ice.ILocatorFinder"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.ILocatorFinderPrx.Request">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> factory method for each remote operation defined in <see cref="T:ZeroC.Ice.ILocatorFinderPrx"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorFinderPrx.Request.GetLocator(ZeroC.Ice.IObjectPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for GetLocator operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="T:ZeroC.Ice.ILocatorFinderPrx.Response">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each non-void remote operation defined in <see cref="T:ZeroC.Ice.ILocatorFinderPrx"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorFinderPrx.Response.GetLocator(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingResponseFrame)">
            <summary>The <see cref="T:ZeroC.Ice.ResponseReader`1"/> for the return type of operation GetLocator.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorFinderPrx.GetLocator(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Gets the locator proxy implemented by the service hosting this finder object. The proxy might point to
            several replicas.</summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The locator proxy.</returns>
        </member>
        <member name="M:ZeroC.Ice.ILocatorFinderPrx.GetLocatorAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Gets the locator proxy implemented by the service hosting this finder object. The proxy might point to
            several replicas.</summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="F:ZeroC.Ice.ILocatorFinderPrx.Factory">
            <summary>Factory for <see cref="T:ZeroC.Ice.ILocatorFinderPrx"/> proxies.</summary>
        </member>
        <member name="F:ZeroC.Ice.ILocatorFinderPrx.IceReader">
            <summary>An <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.ILocatorFinderPrx"/> proxies.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorFinderPrx.Parse(System.String,ZeroC.Ice.Communicator)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.ILocatorFinderPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <returns>The new proxy</returns>
            <exception cref="T:System.FormatException"><c>s</c> does not contain a valid string representation of a proxy.</exception>
        </member>
        <member name="M:ZeroC.Ice.ILocatorFinderPrx.TryParse(System.String,ZeroC.Ice.Communicator,ZeroC.Ice.ILocatorFinderPrx@)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.ILocatorFinderPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <param name="prx">When this method returns it contains the new proxy, if the conversion succeeded or null if the conversion failed.</param>
            <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ZeroC.Ice.ILocator">
            <summary>Interface used to implement servants for Slice interface Locator.
            Client applications use Locator to resolve locations and well-known proxies. The Locator object also allows
            server applications to retrieve a proxy to the LocatorRegistry object.
            <seealso cref="T:ZeroC.Ice.ILocatorPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.ILocator.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.ILocator"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocator.Request.FindObjectById(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation FindObjectById.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocator.Request.FindAdapterById(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameter of operation FindAdapterById.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocator.Request.ResolveLocation(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameter of operation ResolveLocation.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocator.Request.ResolveWellKnownProxy(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation ResolveWellKnownProxy.</summary>
        </member>
        <member name="T:ZeroC.Ice.ILocator.Response">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> factory method for each non-void remote operation
            defined in the <see cref="T:ZeroC.Ice.ILocator"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocator.Response.FindObjectById(ZeroC.Ice.Current,ZeroC.Ice.IObjectPrx)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation FindObjectById.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.ILocator.Response.FindAdapterById(ZeroC.Ice.Current,ZeroC.Ice.IObjectPrx)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation FindAdapterById.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.ILocator.Response.GetRegistry(ZeroC.Ice.Current,ZeroC.Ice.ILocatorRegistryPrx)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation GetRegistry.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.ILocator.Response.ResolveLocation(ZeroC.Ice.Current,System.Collections.Generic.IEnumerable{ZeroC.Ice.EndpointData})">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation ResolveLocation.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.ILocator.Response.ResolveWellKnownProxy(ZeroC.Ice.Current,System.ValueTuple{System.Collections.Generic.IEnumerable{ZeroC.Ice.EndpointData},System.Collections.Generic.IEnumerable{System.String}}@)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation ResolveWellKnownProxy.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.ILocator.FindObjectById(ZeroC.Ice.Identity,System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Finds an object by identity and facet and returns a proxy that provides a location or endpoint(s) that can
            be used to reach the object using the ice1 protocol.</summary>
            <param name="id">The identity.</param>
            <param name="facet">The facet. A null value is equivalent to the empty string.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>An ice1 proxy that provides a location or endpoint(s), or null if an object with the requested
            identity and facet was not found.</returns>
            <exceptions cref="T:ZeroC.Ice.ObjectNotFoundException">Thrown if an object with the requested identity and facet was not found. The
            caller should treat this exception like a null return value.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocator.FindAdapterById(System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Finds an object adapter by id and returns a proxy that provides the object adapter's endpoint(s). This
            operation is for object adapters using the ice1 protocol.</summary>
            <param name="id">The adapter ID.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>An ice1 proxy with the adapter's endpoint(s), or null if an object adapter with adapter ID `id' was
            not found.</returns>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if an object adapter with this adapter ID was not found. The caller
            should treat this exception like a null return value.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocator.GetRegistry(ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Gets the locator registry.</summary>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The locator registry, or null if this locator has no registry.</returns>
        </member>
        <member name="M:ZeroC.Ice.ILocator.ResolveLocation(System.String[],ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Resolves the location of a proxy that uses the ice2 protocol.</summary>
            <param name="location">The location to resolve.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>A sequence of one or more endpoints when the location can be resolved, and an empty sequence of
            endpoints when the location cannot be resolved.</returns>
        </member>
        <member name="M:ZeroC.Ice.ILocator.ResolveWellKnownProxy(ZeroC.Ice.Identity,System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Resolves the well-known object with the given identity and facet. This object must be reachable using the
            ice2 protocol.</summary>
            <param name="identity">The identity of the well-known Ice object.</param>
            <param name="facet">The facet of the well-known Ice object.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>Named tuple with the following fields:</returns>
        </member>
        <member name="T:ZeroC.Ice.ILocatorRegistry">
            <summary>Interface used to implement servants for Slice interface LocatorRegistry.
            A server application registers the endpoints of its indirect object adapters with the LocatorRegistry object.
            <seealso cref="T:ZeroC.Ice.ILocatorRegistryPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.ILocatorRegistry.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.ILocatorRegistry"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistry.Request.RegisterAdapterEndpoints(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation RegisterAdapterEndpoints.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistry.Request.SetAdapterDirectProxy(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation SetAdapterDirectProxy.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistry.Request.SetReplicatedAdapterDirectProxy(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation SetReplicatedAdapterDirectProxy.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistry.Request.SetServerProcessProxy(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation SetServerProcessProxy.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistry.Request.UnregisterAdapterEndpoints(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation UnregisterAdapterEndpoints.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistry.RegisterAdapterEndpoints(System.String,System.String,ZeroC.Ice.EndpointData[],ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Registers the endpoints of an object adapter that uses the ice2 protocol.</summary>
            <param name="adapterId">The adapter ID.</param>
            <param name="replicaGroupId">The replica group ID. It is set to the empty string when the object adapter does not
            belong to a replica group.</param>
            <param name="endpoints">A sequence of one or more endpoints. The locator considers an object adapter to be active
            after it has registered its endpoints.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID and replica group ID (if applicable) was
            registered with the locator.</exceptions>
            <exceptions cref="T:ZeroC.Ice.InvalidArgumentException">Thrown if any of the provided arguments is invalid, such as an empty
            adapter ID, empty endpoint sequence or adapter ID and replica group ID are inconsistent.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistry.SetAdapterDirectProxy(System.String,ZeroC.Ice.IObjectPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Registers or unregisters the endpoints of an object adapter that uses the ice1 protocol.</summary>
            <param name="id">The adapter ID.</param>
            <param name="proxy">A dummy direct proxy created by the object adapter that provides the object adapter's
            endpoints. The locator considers an object adapter to be active after it has registered its endpoints. When
            proxy is null, the endpoints are unregistered and the locator considers the object adapter inactive.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <exceptions cref="T:ZeroC.Ice.AdapterAlreadyActiveException">Thrown if an object adapter with the same adapter ID has already
            registered its endpoints.</exceptions>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID was registered with the locator.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistry.SetReplicatedAdapterDirectProxy(System.String,System.String,ZeroC.Ice.IObjectPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Registers or unregisters the endpoints of an object adapter that uses the ice1 protocol. This object adapter
            is member of a replica group.</summary>
            <param name="adapterId">The adapter ID.</param>
            <param name="replicaGroupId">The replica group ID.</param>
            <param name="proxy">A dummy direct proxy created by the object adapter that provides the object adapter's
            endpoints. The locator considers an object adapter to be active after it has registered its endpoints. When
            proxy is null, the endpoints are unregistered and the locator considers the object adapter inactive.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <exceptions cref="T:ZeroC.Ice.AdapterAlreadyActiveException">Thrown if an object adapter with the same adapter ID has already</exceptions>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID was registered with the locator.</exceptions>
            <exceptions cref="T:ZeroC.Ice.InvalidReplicaGroupIdException">Thrown if the given replica group does not match the replica group
            associated with the adapter ID in the locator's database.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistry.SetServerProcessProxy(System.String,ZeroC.Ice.IProcessPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Registers a proxy for a server's Process object.</summary>
            <param name="serverId">The server ID.</param>
            <param name="proxy">A proxy for the server's Process object.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <exceptions cref="T:ZeroC.Ice.ServerNotFoundException">Thrown if the locator does not know a server with this server ID.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.ILocatorRegistry.UnregisterAdapterEndpoints(System.String,System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Unregisters the endpoints of an object adapter that uses the ice2 protocol, or does nothing if this object
            adapter is not active.</summary>
            <param name="adapterId">The adapter ID.</param>
            <param name="replicaGroupId">The replica group ID. It is set to the empty string when the object adapter does not
            belong to a replica group.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID and replica group ID (if applicable) was
            registered with the locator.</exceptions>
            <exceptions cref="T:ZeroC.Ice.InvalidArgumentException">Thrown if any of the provided arguments is invalid.</exceptions>
        </member>
        <member name="T:ZeroC.Ice.ILocatorFinder">
            <summary>Interface used to implement servants for Slice interface LocatorFinder.
            This interface is implemented by services that implement the Ice::Locator interface, and is advertised as an Ice
            object with the identity `Ice/LocatorFinder'. This allows clients to retrieve the locator proxy with just the
            endpoint information of the service.
            <seealso cref="T:ZeroC.Ice.ILocatorFinderPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.ILocatorFinder.Response">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> factory method for each non-void remote operation
            defined in the <see cref="T:ZeroC.Ice.ILocatorFinder"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILocatorFinder.Response.GetLocator(ZeroC.Ice.Current,ZeroC.Ice.ILocatorPrx)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation GetLocator.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.ILocatorFinder.GetLocator(ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Gets the locator proxy implemented by the service hosting this finder object. The proxy might point to
            several replicas.</summary>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The locator proxy.</returns>
        </member>
        <member name="T:ZeroC.Ice.IAsyncLocator">
            <summary>Interface used to implement servants for Slice interface Locator.
            Client applications use Locator to resolve locations and well-known proxies. The Locator object also allows
            server applications to retrieve a proxy to the LocatorRegistry object.
            <seealso cref="T:ZeroC.Ice.ILocatorPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.IAsyncLocator.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.IAsyncLocator"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocator.Request.FindObjectById(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation FindObjectById.</summary>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocator.Request.FindAdapterById(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameter of operation FindAdapterById.</summary>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocator.Request.ResolveLocation(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameter of operation ResolveLocation.</summary>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocator.Request.ResolveWellKnownProxy(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation ResolveWellKnownProxy.</summary>
        </member>
        <member name="T:ZeroC.Ice.IAsyncLocator.Response">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> factory method for each non-void remote operation
            defined in the <see cref="T:ZeroC.Ice.IAsyncLocator"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocator.Response.FindObjectById(ZeroC.Ice.Current,ZeroC.Ice.IObjectPrx)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation FindObjectById.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocator.Response.FindAdapterById(ZeroC.Ice.Current,ZeroC.Ice.IObjectPrx)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation FindAdapterById.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocator.Response.GetRegistry(ZeroC.Ice.Current,ZeroC.Ice.ILocatorRegistryPrx)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation GetRegistry.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocator.Response.ResolveLocation(ZeroC.Ice.Current,System.Collections.Generic.IEnumerable{ZeroC.Ice.EndpointData})">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation ResolveLocation.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocator.Response.ResolveWellKnownProxy(ZeroC.Ice.Current,System.ValueTuple{System.Collections.Generic.IEnumerable{ZeroC.Ice.EndpointData},System.Collections.Generic.IEnumerable{System.String}}@)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation ResolveWellKnownProxy.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocator.FindObjectByIdAsync(ZeroC.Ice.Identity,System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Finds an object by identity and facet and returns a proxy that provides a location or endpoint(s) that can
            be used to reach the object using the ice1 protocol.</summary>
            <param name="id">The identity.</param>
            <param name="facet">The facet. A null value is equivalent to the empty string.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.Ice.ObjectNotFoundException">Thrown if an object with the requested identity and facet was not found. The
            caller should treat this exception like a null return value.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocator.FindAdapterByIdAsync(System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Finds an object adapter by id and returns a proxy that provides the object adapter's endpoint(s). This
            operation is for object adapters using the ice1 protocol.</summary>
            <param name="id">The adapter ID.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if an object adapter with this adapter ID was not found. The caller
            should treat this exception like a null return value.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocator.GetRegistryAsync(ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Gets the locator registry.</summary>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocator.ResolveLocationAsync(System.String[],ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Resolves the location of a proxy that uses the ice2 protocol.</summary>
            <param name="location">The location to resolve.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocator.ResolveWellKnownProxyAsync(ZeroC.Ice.Identity,System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Resolves the well-known object with the given identity and facet. This object must be reachable using the
            ice2 protocol.</summary>
            <param name="identity">The identity of the well-known Ice object.</param>
            <param name="facet">The facet of the well-known Ice object.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:ZeroC.Ice.IAsyncLocatorRegistry">
            <summary>Interface used to implement servants for Slice interface LocatorRegistry.
            A server application registers the endpoints of its indirect object adapters with the LocatorRegistry object.
            <seealso cref="T:ZeroC.Ice.ILocatorRegistryPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.IAsyncLocatorRegistry.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.IAsyncLocatorRegistry"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocatorRegistry.Request.RegisterAdapterEndpoints(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation RegisterAdapterEndpoints.</summary>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocatorRegistry.Request.SetAdapterDirectProxy(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation SetAdapterDirectProxy.</summary>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocatorRegistry.Request.SetReplicatedAdapterDirectProxy(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation SetReplicatedAdapterDirectProxy.</summary>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocatorRegistry.Request.SetServerProcessProxy(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation SetServerProcessProxy.</summary>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocatorRegistry.Request.UnregisterAdapterEndpoints(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation UnregisterAdapterEndpoints.</summary>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocatorRegistry.RegisterAdapterEndpointsAsync(System.String,System.String,ZeroC.Ice.EndpointData[],ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Registers the endpoints of an object adapter that uses the ice2 protocol.</summary>
            <param name="adapterId">The adapter ID.</param>
            <param name="replicaGroupId">The replica group ID. It is set to the empty string when the object adapter does not
            belong to a replica group.</param>
            <param name="endpoints">A sequence of one or more endpoints. The locator considers an object adapter to be active
            after it has registered its endpoints.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID and replica group ID (if applicable) was
            registered with the locator.</exceptions>
            <exceptions cref="T:ZeroC.Ice.InvalidArgumentException">Thrown if any of the provided arguments is invalid, such as an empty
            adapter ID, empty endpoint sequence or adapter ID and replica group ID are inconsistent.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocatorRegistry.SetAdapterDirectProxyAsync(System.String,ZeroC.Ice.IObjectPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Registers or unregisters the endpoints of an object adapter that uses the ice1 protocol.</summary>
            <param name="id">The adapter ID.</param>
            <param name="proxy">A dummy direct proxy created by the object adapter that provides the object adapter's
            endpoints. The locator considers an object adapter to be active after it has registered its endpoints. When
            proxy is null, the endpoints are unregistered and the locator considers the object adapter inactive.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.Ice.AdapterAlreadyActiveException">Thrown if an object adapter with the same adapter ID has already
            registered its endpoints.</exceptions>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID was registered with the locator.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocatorRegistry.SetReplicatedAdapterDirectProxyAsync(System.String,System.String,ZeroC.Ice.IObjectPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Registers or unregisters the endpoints of an object adapter that uses the ice1 protocol. This object adapter
            is member of a replica group.</summary>
            <param name="adapterId">The adapter ID.</param>
            <param name="replicaGroupId">The replica group ID.</param>
            <param name="proxy">A dummy direct proxy created by the object adapter that provides the object adapter's
            endpoints. The locator considers an object adapter to be active after it has registered its endpoints. When
            proxy is null, the endpoints are unregistered and the locator considers the object adapter inactive.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.Ice.AdapterAlreadyActiveException">Thrown if an object adapter with the same adapter ID has already</exceptions>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID was registered with the locator.</exceptions>
            <exceptions cref="T:ZeroC.Ice.InvalidReplicaGroupIdException">Thrown if the given replica group does not match the replica group
            associated with the adapter ID in the locator's database.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocatorRegistry.SetServerProcessProxyAsync(System.String,ZeroC.Ice.IProcessPrx,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Registers a proxy for a server's Process object.</summary>
            <param name="serverId">The server ID.</param>
            <param name="proxy">A proxy for the server's Process object.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.Ice.ServerNotFoundException">Thrown if the locator does not know a server with this server ID.</exceptions>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocatorRegistry.UnregisterAdapterEndpointsAsync(System.String,System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Unregisters the endpoints of an object adapter that uses the ice2 protocol, or does nothing if this object
            adapter is not active.</summary>
            <param name="adapterId">The adapter ID.</param>
            <param name="replicaGroupId">The replica group ID. It is set to the empty string when the object adapter does not
            belong to a replica group.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.Ice.AdapterNotFoundException">Thrown if the locator only allows registered object adapters to register
            their active endpoints and no object adapter with this adapter ID and replica group ID (if applicable) was
            registered with the locator.</exceptions>
            <exceptions cref="T:ZeroC.Ice.InvalidArgumentException">Thrown if any of the provided arguments is invalid.</exceptions>
        </member>
        <member name="T:ZeroC.Ice.IAsyncLocatorFinder">
            <summary>Interface used to implement servants for Slice interface LocatorFinder.
            This interface is implemented by services that implement the Ice::Locator interface, and is advertised as an Ice
            object with the identity `Ice/LocatorFinder'. This allows clients to retrieve the locator proxy with just the
            endpoint information of the service.
            <seealso cref="T:ZeroC.Ice.ILocatorFinderPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.IAsyncLocatorFinder.Response">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> factory method for each non-void remote operation
            defined in the <see cref="T:ZeroC.Ice.IAsyncLocatorFinder"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocatorFinder.Response.GetLocator(ZeroC.Ice.Current,ZeroC.Ice.ILocatorPrx)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation GetLocator.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.IAsyncLocatorFinder.GetLocatorAsync(ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Gets the locator proxy implemented by the service hosting this finder object. The proxy might point to
            several replicas.</summary>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:ZeroC.Ice.IProcessPrx">
             <summary>Proxy interface used to call remote Ice objects that implement Slice interface Process.
             An administrative interface for process management. Managed servers must
             implement this interface.
            
             A servant implementing this interface is a potential target
             for denial-of-service attacks, therefore proper security precautions
             should be taken. For example, the servant can use a UUID to make its
             identity harder to guess, and be registered in an object adapter with
             a secured endpoint.
             <seealso cref="T:ZeroC.Ice.IProcess"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.IProcessPrx.Request">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> factory method for each remote operation defined in <see cref="T:ZeroC.Ice.IProcessPrx"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.IProcessPrx.Request.Shutdown(ZeroC.Ice.IObjectPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for Shutdown operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.IProcessPrx.Request.WriteMessage(ZeroC.Ice.IObjectPrx,System.ValueTuple{System.String,System.Int32}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for WriteMessage operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.IProcessPrx.Shutdown(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Initiate a graceful shut-down.</summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.IProcessPrx.ShutdownAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Initiate a graceful shut-down.</summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.IProcessPrx.WriteMessage(System.String,System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Write a message on the process' stdout or stderr.</summary>
            <param name="message">The message.</param>
            <param name="fd">1 for stdout, 2 for stderr.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.IProcessPrx.WriteMessageAsync(System.String,System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Write a message on the process' stdout or stderr.</summary>
            <param name="message">The message.</param>
            <param name="fd">1 for stdout, 2 for stderr.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="F:ZeroC.Ice.IProcessPrx.Factory">
            <summary>Factory for <see cref="T:ZeroC.Ice.IProcessPrx"/> proxies.</summary>
        </member>
        <member name="F:ZeroC.Ice.IProcessPrx.IceReader">
            <summary>An <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.IProcessPrx"/> proxies.</summary>
        </member>
        <member name="M:ZeroC.Ice.IProcessPrx.Parse(System.String,ZeroC.Ice.Communicator)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.IProcessPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <returns>The new proxy</returns>
            <exception cref="T:System.FormatException"><c>s</c> does not contain a valid string representation of a proxy.</exception>
        </member>
        <member name="M:ZeroC.Ice.IProcessPrx.TryParse(System.String,ZeroC.Ice.Communicator,ZeroC.Ice.IProcessPrx@)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.IProcessPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <param name="prx">When this method returns it contains the new proxy, if the conversion succeeded or null if the conversion failed.</param>
            <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ZeroC.Ice.IProcess">
             <summary>Interface used to implement servants for Slice interface Process.
             An administrative interface for process management. Managed servers must
             implement this interface.
            
             A servant implementing this interface is a potential target
             for denial-of-service attacks, therefore proper security precautions
             should be taken. For example, the servant can use a UUID to make its
             identity harder to guess, and be registered in an object adapter with
             a secured endpoint.
             <seealso cref="T:ZeroC.Ice.IProcessPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.IProcess.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.IProcess"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.IProcess.Request.WriteMessage(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation WriteMessage.</summary>
        </member>
        <member name="M:ZeroC.Ice.IProcess.Shutdown(ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Initiate a graceful shut-down.</summary>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.IProcess.WriteMessage(System.String,System.Int32,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Write a message on the process' stdout or stderr.</summary>
            <param name="message">The message.</param>
            <param name="fd">1 for stdout, 2 for stderr.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="T:ZeroC.Ice.IAsyncProcess">
             <summary>Interface used to implement servants for Slice interface Process.
             An administrative interface for process management. Managed servers must
             implement this interface.
            
             A servant implementing this interface is a potential target
             for denial-of-service attacks, therefore proper security precautions
             should be taken. For example, the servant can use a UUID to make its
             identity harder to guess, and be registered in an object adapter with
             a secured endpoint.
             <seealso cref="T:ZeroC.Ice.IProcessPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.IAsyncProcess.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.Ice.IAsyncProcess"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.IAsyncProcess.Request.WriteMessage(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation WriteMessage.</summary>
        </member>
        <member name="M:ZeroC.Ice.IAsyncProcess.ShutdownAsync(ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Initiate a graceful shut-down.</summary>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.IAsyncProcess.WriteMessageAsync(System.String,System.Int32,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Write a message on the process' stdout or stderr.</summary>
            <param name="message">The message.</param>
            <param name="fd">1 for stdout, 2 for stderr.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:ZeroC.Ice.Protocol">
            <summary>Represents a version of the Ice protocol.</summary>
        </member>
        <member name="F:ZeroC.Ice.Protocol.Ice1">
            <summary>The ice1 protocol supported by all Ice versions since Ice 1.0.</summary>
        </member>
        <member name="F:ZeroC.Ice.Protocol.Ice2">
            <summary>The ice2 protocol introduced in Ice 4.0.</summary>
        </member>
        <member name="T:ZeroC.Ice.ProtocolHelper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.Protocol"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.InvocationMode">
            <summary>The InvocationMode is carried by proxies that use the ice1 protocol, and it specifies the behavior when sending
            a request using such a proxy.</summary>
        </member>
        <member name="F:ZeroC.Ice.InvocationMode.Twoway">
            <summary>This is the default invocation mode; a request using this mode always expects a response.</summary>
        </member>
        <member name="F:ZeroC.Ice.InvocationMode.Oneway">
            <summary>A request using oneway mode returns control to the application code as soon as it has been accepted by the
            local transport.</summary>
        </member>
        <member name="F:ZeroC.Ice.InvocationMode.BatchOneway">
            <summary>The batch oneway invocation mode is no longer supported, it was supported with Ice versions up to 3.7.</summary>
        </member>
        <member name="F:ZeroC.Ice.InvocationMode.Datagram">
            <summary>Invocation mode used by datagram based transports.</summary>
        </member>
        <member name="F:ZeroC.Ice.InvocationMode.BatchDatagram">
            <summary>The batch datagram invocation mode is no longer supported, it was supported with Ice versions up to 3.7.</summary>
        </member>
        <member name="T:ZeroC.Ice.InvocationModeHelper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.InvocationMode"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.ProxyData11">
            <summary>With the 1.1 encoding, a proxy is encoded as a kind of discriminated union with:
            - Identity
            - if Identity is not the null identity:
            - ProxyData11
            - a sequence of endpoints that can be empty
            - an adapter ID string (renamed location in Ice 4.0) present only when the sequence of endpoints is empty</summary>
        </member>
        <member name="F:ZeroC.Ice.ProxyData11.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.ProxyData11"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.ProxyData11.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.Ice.ProxyData11"/> instances.</summary>
        </member>
        <member name="M:ZeroC.Ice.ProxyData11.op_Equality(ZeroC.Ice.ProxyData11,ZeroC.Ice.ProxyData11)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.ProxyData11.op_Inequality(ZeroC.Ice.ProxyData11,ZeroC.Ice.ProxyData11)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.ProxyData11.#ctor(System.String[],ZeroC.Ice.InvocationMode,System.Boolean,ZeroC.Ice.Protocol,System.Byte,ZeroC.Ice.Encoding)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.ProxyData11"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.ProxyData11.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.ProxyData11"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.Ice.ProxyData11.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.ProxyData11.Equals(ZeroC.Ice.ProxyData11)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.ProxyData11.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.ProxyData11.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.ProxyKind20">
            <summary>The kind of proxy being marshaled/unmarshaled (2.0 encoding only).</summary>
        </member>
        <member name="F:ZeroC.Ice.ProxyKind20.Null">
            <summary>This optional proxy is null.</summary>
        </member>
        <member name="F:ZeroC.Ice.ProxyKind20.Direct">
            <summary>A proxy with one or more endpoints; its URI scheme is ice+transport, where transport corresponds to the
            transport of the first endpoint.</summary>
        </member>
        <member name="F:ZeroC.Ice.ProxyKind20.Indirect">
            <summary>A proxy with no endpoint; its URI scheme is ice.</summary>
        </member>
        <member name="F:ZeroC.Ice.ProxyKind20.IndirectRelative">
            <summary>An indirect proxy marked relative.</summary>
        </member>
        <member name="T:ZeroC.Ice.ProxyKind20Helper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.ProxyKind20"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.ProxyData20">
            <summary>With the 2.0 encoding, a proxy is encoded as a discrimated union with:
            - ProxyKind20 (the discriminant)
            - if ProxyKind20 is not Null:
            - ProxyData20
            - If ProxyKind20 is Direct, a sequence of one or more endpoints</summary>
        </member>
        <member name="F:ZeroC.Ice.ProxyData20.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.ProxyData20"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.ProxyData20.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.Ice.ProxyData20"/> instances.</summary>
        </member>
        <member name="M:ZeroC.Ice.ProxyData20.op_Equality(ZeroC.Ice.ProxyData20,ZeroC.Ice.ProxyData20)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.ProxyData20.op_Inequality(ZeroC.Ice.ProxyData20,ZeroC.Ice.ProxyData20)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.ProxyData20.#ctor(ZeroC.Ice.Identity,System.Nullable{ZeroC.Ice.Protocol},System.Nullable{ZeroC.Ice.Encoding},System.String[],System.Nullable{ZeroC.Ice.InvocationMode},System.String)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.ProxyData20"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.ProxyData20.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.ProxyData20"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.Ice.ProxyData20.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.ProxyData20.Equals(ZeroC.Ice.ProxyData20)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.ProxyData20.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.ProxyData20.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.Retryable">
            <summary>The RetryAbility is carried by remote exceptions to indicate the ability for retrying</summary>
        </member>
        <member name="F:ZeroC.Ice.Retryable.No">
            <summary>do not retry</summary>
        </member>
        <member name="F:ZeroC.Ice.Retryable.AfterDelay">
            <summary>retry same endpoint after delay ms</summary>
        </member>
        <member name="F:ZeroC.Ice.Retryable.OtherReplica">
            <summary>retry another replica known to the caller (if any)</summary>
        </member>
        <member name="T:ZeroC.Ice.RetryableHelper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.Retryable"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Slic.ParameterKey">
            <summary>The keys for supported Slic connection parameters.</summary>
        </member>
        <member name="T:ZeroC.Ice.Slic.ParameterKeyHelper">
            <summary>Helper class for marshaling and unmarshaling <see cref="T:ZeroC.Ice.Slic.ParameterKey"/>.</summary>
        </member>
        <member name="T:ZeroC.Ice.Slic.InitializeHeaderBody">
            <summary>The header of the Slic initialize frame body. This header is followed by connection parameters encoded
            as a binary context.</summary>
        </member>
        <member name="F:ZeroC.Ice.Slic.InitializeHeaderBody.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Slic.InitializeHeaderBody"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Slic.InitializeHeaderBody.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.Ice.Slic.InitializeHeaderBody"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Slic.InitializeHeaderBody.SlicVersion">
            <summary>The supported Slic version.</summary>
        </member>
        <member name="F:ZeroC.Ice.Slic.InitializeHeaderBody.ApplicationProtocolName">
            <summary>The application protocol name.</summary>
        </member>
        <member name="M:ZeroC.Ice.Slic.InitializeHeaderBody.op_Equality(ZeroC.Ice.Slic.InitializeHeaderBody,ZeroC.Ice.Slic.InitializeHeaderBody)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Slic.InitializeHeaderBody.op_Inequality(ZeroC.Ice.Slic.InitializeHeaderBody,ZeroC.Ice.Slic.InitializeHeaderBody)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Slic.InitializeHeaderBody.#ctor(System.UInt32,System.String)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Slic.InitializeHeaderBody"/>.</summary>
            <param name="slicVersion">The supported Slic version.</param>
            <param name="applicationProtocolName">The application protocol name.</param>
        </member>
        <member name="M:ZeroC.Ice.Slic.InitializeHeaderBody.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Slic.InitializeHeaderBody"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.Ice.Slic.InitializeHeaderBody.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Slic.InitializeHeaderBody.Equals(ZeroC.Ice.Slic.InitializeHeaderBody)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Slic.InitializeHeaderBody.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Slic.InitializeHeaderBody.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.Slic.VersionBody">
            <summary>The body of a Slic version frame. This frame is sent in response to an initialize frame if the Slic version
            from the initialize frame is not supported by the receiver. Upon receiving the Version frame the receiver
            should send back a new Initialize frame with a version matching one of the versions provided by the Version
            frame body.</summary>
        </member>
        <member name="F:ZeroC.Ice.Slic.VersionBody.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Slic.VersionBody"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Slic.VersionBody.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.Ice.Slic.VersionBody"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Slic.VersionBody.Versions">
            <summary>The supported Slic versions.</summary>
        </member>
        <member name="M:ZeroC.Ice.Slic.VersionBody.op_Equality(ZeroC.Ice.Slic.VersionBody,ZeroC.Ice.Slic.VersionBody)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Slic.VersionBody.op_Inequality(ZeroC.Ice.Slic.VersionBody,ZeroC.Ice.Slic.VersionBody)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Slic.VersionBody.#ctor(System.UInt32[])">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Slic.VersionBody"/>.</summary>
            <param name="versions">The supported Slic versions.</param>
        </member>
        <member name="M:ZeroC.Ice.Slic.VersionBody.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Slic.VersionBody"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.Ice.Slic.VersionBody.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Slic.VersionBody.Equals(ZeroC.Ice.Slic.VersionBody)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Slic.VersionBody.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Slic.VersionBody.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.Slic.StreamResetBody">
            <summary>The body of the Stream reset frame. This frame is sent to notify the peer that sender is no longer
            interested in the stream. The error code is application protocol specific.</summary>
        </member>
        <member name="F:ZeroC.Ice.Slic.StreamResetBody.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.Slic.StreamResetBody"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Slic.StreamResetBody.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.Ice.Slic.StreamResetBody"/> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.Slic.StreamResetBody.ApplicationProtocolErrorCode">
            <summary>The application protocol error code indicating the reason of the reset.</summary>
        </member>
        <member name="M:ZeroC.Ice.Slic.StreamResetBody.op_Equality(ZeroC.Ice.Slic.StreamResetBody,ZeroC.Ice.Slic.StreamResetBody)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Slic.StreamResetBody.op_Inequality(ZeroC.Ice.Slic.StreamResetBody,ZeroC.Ice.Slic.StreamResetBody)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Slic.StreamResetBody.#ctor(System.UInt64)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Slic.StreamResetBody"/>.</summary>
            <param name="applicationProtocolErrorCode">The application protocol error code indicating the reason of the reset.</param>
        </member>
        <member name="M:ZeroC.Ice.Slic.StreamResetBody.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.Slic.StreamResetBody"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.Ice.Slic.StreamResetBody.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Slic.StreamResetBody.Equals(ZeroC.Ice.Slic.StreamResetBody)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Slic.StreamResetBody.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Slic.StreamResetBody.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.WebSocketException">
            <summary>This exception reports a websocket protocol error.</summary>
        </member>
        <member name="M:ZeroC.Ice.WebSocketException.#ctor(System.String)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.WebSocketException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ZeroC.Ice.HttpParser.IsCompleteMessage(System.ReadOnlySpan{System.Byte})">
            <summary>Check if the buffer contains a complete HTTP frame, if the buffer contains a complete HTTP frame
            it returns the end index of the HTTP frame, otherwise it returns -1.</summary>
            <param name="buffer">The buffer to check for HTTP frames.</param>
            <returns>The last index of the HTTP frame if the buffer contains a complete HTTP frame, otherwise -1.
            </returns>
        </member>
        <member name="T:ZeroC.Ice.IAcceptor">
            <summary>An acceptor listens and accepts incoming connection requests from clients. It creates a connection
            which is used to exchange data with the remote peer.</summary>
        </member>
        <member name="P:ZeroC.Ice.IAcceptor.Endpoint">
            <summary>The listening endpoint. The acceptor endpoint might be different from the endpoint used
            to create the acceptor if for example the binding of server socket assigned a port.</summary>
            <return>The bound endpoint.</return>
        </member>
        <member name="M:ZeroC.Ice.IAcceptor.AcceptAsync">
            <summary>Accepts a new connection.</summary>
            <return>The accepted connection.</return>
        </member>
        <member name="M:ZeroC.Ice.IAcceptor.ToDetailedString">
            <summary>Get a detailed description of the acceptor.</summary>
            <return>The detailed description.</return>
        </member>
        <member name="M:ZeroC.Ice.Ice1Definitions.GetEmptyArgsPayload(ZeroC.Ice.Encoding)">
            <summary>Returns the payload of an ice1 request frame for an operation with no argument.</summary>
            <param name="encoding">The encoding of this empty args payload. The header of this payload is always encoded
            using ice1's header encoding (1.1).</param>
            <returns>The payload.</returns>
            <remarks>The 2.0 encoding has an extra byte for the compression status.</remarks>
        </member>
        <member name="M:ZeroC.Ice.Ice1Definitions.GetVoidReturnValuePayload(ZeroC.Ice.Encoding)">
            <summary>Returns the payload of an ice1 response frame for an operation returning void.</summary>
            <param name="encoding">The encoding of this void return. The header of this payload is always encoded
            using ice1's header encoding (1.1).</param>
            <returns>The payload.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice1Definitions.ReadIce1Facet(ZeroC.Ice.InputStream)">
            <summary>Reads a facet in the old ice1 format from the stream.</summary>
            <param name="istr">The stream to read from.</param>
            <returns>The facet read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice1Definitions.ReadIce1SystemException(ZeroC.Ice.InputStream,ZeroC.Ice.ReplyStatus)">
            <summary>Reads an ice1 system exception encoded based on the provided reply status.</summary>
            <param name="istr">The stream to read from.</param>
            <param name="replyStatus">The reply status.</param>
            <returns>The exception read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice1Definitions.WriteIce1Facet(ZeroC.Ice.OutputStream,System.String)">
            <summary>Writes a facet as a facet path.</summary>
            <param name="ostr">The stream.</param>
            <param name="facet">The facet to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.Ice1Definitions.WriteIce1RequestHeader(ZeroC.Ice.OutputStream,ZeroC.Ice.Identity,System.String,System.String,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>Writes a request header without constructing an Ice1RequestHeader instance. This implementation is
            slightly more efficient than the generated code because it avoids the allocation of a  string[] to write the
            facet and the allocation of a Dictionary{string, string} to write the context.</summary>
        </member>
        <member name="T:ZeroC.Ice.Ice1NetworkSocket">
            <summary>The Ice1 network socket implements a multi-stream transport using the Ice1 protocol. A new incoming
            stream is created for each incoming Ice1 request and an outgoing stream is created for outgoing requests.
            The streams created by the Ice1 network socket are always finished once the request or response frames are
            sent or received. Data streaming is not supported. Initialize or GoAway frames sent over the control streams
            are translated to connection validation or close connection Ice1 frames.</summary>
        </member>
        <member name="T:ZeroC.Ice.Ice1NetworkSocketStream">
            <summary>The Ice1NetworkSocketStream class provides a stream implementation of the Ice1NetworkSocketSocket and
            Ice1 protocol.</summary>
        </member>
        <member name="T:ZeroC.Ice.Ice1Parser">
            <summary>Provides helper methods to parse proxy and endpoint strings in the ice1 format.</summary>
        </member>
        <member name="M:ZeroC.Ice.Ice1Parser.ParseEndpoints(System.String,ZeroC.Ice.Communicator,System.Boolean)">
            <summary>Parses a string that represents one or more endpoints.</summary>
            <param name="endpointString">The string to parse.</param>
            <param name="communicator">The communicator.</param>
            <param name="oaEndpoints">When true (the default), endpointString corresponds to the Endpoints property of
            an object adapter. Otherwise, false.</param>
            <returns>The list of endpoints.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice1Parser.ParseIdentity(System.String)">
            <summary>Converts the string representation of an identity to its equivalent Identity struct.</summary>
            <param name="s">A string [escapedCategory/]escapedName.</param>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
            <returns>An Identity equivalent to the identity contained in path.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice1Parser.ParseProxy(System.String,ZeroC.Ice.Communicator)">
            <summary>Parses a proxy string in the ice1 format.</summary>
            <param name="s">The string to parse.</param>
            <param name="communicator">The communicator.</param>
            <returns>The components of the proxy.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice1Parser.ParseProxyOptions(System.String,ZeroC.Ice.Communicator)">
            <summary>Parses the value of the ProxyOptions property of an object adapter.</summary>
            <param name="name">The name of the object adapter.</param>
            <param name="communicator">The communicator.</param>
            <returns>The invocation mode from ProxyOptions, or InvocationMode.Twoway if ProxyOptions is not set.
            </returns>
        </member>
        <member name="M:ZeroC.Ice.Ice1Parser.CreateEndpoint(System.String,ZeroC.Ice.Communicator,System.Boolean)">
            <summary>Creates an endpoint from a string in the ice1 format.</summary>
            <param name="endpointString">The string parsed by this method.</param>
            <param name="communicator">The communicator of the enclosing proxy or object adapter.</param>
            <param name="oaEndpoint">When true, endpointString represents an object adapter's endpoint configuration;
            when false, endpointString represents a proxy endpoint.</param>
            <returns>The new endpoint.</returns>
            <exception cref="T:System.FormatException">Thrown when endpointString cannot be parsed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the transport specified in endpointString does not
            the ice1 protocol.</exception>
        </member>
        <member name="M:ZeroC.Ice.Ice2Definitions.GetEmptyArgsPayload(ZeroC.Ice.Encoding)">
            <summary>Returns the payload of an ice2 request frame for an operation with no argument.</summary>
            <param name="encoding">The encoding of this empty args payload. The header of this payload is always encoded
            using ice2's header encoding (2.0).</param>
            <returns>The payload.</returns>
            <remarks>The 2.0 encoding has an extra byte for the compression status.</remarks>
        </member>
        <member name="M:ZeroC.Ice.Ice2Definitions.GetVoidReturnValuePayload(ZeroC.Ice.Encoding)">
            <summary>Returns the payload of an ice2 response frame for an operation returning void.</summary>
            <param name="encoding">The encoding of this void return. The header of this payload is always encoded
            using ice2's header encoding (2.0).</param>
            <returns>The payload.</returns>
        </member>
        <member name="M:ZeroC.Ice.Ice2Definitions.WriteIce2RequestHeaderBody(ZeroC.Ice.OutputStream,ZeroC.Ice.Identity,System.String,System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Boolean,System.DateTime,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>Writes a request header body This implementation is slightly more efficient than the generated code
            because it avoids the allocation of a string[] to write the location.</summary>
        </member>
        <member name="T:ZeroC.Ice.ToStringMode">
            <summary>The output mode or format for <see cref="M:ZeroC.Ice.Identity.ToString(ZeroC.Ice.ToStringMode)"/>.</summary>
        </member>
        <member name="F:ZeroC.Ice.ToStringMode.Unicode">
            <summary>Characters with ordinal values greater than 127 are kept as-is in the resulting string.
            Non-printable ASCII characters with ordinal values 127 and below are encoded as \\t, \\n (etc.). This
            corresponds to the default mode with Ice 3.7.</summary>
        </member>
        <member name="F:ZeroC.Ice.ToStringMode.ASCII">
            <summary>Characters with ordinal values greater than 127 are encoded as universal character names in
            the resulting string: \\unnnn for BMP characters and \\Unnnnnnnn for non-BMP characters.
            Non-printable ASCII characters with ordinal values 127 and below are encoded as \\t, \\n (etc.)
            or \\unnnn. This is an optional mode provided by Ice 3.7.</summary>
        </member>
        <member name="F:ZeroC.Ice.ToStringMode.Compat">
            <summary>Characters with ordinal values greater than 127 are encoded as a sequence of UTF-8 bytes using
            octal escapes. Characters with ordinal values 127 and below are encoded as \\t, \\n (etc.) or
            an octal escape. This is the format used by Ice 3.6 and earlier Ice versions.</summary>
        </member>
        <member name="T:ZeroC.Ice.ILogger">
            <summary>The Ice logger. Applications can provide their own logger by implementing this interface and
            installing it in a communicator.</summary>
        </member>
        <member name="P:ZeroC.Ice.ILogger.Prefix">
            <summary>Gets the logger's prefix.</summary>
        </member>
        <member name="M:ZeroC.Ice.ILogger.CloneWithPrefix(System.String)">
            <summary>Returns a clone of the logger with a new prefix.</summary>
            <param name="prefix">The new prefix for the logger.</param>
            <returns>A logger instance.</returns>
        </member>
        <member name="M:ZeroC.Ice.ILogger.Error(System.String)">
            <summary>Log an error message.</summary>
            <param name="message">The error message to log.</param>
        </member>
        <member name="M:ZeroC.Ice.ILogger.Print(System.String)">
            <summary>Print a message, the message is printed literally, without any decorations such as executable
            name or time stamp.</summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:ZeroC.Ice.ILogger.Trace(System.String,System.String)">
            <summary>Log a trace message.</summary>
            <param name="category">The trace category.</param>
            <param name="message">The trace message to log.</param>
        </member>
        <member name="M:ZeroC.Ice.ILogger.Warning(System.String)">
            <summary>Log a warning message.</summary>
            <param name="message">The warning message to log.</param>
        </member>
        <member name="T:ZeroC.Ice.IncomingFrame">
            <summary>Base class for incoming frames.</summary>
        </member>
        <member name="P:ZeroC.Ice.IncomingFrame.BinaryContext">
            <summary>Returns the binary context of this frame.</summary>
        </member>
        <member name="P:ZeroC.Ice.IncomingFrame.HasCompressedPayload">
            <summary>Returns true when the payload is compressed; otherwise, returns false.</summary>
        </member>
        <member name="P:ZeroC.Ice.IncomingFrame.Payload">
            <summary>The payload of this frame. The bytes inside the data should not be written to;
            they are writable because of the <see cref="T:System.Net.Sockets.Socket"/> methods for sending.</summary>
        </member>
        <member name="P:ZeroC.Ice.IncomingFrame.PayloadCompressionFormat">
            <summary>Returns the payload's compression format.</summary>
        </member>
        <member name="P:ZeroC.Ice.IncomingFrame.PayloadSize">
            <summary>Returns the number of bytes in the payload.</summary>
            <remarks>Provided for consistency with <see cref="P:ZeroC.Ice.OutgoingFrame.PayloadSize"/>.</remarks>
        </member>
        <member name="P:ZeroC.Ice.IncomingFrame.PayloadEncoding">
            <summary>Returns the encoding of the payload of this frame.</summary>
            <remarks>The header of the frame is always encoded using the frame protocol's encoding.</remarks>
        </member>
        <member name="P:ZeroC.Ice.IncomingFrame.Protocol">
            <summary>The Ice protocol of this frame.</summary>
        </member>
        <member name="M:ZeroC.Ice.IncomingFrame.DecompressPayload">
            <summary>Decompresses the encapsulation payload if it is compressed. Compressed encapsulations are only
            supported with the 2.0 encoding.</summary>
        </member>
        <member name="M:ZeroC.Ice.IncomingFrame.#ctor(ZeroC.Ice.Protocol,System.Int32)">
            <summary>Constructs a new <see cref="T:ZeroC.Ice.IncomingFrame"/>.</summary>
            <param name="protocol">The frame protocol.</param>
            <param name="maxSize">The maximum payload size, checked during decompression.</param>
        </member>
        <member name="T:ZeroC.Ice.IncomingRequestFrame">
            <summary>Represents a request protocol frame received by the application.</summary>
        </member>
        <member name="P:ZeroC.Ice.IncomingRequestFrame.BinaryContext">
            <inheritdoc/>
        </member>
        <member name="P:ZeroC.Ice.IncomingRequestFrame.Context">
            <summary>The request context.</summary>
        </member>
        <member name="P:ZeroC.Ice.IncomingRequestFrame.Deadline">
            <summary>The deadline corresponds to the request's expiration time. Once the deadline is reached, the
            caller is no longer interested in the response and discards the request. The server-side runtime does not
            enforce this deadline - it's provided "for information" to the application. The Ice client runtime sets
            this deadline automatically using the proxy's invocation timeout and sends it with ice2 requests but not
            with ice1 requests. As a result, the deadline for an ice1 request is always <see cref="F:System.DateTime.MaxValue"/>
            on the server-side even though the invocation timeout is usually not infinite.</summary>
        </member>
        <member name="P:ZeroC.Ice.IncomingRequestFrame.Facet">
            <summary>The facet of the target Ice object.</summary>
        </member>
        <member name="P:ZeroC.Ice.IncomingRequestFrame.Identity">
            <summary>The identity of the target Ice object.</summary>
        </member>
        <member name="P:ZeroC.Ice.IncomingRequestFrame.IsIdempotent">
            <summary>When true, the operation is idempotent.</summary>
        </member>
        <member name="P:ZeroC.Ice.IncomingRequestFrame.Location">
            <summary>The location of the target Ice object. With ice1, it is always empty.</summary>
        </member>
        <member name="P:ZeroC.Ice.IncomingRequestFrame.Operation">
            <summary>The operation called on the Ice object.</summary>
        </member>
        <member name="P:ZeroC.Ice.IncomingRequestFrame.PayloadEncoding">
            <inheritdoc/>
        </member>
        <member name="P:ZeroC.Ice.IncomingRequestFrame.Priority">
            <summary>The priority of this request.</summary>
        </member>
        <member name="M:ZeroC.Ice.IncomingRequestFrame.#ctor(ZeroC.Ice.Protocol,System.ArraySegment{System.Byte},System.Int32)">
            <summary>Constructs an incoming request frame.</summary>
            <param name="protocol">The Ice protocol.</param>
            <param name="data">The frame data as an array segment.</param>
            <param name="maxSize">The maximum payload size, checked during decompression.</param>
        </member>
        <member name="M:ZeroC.Ice.IncomingRequestFrame.Dispose">
            <summary>Releases resources used by the request frame.</summary>
        </member>
        <member name="M:ZeroC.Ice.IncomingRequestFrame.ReadEmptyArgs">
            <summary>Reads the arguments from the request and makes sure this request carries no argument or only
            unknown tagged arguments.</summary>
        </member>
        <member name="M:ZeroC.Ice.IncomingRequestFrame.ReadArgs``1(ZeroC.Ice.Connection,ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads the arguments from a request.</summary>
            <paramtype name="T">The type of the arguments.</paramtype>
            <param name="connection">The current connection.</param>
            <param name="reader">The delegate used to read the arguments.</param>
            <returns>The request arguments.</returns>
        </member>
        <member name="M:ZeroC.Ice.IncomingRequestFrame.ReadArgs``1(System.Func{ZeroC.Ice.SocketStream,``0})">
            <summary>Reads a single stream argument from the request.</summary>
            <param name="reader">The delegate used to read the argument.</param>
            <returns>The request argument.</returns>
        </member>
        <member name="M:ZeroC.Ice.IncomingRequestFrame.ReadArgs``1(ZeroC.Ice.Connection,ZeroC.Ice.InputStreamReaderWithStreamable{``0})">
            <summary>Reads the arguments from a request. The arguments include a stream argument.</summary>
            <paramtype name="T">The type of the arguments.</paramtype>
            <param name="connection">The current connection.</param>
            <param name="reader">The delegate used to read the arguments.</param>
            <returns>The request arguments.</returns>
        </member>
        <member name="M:ZeroC.Ice.IncomingRequestFrame.#ctor(ZeroC.Ice.Protocol,System.ArraySegment{System.Byte},System.Int32,ZeroC.Ice.SocketStream)">
            <summary>Constructs an incoming request frame.</summary>
            <param name="protocol">The Ice protocol.</param>
            <param name="data">The frame data as an array segment.</param>
            <param name="maxSize">The maximum payload size, checked during decompression.</param>
            <param name="socketStream">The optional socket stream. The stream is non-null if there's still data to
            read on the stream after the reading the request frame.</param>
        </member>
        <member name="M:ZeroC.Ice.IncomingRequestFrame.#ctor(ZeroC.Ice.OutgoingRequestFrame)">
            <summary>Constructs an incoming request frame from an outgoing request frame. Used for colocated calls.
            </summary>
            <param name="request">The outgoing request frame.</param>
        </member>
        <member name="T:ZeroC.Ice.IncomingResponseFrame">
            <summary>Represents a response protocol frame received by the application.</summary>
        </member>
        <member name="P:ZeroC.Ice.IncomingResponseFrame.BinaryContext">
            <inheritdoc/>
        </member>
        <member name="P:ZeroC.Ice.IncomingResponseFrame.PayloadEncoding">
            <inheritdoc/>
        </member>
        <member name="P:ZeroC.Ice.IncomingResponseFrame.ResultType">
            <summary>The <see cref="T:ZeroC.Ice.ResultType"/> of this response frame.</summary>
        </member>
        <member name="M:ZeroC.Ice.IncomingResponseFrame.#ctor(ZeroC.Ice.Protocol,System.ArraySegment{System.Byte},System.Int32)">
            <summary>Constructs an incoming response frame.</summary>
            <param name="protocol">The Ice protocol of this frame.</param>
            <param name="data">The frame data as an array segment.</param>
            <param name="maxSize">The maximum payload size, checked during decompress.</param>
        </member>
        <member name="M:ZeroC.Ice.IncomingResponseFrame.Dispose">
            <summary>Releases resources used by the response frame.</summary>
        </member>
        <member name="M:ZeroC.Ice.IncomingResponseFrame.ReadReturnValue``1(ZeroC.Ice.IObjectPrx,ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads the return value. If this response frame carries a failure, reads and throws this exception.
            </summary>
            <paramtype name="T">The type of the return value.</paramtype>
            <param name="proxy">The proxy used to send the request. <c>proxy</c> is used to read relative proxies.
            </param>
            <param name="reader">An input stream reader used to read the frame return value, when the frame
            return value contain multiple values the reader must use a tuple to return the values.</param>
            <returns>The frame return value.</returns>
        </member>
        <member name="M:ZeroC.Ice.IncomingResponseFrame.ReadReturnValue``1(ZeroC.Ice.IObjectPrx,ZeroC.Ice.InputStreamReaderWithStreamable{``0})">
            <summary>Reads the return value which contains a stream return value. If this response frame carries a
            failure, reads and throws this exception.</summary>
            <paramtype name="T">The type of the return value.</paramtype>
            <param name="proxy">The proxy used to send the request. <c>proxy</c> is used to read relative proxies.
            </param>
            <param name="reader">A reader used to read the frame return value, when the frame return value contain
            multiple values the reader must use a tuple to return the values.</param>
            <returns>The frame return value.</returns>
        </member>
        <member name="M:ZeroC.Ice.IncomingResponseFrame.ReadReturnValue``1(ZeroC.Ice.IObjectPrx,System.Func{ZeroC.Ice.SocketStream,``0})">
            <summary>Reads the return value which is a stream return value only. If this response frame carries a
            failure, reads and throws this exception.</summary>
            <paramtype name="T">The type of the return value.</paramtype>
            <param name="proxy">The proxy used to send the request. <c>proxy</c> is used to read relative proxies.
            </param>
            <param name="reader">A reader used to read the frame return value.</param>
            <returns>The frame return value.</returns>
        </member>
        <member name="M:ZeroC.Ice.IncomingResponseFrame.ReadVoidReturnValue(ZeroC.Ice.IObjectPrx)">
            <summary>Reads the return value and makes sure this return value is empty (void) or has only unknown tagged
            members. If this response frame carries a failure, reads and throws this exception.</summary>
            <param name="proxy">The proxy used to send the request. <c>proxy</c> is used to read relative proxies.
            </param>
        </member>
        <member name="M:ZeroC.Ice.IncomingResponseFrame.WithVoidReturnValue(ZeroC.Ice.Protocol,ZeroC.Ice.Encoding)">
            <summary>Returns an <see cref="T:ZeroC.Ice.IncomingResponseFrame"/> that represents a oneway pseudo response.</summary>
        </member>
        <member name="M:ZeroC.Ice.IncomingResponseFrame.#ctor(ZeroC.Ice.Protocol,System.ArraySegment{System.Byte},System.Int32,ZeroC.Ice.SocketStream)">
            <summary>Constructs an incoming response frame.</summary>
            <param name="protocol">The Ice protocol of this frame.</param>
            <param name="data">The frame data as an array segment.</param>
            <param name="maxSize">The maximum payload size, checked during decompress.</param>
            <param name="socketStream">The optional socket stream. The stream is non-null if there's still data to
            read on the stream after the reading the response frame.</param>
        </member>
        <member name="M:ZeroC.Ice.IncomingResponseFrame.#ctor(ZeroC.Ice.OutgoingResponseFrame)">
            <summary>Constructs an incoming response frame from an outgoing response frame. Used for colocated calls.
            </summary>
            <param name="response">The outgoing response frame.</param>
        </member>
        <member name="T:ZeroC.Ice.InputStream">
            <summary>Reads a byte buffer encoded using the Ice encoding.</summary>
        </member>
        <member name="M:ZeroC.Ice.InputStream.IceEndSlice">
            <summary>Tells the InputStream the end of a class or exception slice was reached. This is an Ice-internal
            method marked public because it's called by the generated code.</summary>
        </member>
        <member name="M:ZeroC.Ice.InputStream.IceStartFirstSlice">
            <summary>Starts reading the first slice of a class or exception. This is an Ice-internal method marked
            public because it's called by the generated code.</summary>
            <returns>The sliced-off slices, if any.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.IceStartNextSlice">
            <summary>Starts reading a base slice of a class instance or remote exception (any slice except the first
            slice). This is an Ice-internal method marked public because it's called by the generated code.</summary>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadClass``1(System.String)">
            <summary>Reads a class instance from the stream.</summary>
            <param name="formalTypeId">The type ID of the formal type of the parameter or data member being read.
            It's T.IceTypeId for generated classes. Use null when the type of the parameter/data member is AnyClass.
            </param>
            <returns>The class instance read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadException">
            <summary>Reads a remote exception from the stream.</summary>
            <returns>The remote exception.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadNullableClass``1(System.String)">
            <summary>Reads a nullable class instance from the stream.</summary>
            <param name="formalTypeId">The type ID of the formal type of the parameter or data member being read.
            Use null when the type of the parameter/data member is AnyClass.</param>
            <returns>The class instance read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadAnyClass(System.String)">
            <summary>Reads a class instance from the stream.</summary>
            <param name="formalTypeId">The type ID of the formal type of the parameter or data member being read.
            </param>
            <returns>The class instance read from the stream. Can be null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadFirstSliceHeaderIntoCurrent20">
            <summary>Reads the header of the first (and current) slice of a class/exception instance into _current.
            </summary>
            <returns>Null when no type ID was encoded (because of formal type optimization) or a non-empty array of type
            IDs. With the compact format, this array contains a single element. Also returns an error message for remote
            exceptions.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadIndirectionTable">
            <summary>Reads an indirection table from the stream, without updating _current.</summary>
            <returns>The indirection table.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadIndirectionTableIntoCurrent">
            <summary>Reads the indirection table into _current's fields if there is an indirection table.
            Precondition: called after reading the header of the current slice. This method does not change _pos.
            </summary>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadInstance(System.Int32,System.String)">
            <summary>Reads a class instance from the stream.</summary>
            <param name="index">The index of the class instance. If greater than 1, it's a reference to a previously
            seen class; if 1, the class's bytes are next on the stream. Cannot be 0 or less.</param>
            <param name="formalTypeId">The type ID of the formal type of the parameter or data member being read.
            </param>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadNextSliceHeaderIntoCurrent">
            <summary>Reads the header of the current slice into _current; this method is used when the current slice
            is not the first (most derived) slice.</summary>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadSliceHeaderIntoCurrent11">
            <summary>Reads the header of the current slice into _current.</summary>
            <returns>The type ID or the compact ID of the current slice.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadSliceSize11">
            <summary>Reads the size of the current slice.</summary>
            <returns>The slice of the current slice, not including the size length.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTypeId11(ZeroC.Ice.EncodingDefinitions.TypeIdKind)">
            <summary>Reads the type ID of a class instance.</summary>
            <param name="typeIdKind">The kind of type ID to read.</param>
            <returns>The type ID and the compact ID, if any.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.SkipIndirectionTable11">
            <summary>Skips the indirection table. The caller must save the current stream position before calling
            SkipIndirectionTable11 (to read the indirection table at a later point) except when the caller is
            SkipIndirectionTable11 itself.</summary>
        </member>
        <member name="M:ZeroC.Ice.InputStream.SkipSlice(System.String,System.Nullable{System.Int32})">
            <summary>Skips and saves the body of the current slice; also skips and save the indirection table (if any).
            </summary>
            <param name="typeId">The type ID of the current slice.</param>
            <param name="compactId">The compact ID of the current slice.</param>
            <returns>True when the current slice is the last slice; otherwise, false.</returns>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoBool">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <c>bool</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoByte">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <c>byte</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoDouble">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <c>double</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoFloat">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <c>float</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoInt">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <c>int</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoLong">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <c>long</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoShort">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <c>short</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoString">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <c>string</c> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoUInt">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <c>uint</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoULong">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <c>ulong</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoUShort">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <c>ushort</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoVarInt">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read var int values.</summary>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoVarLong">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read var long values.</summary>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoVarUInt">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read var uint values.</summary>
        </member>
        <member name="F:ZeroC.Ice.InputStream.IceReaderIntoVarULong">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read var ulong values.</summary>
        </member>
        <member name="P:ZeroC.Ice.InputStream.Communicator">
            <summary>The Communicator associated with this stream. It cannot be null when reading a proxy, class, or
            exception.</summary>
        </member>
        <member name="P:ZeroC.Ice.InputStream.Connection">
            <summary>The Connection used to read relative proxies. When not null, a relative proxy is unmarshaled into
            a fixed proxy bound to this connection.</summary>
        </member>
        <member name="P:ZeroC.Ice.InputStream.Encoding">
            <summary>The Ice encoding used by this stream when reading its byte buffer.</summary>
            <value>The encoding.</value>
        </member>
        <member name="P:ZeroC.Ice.InputStream.Pos">
            <summary>The 0-based position (index) in the underlying buffer.</summary>
        </member>
        <member name="P:ZeroC.Ice.InputStream.Reference">
            <summary>The Reference used to read relative proxies. When not null, a relative proxy is unmarshaled into a
            clone of this reference (with various updates). Reference and Connection are mutually exclusive: only one of
            them can be non-null.</summary>
        </member>
        <member name="P:ZeroC.Ice.InputStream.SlicedData">
            <summary>The sliced-off slices held by the current instance, if any.</summary>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadBool">
            <summary>Reads a bool from the stream.</summary>
            <returns>The bool read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadByte">
            <summary>Reads a byte from the stream.</summary>
            <returns>The byte read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadDouble">
            <summary>Reads a double from the stream.</summary>
            <returns>The double read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadFloat">
            <summary>Reads a float from the stream.</summary>
            <returns>The float read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadInt">
            <summary>Reads an int from the stream.</summary>
            <returns>The int read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadLong">
            <summary>Reads a long from the stream.</summary>
            <returns>The long read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadShort">
            <summary>Reads a short from the stream.</summary>
            <returns>The short read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadSize">
            <summary>Reads a size from the stream. This size's encoding is variable-length.</summary>
            <returns>The size read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadString">
            <summary>Reads a string from the stream.</summary>
            <returns>The string read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadUInt">
            <summary>Reads a uint from the stream.</summary>
            <returns>The uint read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadULong">
            <summary>Reads a ulong from the stream.</summary>
            <returns>The ulong read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadUShort">
            <summary>Reads a ushort from the stream.</summary>
            <returns>The ushort read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadVarInt">
            <summary>Reads an int from the stream. This int is encoded using Ice's variable-size integer encoding.
            </summary>
            <returns>The int read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadVarLong">
            <summary>Reads a long from the stream. This long is encoded using Ice's variable-size integer encoding.
            </summary>
            <returns>The long read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadVarUInt">
            <summary>Reads a uint from the stream. This uint is encoded using Ice's variable-size integer encoding.
            </summary>
            <returns>The uint read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadVarULong">
            <summary>Reads a ulong from the stream. This ulong is encoded using Ice's variable-size integer encoding.
            </summary>
            <returns>The ulong read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadArray``1">
            <summary>Reads a sequence of fixed-size numeric values from the stream and returns an array.</summary>
            <returns>The sequence read from the stream, as an array.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadArray``1(System.Action{``0})">
            <summary>Reads a sequence of fixed-size numeric values from the stream and returns an array.</summary>
            <param name="checkElement">A delegate use to checks each element of the array.</param>
            <returns>The sequence read from the stream, as an array.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadArray``1(System.Int32,ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads a sequence from the stream and returns an array.</summary>
            <param name="minElementSize">The minimum size of each element of the sequence, in bytes.</param>
            <param name="reader">The input stream reader used to read each element of the sequence.</param>
            <returns>The sequence read from the stream, as an array.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadArray``1(System.Boolean,ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads a sequence of nullable elements from the stream and returns an array.</summary>
            <param name="withBitSequence">True when null elements are encoded using a bit sequence; otherwise, false.
            </param>
            <param name="reader">The input stream reader used to read each non-null element of the sequence.</param>
            <returns>The sequence read from the stream, as an array.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadArray``1(ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads a sequence of nullable values from the stream and returns an array.</summary>
            <param name="reader">The input stream reader used to read each non-null element of the sequence.</param>
            <returns>The sequence read from the stream, as an array.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadDictionary``2(System.Int32,System.Int32,ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.InputStreamReader{``1})">
            <summary>Reads a dictionary from the stream.</summary>
            <param name="minKeySize">The minimum size of each key of the dictionary, in bytes.</param>
            <param name="minValueSize">The minimum size of each value of the dictionary, in bytes.</param>
            <param name="keyReader">The input stream reader used to read each key of the dictionary.</param>
            <param name="valueReader">The input stream reader used to read each value of the dictionary.</param>
            <returns>The dictionary read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadDictionary``2(System.Int32,System.Boolean,ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.InputStreamReader{``1})">
            <summary>Reads a dictionary from the stream.</summary>
            <param name="minKeySize">The minimum size of each key of the dictionary, in bytes.</param>
            <param name="withBitSequence">When true, null dictionary values are encoded using a bit sequence.</param>
            <param name="keyReader">The input stream reader used to read each key of the dictionary.</param>
            <param name="valueReader">The input stream reader used to read each non-null value of the dictionary.
            </param>
            <returns>The dictionary read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadDictionary``2(System.Int32,ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.InputStreamReader{``1})">
            <summary>Reads a dictionary from the stream.</summary>
            <param name="minKeySize">The minimum size of each key of the dictionary, in bytes.</param>
            <param name="keyReader">The input stream reader used to read each key of the dictionary.</param>
            <param name="valueReader">The input stream reader used to read each non-null value of the dictionary.
            </param>
            <returns>The dictionary read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadNullableProxy``1(ZeroC.Ice.ProxyFactory{``0})">
            <summary>Reads a nullable proxy from the stream.</summary>
            <param name="factory">The proxy factory used to create the typed proxy.</param>
            <returns>The proxy read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadProxy``1(ZeroC.Ice.ProxyFactory{``0})">
            <summary>Reads a proxy from the stream.</summary>
            <param name="factory">The proxy factory used to create the typed proxy.</param>
            <returns>The proxy read from the stream; this proxy cannot be null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadSequence``1(System.Int32,ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads a sequence from the stream.</summary>
            <param name="minElementSize">The minimum size of each element of the sequence, in bytes.</param>
            <param name="reader">The input stream reader used to read each element of the sequence.</param>
            <returns>A collection that provides the size of the sequence and allows you read the sequence from the
            the stream. The return value does not fully implement ICollection{T}, in particular you can only call
            GetEnumerator() once on this collection. You would typically use this collection to construct a List{T} or
            some other generic collection that can be constructed from an IEnumerable{T}.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadSequence``1(System.Boolean,ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads a sequence of nullable elements from the stream. The element type is a reference type.
            </summary>
            <param name="withBitSequence">True when null elements are encoded using a bit sequence; otherwise, false.
            </param>
            <param name="reader">The input stream reader used to read each non-null element of the sequence.</param>
            <returns>A collection that provides the size of the sequence and allows you read the sequence from the
            the stream. The returned collection does not fully implement ICollection{T?}, in particular you can only
            call GetEnumerator() once on this collection. You would typically use this collection to construct a
            List{T?} or some other generic collection that can be constructed from an IEnumerable{T?}.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadSequence``1(ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads a sequence of nullable values from the stream.</summary>
            <param name="reader">The input stream reader used to read each non-null element (value) of the sequence.
            </param>
            <returns>A collection that provides the size of the sequence and allows you read the sequence from the
            the stream. The returned collection does not fully implement ICollection{T?}, in particular you can only
            call GetEnumerator() once on this collection. You would typically use this collection to construct a
            List{T?} or some other generic collection that can be constructed from an IEnumerable{T?}.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadSortedDictionary``2(System.Int32,System.Int32,ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.InputStreamReader{``1})">
            <summary>Reads a sorted dictionary from the stream.</summary>
            <param name="minKeySize">The minimum size of each key of the dictionary, in bytes.</param>
            <param name="minValueSize">The minimum size of each value of the dictionary, in bytes.</param>
            <param name="keyReader">The input stream reader used to read each key of the dictionary.</param>
            <param name="valueReader">The input stream reader used to read each value of the dictionary.</param>
            <returns>The sorted dictionary read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadSortedDictionary``2(System.Int32,System.Boolean,ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.InputStreamReader{``1})">
            <summary>Reads a sorted dictionary from the stream.</summary>
            <param name="minKeySize">The minimum size of each key of the dictionary, in bytes.</param>
            <param name="withBitSequence">When true, null dictionary values are encoded using a bit sequence.</param>
            <param name="keyReader">The input stream reader used to read each key of the dictionary.</param>
            <param name="valueReader">The input stream reader used to read each non-null value of the dictionary.
            </param>
            <returns>The sorted dictionary read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadSortedDictionary``2(System.Int32,ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.InputStreamReader{``1})">
            <summary>Reads a sorted dictionary from the stream. The dictionary's value type is a nullable value type.
            </summary>
            <param name="minKeySize">The minimum size of each key of the dictionary, in bytes.</param>
            <param name="keyReader">The input stream reader used to read each key of the dictionary.</param>
            <param name="valueReader">The input stream reader used to read each non-null value of the dictionary.
            </param>
            <returns>The sorted dictionary read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedBool(System.Int32)">
            <summary>Reads a tagged bool from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The bool read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedByte(System.Int32)">
            <summary>Reads a tagged byte from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The byte read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedDouble(System.Int32)">
            <summary>Reads a tagged double from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The double read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedFloat(System.Int32)">
            <summary>Reads a tagged float from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The float read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedInt(System.Int32)">
            <summary>Reads a tagged int from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The int read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedLong(System.Int32)">
            <summary>Reads a tagged long from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The long read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedShort(System.Int32)">
            <summary>Reads a tagged short from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The short read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedSize(System.Int32)">
            <summary>Reads a tagged size from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The size read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedString(System.Int32)">
            <summary>Reads a tagged string from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The string read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedUInt(System.Int32)">
            <summary>Reads a tagged uint from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The uint read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedULong(System.Int32)">
            <summary>Reads a tagged ulong from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The ulong read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedUShort(System.Int32)">
            <summary>Reads a tagged ushort from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The ushort read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedVarInt(System.Int32)">
            <summary>Reads a tagged varint from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The int read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedVarLong(System.Int32)">
            <summary>Reads a tagged varlong from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The long read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedVarUInt(System.Int32)">
            <summary>Reads a tagged varuint from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The uint read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedVarULong(System.Int32)">
            <summary>Reads a tagged varulong from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The ulong read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedArray``1(System.Int32)">
            <summary>Reads a tagged array of a fixed-size numeric type from the stream.</summary>
            <param name="tag">The tag.</param>
            <returns>The sequence read from the stream as an array, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedArray``1(System.Int32,System.Action{``0})">
            <summary>Reads a tagged array of a fixed-size numeric type from the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="checkElement">A delegate use to checks each element of the array.</param>
            <returns>The sequence read from the stream as an array, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedArray``1(System.Int32,System.Int32,System.Boolean,ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads a tagged array from the stream. The element type can be nullable only if it corresponds to
            a proxy class or mapped Slice class.</summary>
            <param name="tag">The tag.</param>
            <param name="minElementSize">The minimum size of each element, in bytes.</param>
            <param name="fixedSize">True when the element size is fixed; otherwise, false.</param>
            <param name="reader">The input stream reader used to read each element of the sequence.</param>
            <returns>The sequence read from the stream as an array, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedArray``1(System.Int32,System.Boolean,ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads a tagged array of nullable elements from the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="withBitSequence">True when null elements are encoded using a bit sequence; otherwise, false.
            </param>
            <param name="reader">The input stream reader used to read each non-null element of the array.</param>
            <returns>The array read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedArray``1(System.Int32,ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads a tagged array of nullable values from the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="reader">The input stream reader used to read each non-null value of the array.</param>
            <returns>The array read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedDictionary``2(System.Int32,System.Int32,System.Int32,System.Boolean,ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.InputStreamReader{``1})">
            <summary>Reads a tagged dictionary from the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="minKeySize">The minimum size of each key, in bytes.</param>
            <param name="minValueSize">The minimum size of each value, in bytes.</param>
            <param name="fixedSize">When true, the entry size is fixed; otherwise, false.</param>
            <param name="keyReader">The input stream reader used to read each key of the dictionary.</param>
            <param name="valueReader">The input stream reader used to read each value of the dictionary.</param>
            <returns>The dictionary read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedDictionary``2(System.Int32,System.Int32,System.Boolean,ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.InputStreamReader{``1})">
            <summary>Reads a tagged dictionary from the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="minKeySize">The minimum size of each key, in bytes.</param>
            <param name="withBitSequence">When true, null dictionary values are encoded using a bit sequence.</param>
            <param name="keyReader">The input stream reader used to read each key of the dictionary.</param>
            <param name="valueReader">The input stream reader used to read each non-null value of the dictionary.
            </param>
            <returns>The dictionary read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedDictionary``2(System.Int32,System.Int32,ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.InputStreamReader{``1})">
            <summary>Reads a tagged dictionary from the stream. The dictionary's value type is a nullable value type.
            </summary>
            <param name="tag">The tag.</param>
            <param name="minKeySize">The minimum size of each key, in bytes.</param>
            <param name="keyReader">The input stream reader used to read each key of the dictionary.</param>
            <param name="valueReader">The input stream reader used to read each non-null value of the dictionary.
            </param>
            <returns>The dictionary read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedProxy``1(System.Int32,ZeroC.Ice.ProxyFactory{``0})">
            <summary>Reads a tagged proxy from the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="factory">The proxy factory used to create the typed proxy.</param>
            <returns>The proxy read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedSequence``1(System.Int32,System.Int32,System.Boolean,ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads a tagged sequence from the stream. The element type can be nullable only if it corresponds to
            a proxy class or mapped Slice class.</summary>
            <param name="tag">The tag.</param>
            <param name="minElementSize">The minimum size of each element, in bytes.</param>
            <param name="fixedSize">True when the element size is fixed; otherwise, false.</param>
            <param name="reader">The input stream reader used to read each element of the sequence.</param>
            <returns>The sequence read from the stream as an ICollection{T}, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedSequence``1(System.Int32,System.Boolean,ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads a tagged sequence of nullable elements from the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="withBitSequence">True when null elements are encoded using a bit sequence; otherwise, false.
            </param>
            <param name="reader">The input stream reader used to read each non-null element of the sequence.</param>
            <returns>The sequence read from the stream as an ICollection{T?}, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedSequence``1(System.Int32,ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads a tagged sequence of nullable values from the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="reader">The input stream reader used to read each non-null value of the sequence.</param>
            <returns>The sequence read from the stream as an ICollection{T?}, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedSortedDictionary``2(System.Int32,System.Int32,System.Int32,System.Boolean,ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.InputStreamReader{``1})">
            <summary>Reads a tagged sorted dictionary from the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="minKeySize">The minimum size of each key, in bytes.</param>
            <param name="minValueSize">The minimum size of each value, in bytes.</param>
            <param name="fixedSize">True when the entry size is fixed; otherwise, false.</param>
            <param name="keyReader">The input stream reader used to read each key of the dictionary.</param>
            <param name="valueReader">The input stream reader used to read each value of the dictionary.</param>
            <returns>The sorted dictionary read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggeSorteddDictionary``2(System.Int32,System.Int32,System.Boolean,ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.InputStreamReader{``1})">
            <summary>Reads a tagged sorted dictionary from the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="minKeySize">The minimum size of each key, in bytes.</param>
            <param name="withBitSequence">When true, null dictionary values are encoded using a bit sequence.</param>
            <param name="keyReader">The input stream reader used to read each key of the dictionary.</param>
            <param name="valueReader">The input stream reader used to read each non-null value of the dictionary.
            </param>
            <returns>The dictionary read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedSortedDictionary``2(System.Int32,System.Int32,ZeroC.Ice.InputStreamReader{``0},ZeroC.Ice.InputStreamReader{``1})">
            <summary>Reads a tagged sorted dictionary from the stream. The dictionary's value type is a nullable value
            type.</summary>
            <param name="tag">The tag.</param>
            <param name="minKeySize">The minimum size of each key, in bytes.</param>
            <param name="keyReader">The input stream reader used to read each key of the dictionary.</param>
            <param name="valueReader">The input stream reader used to read each non-null value of the dictionary.
            </param>
            <returns>The dictionary read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedStruct``1(System.Int32,System.Boolean,ZeroC.Ice.InputStreamReader{``0})">
            <summary>Reads a tagged struct from the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="fixedSize">True when the struct has a fixed size on the wire; otherwise, false.</param>
            <param name="reader">The input stream reader used to create and read the struct.</param>
            <returns>The struct T read from the stream, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadBitSequence(System.Int32)">
            <summary>Reads a bit sequence from the stream.</summary>
            <param name="bitSequenceSize">The minimum number of bits in the sequence.</param>
            <returns>The read-only bit sequence read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.#ctor(System.ReadOnlyMemory{System.Byte},ZeroC.Ice.Encoding,ZeroC.Ice.Communicator,ZeroC.Ice.Connection,ZeroC.Ice.Reference,System.Boolean)">
            <summary>Constructs a new InputStream over a byte buffer.</summary>
            <param name="buffer">The byte buffer.</param>
            <param name="encoding">The encoding of the buffer.</param>
            <param name="communicator">The communicator (optional).</param>
            <param name="connection">The connection (optional).</param>
            <param name="reference">The reference (optional).</param>
            <param name="startEncapsulation">When true, start reading an encapsulation in this byte buffer, and
            <c>encoding</c> represents the encoding of the header.</param>
        </member>
        <member name="M:ZeroC.Ice.InputStream.CheckEndOfBuffer(System.Boolean)">
            <summary>Verifies the input stream has reached the end of its underlying buffer.</summary>
            <param name="skipTaggedParams">When true, first skips all remaining tagged parameters in the current
            encapsulation.</param>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadBinaryContextEntry">
            <summary>Reads a binary context entry.</summary>
            <returns>The binary context key and value. The read-only memory for the value is backed by the input
            stream's buffer, the data is not copied.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadEncapsulationHeader(System.Boolean)">
            <summary>Reads an encapsulation header from the stream.</summary>
            <param name="checkFullBuffer">When true, the encapsulation is expected to consume all the bytes of the
            current buffer. When false, bytes can remain in the buffer after the encapsulation.</param>
            <returns>The encapsulation header read from the stream. The size does not include the bytes to the size
            length; it does however include the two byte for the encoding.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadEndpoint(ZeroC.Ice.Protocol)">
            <summary>Reads an endpoint from the stream.</summary>
            <param name="protocol">The Ice protocol of this endpoint.</param>
            <returns>The endpoint read from the stream.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadAndCheckSeqSize(System.Int32)">
            <summary>Reads a sequence size and makes sure there is enough space in the underlying buffer to read the
            sequence. This validation is performed to make sure we do not allocate a large container based on an
            invalid encoded size.</summary>
            <param name="minElementSize">The minimum encoded size of an element of the sequence, in bytes. This value is
            0 for sequence of nullable types other than mapped Slice classes and proxies.</param>
            <returns>The number of elements in the sequence.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.ReadTaggedParamHeader(System.Int32,ZeroC.Ice.EncodingDefinitions.TagFormat)">
            <summary>Determines if a tagged parameter or data member is available for reading.</summary>
            <param name="tag">The tag.</param>
            <param name="expectedFormat">The expected format of the tagged parameter.</param>
            <returns>True if the tagged parameter is present; otherwise, false.</returns>
        </member>
        <member name="M:ZeroC.Ice.InputStream.SkipSize(System.Boolean)">
            <summary>Skips over a size value.</summary>
            <param name="fixedLength">When true and the encoding is 1.1, it's a fixed length size encoded on 4 bytes.
            When false, or the encoding is not 1.1, it's a variable-length size.</param>
        </member>
        <member name="T:ZeroC.Ice.InputStreamReader`1">
            <summary>A delegate that reads a value from an input stream.</summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="istr">The input stream to read from.</param>
        </member>
        <member name="T:ZeroC.Ice.InputStreamReaderWithStreamable`1">
            <summary>A delegate that reads a value from an input stream. The value contains a stream parameter that
            will be received using the given socket stream.</summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="istr">The input stream to read from.</param>
            <param name="socketStream">The socket stream to receive the streamable data from.</param>
        </member>
        <member name="T:ZeroC.Ice.Instrumentation.IChildInvocationObserver">
            <summary>The child invocation observer to instrument remote or collocated invocations.
            </summary>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.IChildInvocationObserver.Reply(System.Int32)">
            <summary>Reply notification.</summary>
            <param name="size">The size of the reply in bytes.</param>
        </member>
        <member name="T:ZeroC.Ice.Instrumentation.ICommunicatorObserver">
            <summary>The communicator observer interface used by the Ice run-time to obtain and update observers for its
            observable objects. This interface should be implemented by plug-ins that wish to observe Ice objects in order
            to collect statistics. An instance of this interface can be provided to the Ice run-time through the Ice
            communicator constructor.</summary>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.ICommunicatorObserver.GetConnectionEstablishmentObserver(ZeroC.Ice.Endpoint,System.String)">
            <summary>This method should return an observer for the given endpoint information.
            The Ice run-time calls this method for each connection establishment attempt.</summary>
            <param name="endpoint">The endpoint.</param>
            <param name="description">The description of the connection target. For IP transports, this is typically
            the IP address to connect to.</param>
            <returns>The observer to instrument the connection establishment.</returns>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.ICommunicatorObserver.GetConnectionObserver(ZeroC.Ice.Connection,ZeroC.Ice.ConnectionState,ZeroC.Ice.Instrumentation.IConnectionObserver)">
            <summary>This method should return a connection observer for the given connection. The Ice run-time calls
            this method for each new connection and for all the Ice communicator connections when
            ObserverUpdater.UpdateConnectionObservers is called.</summary>
            <param name="connection">The connection.</param>
            <param name="connectionState">The state of the connection.</param>
            <param name="oldObserver">The old connection observer if one is already set or a null reference otherwise.
            </param>
            <returns>The connection observer to instrument the connection.</returns>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.ICommunicatorObserver.GetDispatchObserver(ZeroC.Ice.Current,System.Int64,System.Int32)">
            <summary>This method should return a dispatch observer for the given dispatch. The Ice run-time calls this
            method each time it receives an incoming request to be dispatched for an Ice object.</summary>
            <param name="current">The current object as provided to the Ice servant dispatching the request.</param>
            <param name="requestId">The request ID of the request being dispatched.</param>
            <param name="size">The size of the dispatch.</param>
            <returns>The dispatch observer to instrument the dispatch.</returns>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.ICommunicatorObserver.GetEndpointLookupObserver(ZeroC.Ice.Endpoint)">
            <summary>This method should return an observer for the given endpoint information. The Ice run-time calls
            this method to resolve an endpoint. For IP endpoints, this typically involves doing a DNS lookup to obtain
            the IP addresses associated with the DNS name.</summary>
            <param name="endpoint">The endpoint.</param>
            <returns>The observer to instrument the endpoint lookup.</returns>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.ICommunicatorObserver.GetInvocationObserver(ZeroC.Ice.IObjectPrx,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>This method should return an invocation observer for the given invocation. The Ice run-time calls
            this method for each invocation on a proxy.</summary>
            <param name="prx">The proxy used for the invocation.</param>
            <param name="operation">The name of the invocation.</param>
            <param name="context">The context specified by the user.</param>
            <returns>The invocation observer to instrument the invocation.</returns>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.ICommunicatorObserver.SetObserverUpdater(ZeroC.Ice.Instrumentation.IObserverUpdater)">
            <summary>The Ice run-time calls this method when the communicator is initialized. The add-in implementing
            this interface can use this object to get the Ice run-time to re-obtain observers for observed objects.
            </summary>
            <param name="updater">The observer updater object.</param>
        </member>
        <member name="T:ZeroC.Ice.Instrumentation.IConnectionObserver">
            <summary>The connection observer interface to instrument Ice connections.</summary>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.IConnectionObserver.ReceivedBytes(System.Int32)">
            <summary>Notification of received bytes over the connection.</summary>
            <param name="num">The number of bytes received.</param>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.IConnectionObserver.SentBytes(System.Int32)">
            <summary>Notification of sent bytes over the connection.</summary>
            <param name="num">The number of bytes sent.</param>
        </member>
        <member name="T:ZeroC.Ice.Instrumentation.IDispatchObserver">
            <summary>The dispatch observer to instrument servant dispatch.</summary>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.IDispatchObserver.RemoteException">
            <summary>Remote exception notification.</summary>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.IDispatchObserver.Reply(System.Int32)">
            <summary>Reply notification.</summary>
            <param name="size">The size of the reply in bytes.</param>
        </member>
        <member name="T:ZeroC.Ice.Instrumentation.IInvocationObserver">
            <summary>The invocation observer to instrument invocations on proxies. A proxy invocation can either result in
            a collocated or remote invocation. If it results in a remote invocation, a sub-observer is requested for the
            remote invocation.</summary>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.IInvocationObserver.GetChildInvocationObserver(ZeroC.Ice.Connection,System.Int32)">
            <summary>Get a child invocation observer for this invocation.</summary>
            <param name="connection">The connection information.</param>
            <param name="size">The size of the invocation in bytes.</param>
            <returns>The observer to instrument the child invocation.</returns>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.IInvocationObserver.RemoteException">
            <summary>Remote exception notification.</summary>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.IInvocationObserver.Retried">
            <summary>Retry notification.</summary>
        </member>
        <member name="T:ZeroC.Ice.Instrumentation.IObserver">
            <summary>The object observer interface used by instrumented objects to notify the observer of their existence.
            </summary>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.IObserver.Attach">
            <summary>This method is called when the instrumented object is created or when the observer is attached to
            an existing object.</summary>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.IObserver.Detach">
            <summary>This method is called when the instrumented object is destroyed and as a result the observer
            detached from the object.</summary>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.IObserver.Failed(System.String)">
            <summary>Notification of a failure.</summary>
            <param name="exceptionName">The name of the exception.</param>
        </member>
        <member name="T:ZeroC.Ice.Instrumentation.IObserverUpdater">
            <summary>The observer updater interface. This interface is implemented by the Ice run-time and an instance of
            this interface is provided by the Ice communicator on initialization to the CommunicatorObserver object set
            with the communicator constructor.
            The Ice communicator calls CommunicatorObserver.SetObserverUpdater(ZeroC.Ice.Instrumentation.ObserverUpdater)
            to provide the observer updater. This interface can be used by add-ins implementing the CommunicatorObserver
            interface to update the connection observers.</summary>
        </member>
        <member name="M:ZeroC.Ice.Instrumentation.IObserverUpdater.UpdateConnectionObservers">
            <summary>Update the connection observers associated with each Ice connection from the communicator and its
            object adapters. When called, this method goes through all the connections and for each connection
            CommunicatorObserver.GetConnectionObserver is called. The implementation of GetConnectionObserver has the
            possibility to return an updated observer if necessary.</summary>
        </member>
        <member name="T:ZeroC.Ice.Invoker">
            <summary>An invoker is a delegate used to send an outgoing request.</summary>
            <param name="target">The proxy for the invocation.</param>
            <param name="request">The outgoing request being sent.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The incoming response frame.</returns>
        </member>
        <member name="T:ZeroC.Ice.InvocationInterceptor">
            <summary>An invocation interceptor can be registered with a Communicator to intercept proxy invocations.
            </summary>
            <param name="target">The proxy for the invocation.</param>
            <param name="request">The outgoing request being sent.</param>
            <param name="next">The next invoker in the invocation chain.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The incoming response frame.</returns>
        </member>
        <member name="T:ZeroC.Ice.RequestReader`1">
            <summary>A delegate that reads the request parameters from a request frame.</summary>
            <typeparam name="T">The type of the request parameters to read.</typeparam>
            <param name="connection">The connection used to received the request frame.</param>
            <param name="request">The request frame to read the parameters from.</param>
            <returns>The request parmeters.</returns>
        </member>
        <member name="T:ZeroC.Ice.IObject">
            <summary>The base interface for all servants.</summary>
        </member>
        <member name="M:ZeroC.Ice.IObject.DispatchAsync(ZeroC.Ice.IncomingRequestFrame,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Dispatches a request on this servant.</summary>
            <param name="request">The <see cref="T:ZeroC.Ice.IncomingRequestFrame"/> to dispatch.</param>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="cancel">A cancellation token that is notified of cancellation when the dispatch is cancelled.
            </param>
            <returns>A value task that provides the <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for the request.</returns>
            <exception cref="T:System.Exception">Any exception thrown by DispatchAsync will be marshaled into the response
            frame.</exception>
        </member>
        <member name="T:ZeroC.Ice.IObject.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.RequestReader`1"/> for each remote operation with parameter(s) defined in
            the pseudo-interface Object.</summary>
        </member>
        <member name="M:ZeroC.Ice.IObject.Request.IceIsA(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameter of operation ice_isA.</summary>
            <summary>Decodes the ice_id operation parameters from an <see cref="T:ZeroC.Ice.IncomingRequestFrame"/>.</summary>
            <param name="connection">The used to receive the frame.</param>
            <param name="request">The request frame.</param>
            <returns>The return value decoded from the frame.</returns>
        </member>
        <member name="T:ZeroC.Ice.IObject.Response">
            <summary>Provides an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> factory method for each non-void remote operation
            defined in the pseudo-interface Object.</summary>
        </member>
        <member name="M:ZeroC.Ice.IObject.Response.IceId(ZeroC.Ice.Current,System.String)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation ice_id.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObject.Response.IceIds(ZeroC.Ice.Current,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation ice_ids.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObject.Response.IceIsA(ZeroC.Ice.Current,System.Boolean)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation ice_isA.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObject.IceIdAsync(ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Returns the Slice type ID of the most-derived interface supported by this object.</summary>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that is notified of cancellation when the dispatch is cancelled.
            </param>
            <returns>The Slice type ID of the most-derived interface.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObject.IceIdsAsync(ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Returns the Slice type IDs of the interfaces supported by this object.</summary>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that is notified of cancellation when the dispatch is canceled.
            </param>
            <returns>The Slice type IDs of the interfaces supported by this object, in alphabetical order.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObject.IceIsAAsync(System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Tests whether this object supports the specified Slice interface.</summary>
            <param name="typeId">The type ID of the Slice interface to test against.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that is notified of cancellation when the dispatch is canceled.
            </param>
            <returns>True if this object implements the interface specified by typeId.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObject.IcePingAsync(ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Tests whether this object can be reached.</summary>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that is notified of cancellation when the dispatch is canceled.
            </param>
        </member>
        <member name="M:ZeroC.Ice.IObject.IceCheckNonIdempotent(ZeroC.Ice.Current)">
            <summary>The generated code calls this method to ensure that when an operation is _not_ declared
            idempotent, the request is not marked idempotent. If the request is marked idempotent, it means the caller
            incorrectly believes this operation is idempotent.</summary>
            <param name="current">The current object for the dispatch.</param>
        </member>
        <member name="M:ZeroC.Ice.IObject.IceDIceIdAsync(ZeroC.Ice.IncomingRequestFrame,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Dispatches an ice_id request.</summary>
            <param name="request">The request frame.</param>
            <param name="current">The current object for the dispatch.</param>
            <param name="cancel">A cancellation token that is notified of cancellation when the dispatch is canceled.
            </param>
            <returns>The response frame.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObject.IceDIceIdsAsync(ZeroC.Ice.IncomingRequestFrame,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Dispatches an ice_ids request.</summary>
            <param name="request">The request frame.</param>
            <param name="current">The current object for the dispatch.</param>
            <param name="cancel">A cancellation token that is notified of cancellation when the dispatch is canceled.
            </param>
            <returns>The response frame.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObject.IceDIceIsAAsync(ZeroC.Ice.IncomingRequestFrame,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Dispatches an ice_isA request.</summary>
            <param name="request">The request frame.</param>
            <param name="current">The current object for the dispatch.</param>
            <param name="cancel">A cancellation token that is notified of cancellation when the dispatch is canceled.
            </param>
            <returns>The response frame.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObject.IceDIcePingAsync(ZeroC.Ice.IncomingRequestFrame,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Dispatches an ice_ping request.</summary>
            <param name="request">The request frame.</param>
            <param name="current">The current object for the dispatch.</param>
            <param name="cancel">A cancellation token that is notified of cancellation when the dispatch is canceled.
            </param>
            <returns>The response frame.</returns>
        </member>
        <member name="T:ZeroC.Ice.ResponseReader`1">
            <summary>A delegate that reads the response return value from a response frame.</summary>
            <typeparam name="T">The type of the return value to read.</typeparam>
            <param name="proxy">The proxy used to send the request.</param>
            <param name="response">The response frame.</param>
            <returns>The response return value.</returns>
        </member>
        <member name="T:ZeroC.Ice.IObjectPrx">
            <summary>Base interface of all object proxies.</summary>
        </member>
        <member name="T:ZeroC.Ice.IObjectPrx.Request">
            <summary>Provides an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> factory method for each remote operation defined in
            the pseudo-interface Object.</summary>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.Request.IceId(ZeroC.Ice.IObjectPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for operation ice_id.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.Request.IceIds(ZeroC.Ice.IObjectPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for operation ice_ids.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.Request.IceIsA(ZeroC.Ice.IObjectPrx,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for operation ice_isA.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="id">The type ID argument to write into the request.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.Request.IcePing(ZeroC.Ice.IObjectPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for operation ice_ping.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/>.</returns>
        </member>
        <member name="T:ZeroC.Ice.IObjectPrx.Response">
            <summary>Holds an <see cref="T:ZeroC.Ice.ResponseReader`1"/> for each non-void remote operation defined in the
            pseudo-interface Object.</summary>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.Response.IceId(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingResponseFrame)">
            <summary>The <see cref="T:ZeroC.Ice.ResponseReader`1"/> reader for the return type of operation ice_id.
            </summary>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.Response.IceIds(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingResponseFrame)">
            <summary>The <see cref="T:ZeroC.Ice.ResponseReader`1"/> reader for the return type of operation ice_ids.
            </summary>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.Response.IceIsA(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingResponseFrame)">
            <summary>The <see cref="T:ZeroC.Ice.ResponseReader`1"/> reader for the return type of operation ice_isA.
            </summary>
        </member>
        <member name="F:ZeroC.Ice.IObjectPrx.Factory">
            <summary>Factory for <see cref="T:ZeroC.Ice.IObjectPrx"/> proxies.</summary>
        </member>
        <member name="F:ZeroC.Ice.IObjectPrx.IceReader">
            <summary>An <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.IObjectPrx"/> proxies.</summary>
        </member>
        <member name="F:ZeroC.Ice.IObjectPrx.IceReaderIntoNullable">
            <summary>An <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.Ice.IObjectPrx"/> nullable proxies.</summary>
        </member>
        <member name="F:ZeroC.Ice.IObjectPrx.IceWriter">
            <summary>An OutputStream writer used to write <see cref="T:ZeroC.Ice.IObjectPrx"/> proxies.</summary>
        </member>
        <member name="F:ZeroC.Ice.IObjectPrx.IceWriterFromNullable">
            <summary>An OutputStream writer used to write <see cref="T:ZeroC.Ice.IObjectPrx"/> nullable proxies.</summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.CacheConnection">
            <summary>Indicates whether or not this proxy caches its connection.</summary>
            <value>True when the proxy caches its connection; otherwise, false.</value>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.Communicator">
            <summary>Returns the communicator that created this proxy.</summary>
            <returns>The communicator that created this proxy.</returns>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.Context">
            <summary>The context of this proxy, which will be sent with each invocation made using this proxy.
            </summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.Encoding">
            <summary>The encoding used to marshal request parameters.</summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.Endpoints">
            <summary>The endpoints of this proxy. A proxy with a non-empty endpoint list is a direct proxy.</summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.Facet">
            <summary>The facet to use on the target Ice object. The empty string corresponds to the default facet.
            </summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.IceReference">
            <summary>The proxy's underlying reference. This is a publicly visible Ice-internal property. Applications
            should not use it directly.</summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.Identity">
            <summary>The identity of the target Ice object.</summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.InvocationInterceptors">
            <summary>The invocation interceptors of this proxy.</summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.InvocationMode">
            <summary>The invocation mode of this proxy. Only useful for ice1 proxies.</summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.InvocationTimeout">
            <summary>The invocation timeout of this proxy.</summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.IsFixed">
            <summary>Indicates whether or not this proxy is bound to a connection.</summary>
            <value>True when this proxy is bound to a connection. Such a proxy has no endpoint. Otherwise, false.
            </value>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.IsOneway">
            <summary>Indicates whether or not using this proxy to invoke an operation that does not return anything
            waits for an empty response from the target Ice object.</summary>
            <value>When true, invoking such an operation does not wait for the response from the target object. When
            false, invoking such an operation waits for the empty response from the target object, unless this behavior
            is overridden by metadata on the Slice operation's definition.</value>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.IsRelative">
            <summary>Indicates whether or not this proxy is marked relative.</summary>
            <value>True when this proxy is marked relative. Such a proxy has no endpoint and cannot be fixed as well.
            </value>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.Label">
            <summary>An optional label that can be used to prevent proxies with identical endpoints to share a
            connection, outgoing connections between equivalent endpoints are shared for proxies with equal labels.
            </summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.Location">
            <summary>Gets the location of this proxy. Ice uses this location to find the target object.</summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.Locator">
            <summary>The locator associated with this proxy. This property is null when no locator is associated with
            this proxy.</summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.LocatorCacheTimeout">
            <summary>The locator cache timeout of this proxy.</summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.PreferExistingConnection">
            <summary>Indicates whether or not this proxy prefers using an existing connection over creating a new one.
            When <c>true</c> the proxy will prefer reusing an active connection to any of its endpoints, otherwise
            endpoints are checked in order trying to get an active connection to the first endpoint, and if one doesn't
            exists creating a new one to the first endpoint.</summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.PreferNonSecure">
            <summary>Indicates the proxy's preference for establishing non-secure connections.</summary>
        </member>
        <member name="P:ZeroC.Ice.IObjectPrx.Protocol">
            <summary>The Ice protocol of this proxy. Requests sent with this proxy use only this Ice protocol.</summary>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.Equals(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IObjectPrx)">
            <summary>Indicates whether the two proxy operands are equal.</summary>
            <param name="lhs">The left hand-side operand.</param>
            <param name="rhs">The right hand-side operand.</param>
            <returns><c>True</c> if the tow proxies are equal, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.Parse(System.String,ZeroC.Ice.Communicator)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.IObjectPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy.</param>
            <returns>The new proxy.</returns>
            <exception cref="T:System.FormatException"><c>s</c> does not contain a valid string representation of a proxy.
            </exception>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.TryParse(System.String,ZeroC.Ice.Communicator,ZeroC.Ice.IObjectPrx@)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.Ice.IObjectPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy.</param>
            <param name="prx">When this method returns it contains the new proxy, if the conversion succeeded or null
            if the conversion failed.</param>
            <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.IceIdAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Returns the Slice type ID of the most-derived interface supported by the target object of this
            proxy.</summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.IceIdsAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Returns the Slice type IDs of the interfaces supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.IceIsAAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Tests whether this object supports a specific Slice interface.</summary>
            <param name="id">The type ID of the Slice interface to test against.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.IcePingAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Tests whether the target object of this proxy can be reached.</summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the proxy into an OutputStream.</summary>
            <param name="ostr">The OutputStream used to marshal the proxy.</param>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.ToProperty(System.String)">
            <summary>Converts a proxy to a set of proxy properties.</summary>
            <param name="property">The base property name.</param>
            <returns>The property set.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.IceClone(ZeroC.Ice.Reference)">
            <summary>Creates a clone of the current object, IceClone is re-implemented by all generated proxy classes.
            </summary>
            <param name="reference">The proxy's reference for the cloned proxy.</param>
            <returns>The new proxy.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.IceInvoke``1(ZeroC.Ice.OutgoingRequestFrame,ZeroC.Ice.ResponseReader{``0})">
            <summary>Sends a request that returns a value and returns the result synchronously.</summary>
            <typeparam name="T">The operation's return type.</typeparam>
            <param name="request">The <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for this invocation.</param>
            <param name="reader">An <see cref="T:ZeroC.Ice.ResponseReader`1"/> for the operation's return value. Typically
            {IInterfaceNamePrx}.Response.{OperationName}.</param>
            <returns>The operation's return value.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.IceInvoke(ZeroC.Ice.OutgoingRequestFrame,System.Boolean)">
            <summary>Sends a request that returns void and waits synchronously for the result.</summary>
            <param name="request">The <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for this invocation.</param>
            <param name="oneway">When true, the request is sent as a oneway request. When false, it is sent as a
            twoway request.</param>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.IceInvokeAsync``1(ZeroC.Ice.OutgoingRequestFrame,ZeroC.Ice.ResponseReader{``0},System.IProgress{System.Boolean})">
            <summary>Sends a request that returns a value and returns the result asynchronously.</summary>
            <typeparam name="T">The operation's return type.</typeparam>
            <param name="request">The <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for this invocation.</param>
            <param name="reader">An <see cref="T:ZeroC.Ice.ResponseReader`1"/> for the operation's return value. Typically
            {IInterfaceNamePrx}.Response.{OperationName}.</param>
            <param name="progress">Sent progress provider.</param>
            <returns>A task that provides the return value asynchronously.</returns>
        </member>
        <member name="M:ZeroC.Ice.IObjectPrx.IceInvokeAsync(ZeroC.Ice.OutgoingRequestFrame,System.Boolean,System.IProgress{System.Boolean})">
            <summary>Sends a request that returns void and returns the result asynchronously.</summary>
            <param name="request">The <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for this invocation.</param>
            <param name="oneway">When true, the request is sent as a oneway request. When false, it is sent as a
            twoway request.</param>
            <param name="progress">Sent progress provider.</param>
            <returns>A task that completes when the request completes.</returns>
        </member>
        <member name="T:ZeroC.Ice.ObjectPrx">
            <summary>The base class for all proxies. It's a publicly visible Ice-internal class. Applications
            should not use it directly.</summary>
        </member>
        <member name="M:ZeroC.Ice.ObjectPrx.Equals(System.Object)">
            <summary>Returns whether this proxy equals the given object. Two proxies are equal if they are equal in all
            respects, that is, if their object identity, endpoints timeout settings, and so on are all equal.</summary>
            <param name="other">The object to compare this proxy with.</param>
            <returns>True if this proxy is equal to other; otherwise, false.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectPrx.Equals(ZeroC.Ice.IObjectPrx)">
            <summary>Returns whether this proxy equals the given proxy. Two proxies are equal if they are equal in all
            respects, that is, if their object identity, endpoints timeout settings, and so on are all equal.</summary>
            <param name="other">The proxy to compare this proxy with.</param>
            <returns>True if this proxy is equal to other; otherwise, false.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectPrx.GetHashCode">
            <summary>Returns a hash code for this proxy.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:ZeroC.Ice.ObjectPrx.IceReference">
            <summary>The proxy's underlying reference.</summary>
        </member>
        <member name="M:ZeroC.Ice.ObjectPrx.ToString">
            <summary>Returns the stringified form of this proxy.</summary>
            <returns>The stringified proxy.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectPrx.#ctor(ZeroC.Ice.Reference)">
            <summary>Constructs a new proxy.</summary>
            <param name="reference">The proxy's underlying reference.</param>
        </member>
        <member name="T:ZeroC.Ice.IPEndpoint">
            <summary>The base class for IP-based endpoints: TcpEndpoint, UdpEndpoint.</summary>
        </member>
        <member name="P:ZeroC.Ice.IPEndpoint.Address">
            <summary>When Host is an IP address, returns the parsed IP address. Otherwise, when Host is a DNS name,
            returns IPAddress.None.</summary>
        </member>
        <member name="P:ZeroC.Ice.IPEndpoint.IsIPv6Only">
            <summary>Whether IPv6 sockets created from this endpoint are dual-mode or IPv6 only.</summary>
        </member>
        <member name="P:ZeroC.Ice.IPEndpoint.SourceAddress">
            <summary>The source address of this IP endpoint.</summary>
        </member>
        <member name="M:ZeroC.Ice.IPEndpoint.Clone(System.String,System.UInt16)">
            <summary>Creates a clone with the specified host and port.</summary>
        </member>
        <member name="T:ZeroC.Ice.InvalidConfigurationException">
            <summary>This exception reports incorrect or missing Ice configuration.</summary>
        </member>
        <member name="M:ZeroC.Ice.InvalidConfigurationException.#ctor(System.String)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.InvalidConfigurationException"/> class with a
            specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ZeroC.Ice.InvalidConfigurationException.#ctor(System.String,System.Exception)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.InvalidConfigurationException"/> class with a
            specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ZeroC.Ice.LoadException">
            <summary>This exception provides context for an exception thrown while attempting to load a class or create a
            class instance at runtime.</summary>
        </member>
        <member name="M:ZeroC.Ice.LoadException.#ctor(System.String)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.LoadException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ZeroC.Ice.LoadException.#ctor(System.String,System.Exception)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.LoadException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ZeroC.Ice.CommunicatorDisposedException">
            <summary>This exception reports an attempt to use a destroyed communicator.</summary>
        </member>
        <member name="M:ZeroC.Ice.CommunicatorDisposedException.#ctor">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.CommunicatorDisposedException"/> class.</summary>
        </member>
        <member name="M:ZeroC.Ice.CommunicatorDisposedException.#ctor(System.Exception)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.CommunicatorDisposedException"/> class with a
            reference to the inner exception that is the cause of this exception.</summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ZeroC.Ice.NoEndpointException">
            <summary>This exception reports that a proxy's endpoints could not be resolved.</summary>
        </member>
        <member name="M:ZeroC.Ice.NoEndpointException.#ctor">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.NoEndpointException"/> class.</summary>
        </member>
        <member name="M:ZeroC.Ice.NoEndpointException.#ctor(System.String)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.NoEndpointException"/> class.</summary>
            <param name="stringifiedProxy">The stringified proxy that was the cause of this exception.</param>
        </member>
        <member name="T:ZeroC.Ice.TransportException">
            <summary>This exception reports an error from the transport layer.</summary>
        </member>
        <member name="P:ZeroC.Ice.TransportException.RetryPolicy">
            <summary>The exception retry policy.</summary>
        </member>
        <member name="M:ZeroC.Ice.TransportException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.TransportException"/> class. A plain
            TransportException should have a custom message or an inner exception (or both).</summary>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="M:ZeroC.Ice.TransportException.#ctor(System.String,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.TransportException"/> class with a specified error
            message.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="M:ZeroC.Ice.TransportException.#ctor(System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.TransportException"/> class with a reference to the
            inner exception that is the cause of this exception.</summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="M:ZeroC.Ice.TransportException.#ctor(System.String,System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.LoadException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="T:ZeroC.Ice.ConnectFailedException">
            <summary>This exception reports a failed attempt to establish a connection.</summary>
        </member>
        <member name="M:ZeroC.Ice.ConnectFailedException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.ConnectFailedException"/> class.</summary>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="M:ZeroC.Ice.ConnectFailedException.#ctor(System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.ConnectFailedException"/> class with a reference to
            the inner exception that is the cause of this exception.</summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="T:ZeroC.Ice.ConnectTimeoutException">
            <summary>This exception indicates a connection establishment timeout condition.</summary>
        </member>
        <member name="M:ZeroC.Ice.ConnectTimeoutException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.ConnectTimeoutException"/> class.</summary>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="T:ZeroC.Ice.ConnectionRefusedException">
            <summary>This exception reports a connection refused error.</summary>
        </member>
        <member name="M:ZeroC.Ice.ConnectionRefusedException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.ConnectionRefusedException"/> class.</summary>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="M:ZeroC.Ice.ConnectionRefusedException.#ctor(System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.ConnectionRefusedException"/> class with a reference
            to the inner exception that is the cause of this exception.</summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="T:ZeroC.Ice.ConnectionLostException">
            <summary>This exception reports that a previously established connection was lost.</summary>
        </member>
        <member name="M:ZeroC.Ice.ConnectionLostException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.ConnectionLostException"/> class.</summary>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="M:ZeroC.Ice.ConnectionLostException.#ctor(System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.ConnectionLostException"/> class with a reference to
            the inner exception that is the cause of this exception.</summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="T:ZeroC.Ice.ConnectionClosedException">
            <summary>This exception indicates that a previous established connection was closed.</summary>
        </member>
        <member name="P:ZeroC.Ice.ConnectionClosedException.IsClosedByPeer">
            <summary><c>true</c> if the connection closure originated from the peer, <c>false</c> otherwise.</summary>
        </member>
        <member name="M:ZeroC.Ice.ConnectionClosedException.#ctor(System.Boolean,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.ConnectionClosedException"/> class.</summary>
            <param name="isClosedByPeer"><c>true</c> if the connection closure originated from the peer, <c>false</c>
            otherwise</param>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="M:ZeroC.Ice.ConnectionClosedException.#ctor(System.String,System.Boolean,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.ConnectionClosedException"/> class with a specified
            error message.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="isClosedByPeer"><c>true</c> if the connection closure originated from the peer, <c>false</c>
            otherwise</param>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="T:ZeroC.Ice.DNSException">
            <summary>This exception reports a DNS error.</summary>
        </member>
        <member name="M:ZeroC.Ice.DNSException.#ctor(System.String,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.DNSException"/> class.</summary>
            <param name="host">The hostname that was the cause of the current exception.</param>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="M:ZeroC.Ice.DNSException.#ctor(System.String,System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.Ice.DNSException"/> with a reference to the inner
            exception that is the cause of this exception.</summary>
            <param name="host">The hostname that was the cause of the current exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The exception retry policy.</param>
        </member>
        <member name="T:ZeroC.Ice.InvalidDataException">
            <summary>This exception reports that data (bytes) received by Ice are not in an expected format.</summary>
        </member>
        <member name="M:ZeroC.Ice.InvalidDataException.#ctor(System.String)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.InvalidDataException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ZeroC.Ice.InvalidDataException.#ctor(System.String,System.Exception)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.InvalidDataException"/> class with a specified error
            message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ZeroC.Ice.LimitExceededException">
            <summary>This exception indicates that a limit was exceeded.</summary>
        </member>
        <member name="M:ZeroC.Ice.LimitExceededException.#ctor(System.String)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.LimitExceededException"/> class with a specified
            error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ZeroC.Ice.LimitExceededException.#ctor(System.String,System.Exception)">
            <summary>Constructs a new instance of the <see cref="T:ZeroC.Ice.LimitExceededException"/> class with a specified error
            message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ZeroC.Ice.LocatorInfo">
            <summary>The locator info class caches information specific to a given locator proxy. The communicator holds a
            locator info instance per locator proxy set either with Ice.Default.Locator or the proxy's Locator property. It
            caches the locator registry proxy and keeps track of requests to the locator to prevent multiple concurrent
            identical requests.</summary>
        </member>
        <member name="M:ZeroC.Ice.LocatorInfo.ResolveIndirectReferenceAsync(ZeroC.Ice.Reference,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Resolves an indirect reference using the locator proxy or cache.</summary>
        </member>
        <member name="M:ZeroC.Ice.Logger.#ctor(System.String)">
            <summary>Creates a new logger, used only by derived classes.</summary>
            <param name="prefix">The prefix to perpend to messages write by this logger.</param>
        </member>
        <member name="M:ZeroC.Ice.Logger.Write(System.String)">
            <summary>Writes a message using this logger.</summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="T:ZeroC.Ice.ConsoleLogger">
            <summary>Represents a logger that writes messages to the standard error output stream.</summary>
        </member>
        <member name="M:ZeroC.Ice.ConsoleLogger.#ctor(System.String)">
            <summary>Creates a new console logger.</summary>
            <param name="prefix">The prefix to perpend to messages write by this logger.</param>
        </member>
        <member name="T:ZeroC.Ice.FileLogger">
            <summary>Represents a logger that writes messages to a file.</summary>
        </member>
        <member name="M:ZeroC.Ice.FileLogger.#ctor(System.String,System.String)">
            <summary>Creates a new file logger.</summary>
            <param name="prefix">The prefix to perpend to messages write by this logger.</param>
            <param name="file">The file path to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.TraceLogger">
            <summary>Creates a logger that trace messages using <see cref="T:System.Diagnostics.Trace"/> API,
            this is the default logger.</summary>
        </member>
        <member name="M:ZeroC.Ice.TraceLogger.#ctor(System.String,System.Boolean)">
            <summary>Creates a new trace logger.</summary>
            <param name="prefix">The prefix to perpend to messages write by this logger.</param>
            <param name="addConsoleListener">If true a listener that writes messages to the standard error is added
            to trace listeners <see cref="P:System.Diagnostics.Trace.Listeners"/> this is only done once per process.</param>
        </member>
        <member name="T:ZeroC.Ice.ManualResetValueTaskCompletionSource`1">
            <summary>A manual reset task completion source for ValueTask. It provides the same functionality as the
            TaskCompletionSource class but with ValueTask support instead. It's useful for hot code paths that
            require to minimize heap allocations required by the Task class. This class is NOT thread safe.</summary>
        </member>
        <member name="M:ZeroC.Ice.ManualResetValueTaskCompletionSource`1.#ctor(System.Boolean)">
            <summary>Initializes a new instance of ManualResetValueTaskCompletionSource with a boolean indicating
            if the source should be reset after the result is obtained. If the auto reset is disabled, the Reset
            method needs to be called explicitly before re-using the source.</summary>
            <param name="autoReset">The source is reset automatically after the result is retrieve.</param>
        </member>
        <member name="T:ZeroC.Ice.MultiStreamOverSingleStreamSocket">
            <summary>An abstract multi-stream socket which is using a single stream socket for receiving and sending
            data.</summary>
        </member>
        <member name="T:ZeroC.Ice.MultiStreamSocket">
            <summary>A multi-stream socket represents the local end of a network connection and enables transmitting raw
            binary data over multiple independent streams. The data sent and received over these streams can either be
            transmitted using a datagram oriented transport such as Quic or a stream oriented transport such as TCP
            (data multiplexing is used to transmit the data from multiple concurrent streams over the same TCP socket).
            The Ice core relies on a multi-stream sockets to support the Ice protocol.
            </summary>
        </member>
        <member name="P:ZeroC.Ice.MultiStreamSocket.Endpoint">
            <summary>The endpoint from which the socket was created.</summary>
        </member>
        <member name="P:ZeroC.Ice.MultiStreamSocket.IdleTimeout">
            <summary>Gets or set the idle timeout.</summary>
        </member>
        <member name="P:ZeroC.Ice.MultiStreamSocket.IsIncoming">
            <summary><c>true</c> for incoming sockets <c>false</c> otherwise. An incoming socket is created
            by a server-side acceptor while an outgoing socket is created from the endpoint by the client-side.
            </summary>
        </member>
        <member name="M:ZeroC.Ice.MultiStreamSocket.Abort">
            <summary>Aborts the socket.</summary>
        </member>
        <member name="M:ZeroC.Ice.MultiStreamSocket.AcceptStreamAsync(System.Threading.CancellationToken)">
            <summary>Accepts an incoming stream.</summary>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <return>The accepted stream.</return>
        </member>
        <member name="M:ZeroC.Ice.MultiStreamSocket.CloseAsync(System.Exception,System.Threading.CancellationToken)">
            <summary>Closes the socket.</summary>
            <param name="exception">The exception for which the socket is closed.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.MultiStreamSocket.Dispose">
            <summary>Releases the resources used by the socket.</summary>
        </member>
        <member name="M:ZeroC.Ice.MultiStreamSocket.PingAsync(System.Threading.CancellationToken)">
            <summary>Sends a ping frame to defer the idle timeout.</summary>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.MultiStreamSocket.InitializeAsync(System.Threading.CancellationToken)">
            <summary>Initializes the transport.</summary>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.MultiStreamSocket.CreateStream(System.Boolean,System.Boolean)">
            <summary>Creates an outgoing stream. Depending on the transport implementation, the stream ID might not
            be immediately available after the stream creation. It will be available after the first successful send
            call on the stream.</summary>
            <param name="bidirectional"><c>True</c> to create a bidirectional stream, <c>false</c> otherwise.</param>
            <param name="control"><c>True</c> to create a control stream, <c>false</c> otherwise.</param>
            <return>The outgoing stream.</return>
        </member>
        <member name="M:ZeroC.Ice.MultiStreamSocket.#ctor(ZeroC.Ice.Endpoint,ZeroC.Ice.ObjectAdapter)">
            <summary>The MultiStreamSocket constructor.</summary>
            <param name="endpoint">The endpoint from which the socket was created.</param>
            <param name="adapter">The object adapter from which the socket was created or null if the socket
            is an outgoing socket created from the communicator.</param>
        </member>
        <member name="M:ZeroC.Ice.MultiStreamSocket.Dispose(System.Boolean)">
            <summary>Releases the resources used by the socket.</summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only
            unmanaged resources.</param>
        </member>
        <member name="M:ZeroC.Ice.MultiStreamSocket.Received(System.Int32)">
            <summary>Notifies the observer and traces the given received amount of data. Transport implementations
            should call this method to trace the received data.</summary>
            <param name="size">The size in bytes of the received data.</param>
        </member>
        <member name="M:ZeroC.Ice.MultiStreamSocket.ReceivedPing">
            <summary>Notifies event handlers of the received ping. Transport implementations should call this method
            when a ping is received.</summary>
        </member>
        <member name="M:ZeroC.Ice.MultiStreamSocket.Sent(System.Int32)">
            <summary>Notifies the observer and traces the given sent amount of data. Transport implementations
            should call this method to trace the data sent.</summary>
            <param name="size">The size in bytes of the data sent.</param>
        </member>
        <member name="M:ZeroC.Ice.MultiStreamSocket.TryGetStream``1(System.Int64,``0@)">
            <summary>Try to get a stream with the given ID. Transport implementations can use this method to lookup
            an existing stream.</summary>
            <param name="streamId">The stream ID.</param>
            <param name="value">If found, value is assigned to the stream value, null otherwise.</param>
            <return>True if the stream was found and value contains a non-null value, False otherwise.</return>
        </member>
        <member name="M:ZeroC.Ice.Network.IsSameHost(System.Net.IPEndPoint)">
            <summary>Check if an IPEndPoint is on the same host, we consider a peer endpoint is on the same host
            if its address matches any of the host local addresses.</summary>
            <param name="peer">The peer endpoint to check.</param>
            <returns><c>True</c> if the peer is on the same host otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ZeroC.Ice.NonSecure">
            <summary>This enumeration describes under what conditions a non-secure connection is allowed.</summary>
        </member>
        <member name="F:ZeroC.Ice.NonSecure.Never">
            <summary>Never allow non secure connections. This is the default.</summary>
        </member>
        <member name="F:ZeroC.Ice.NonSecure.Always">
            <summary>Always allow non secure connections.</summary>
        </member>
        <member name="F:ZeroC.Ice.NonSecure.SameHost">
            <summary>Only allow non secure connections when the peer resides on the same host. What constitutes "same
            host" is determined by the transport.</summary>
        </member>
        <member name="F:ZeroC.Ice.NonSecure.TrustedHost">
            <summary>Only allow non secure connections when the peer is a trusted host. What constitutes a "trusted
            host" is determined by the transport.</summary>
        </member>
        <member name="T:ZeroC.Ice.ObjectAdapter">
            <summary>The object adapter provides an up-call interface from the Ice run time to the implementation of Ice
            objects. The object adapter is responsible for receiving requests from endpoints, and for mapping between
            servants, identities, and proxies.</summary>
        </member>
        <member name="P:ZeroC.Ice.ObjectAdapter.AcceptNonSecure">
            <summary>Indicates under what circumstances the object adapter accepts non-secure incoming connections. This
            property corresponds to the object adapter's AcceptNonSecure property. If not set then the value of
            <see cref="P:ZeroC.Ice.Communicator.AcceptNonSecure"/> is used.</summary>
        </member>
        <member name="P:ZeroC.Ice.ObjectAdapter.AdapterId">
            <summary>Returns the adapter ID of this object adapter, or the empty string if this object adapter does not
            have an adapter ID.</summary>
        </member>
        <member name="P:ZeroC.Ice.ObjectAdapter.Communicator">
            <summary>Returns the communicator that created this object adapter.</summary>
            <value>The communicator.</value>
        </member>
        <member name="P:ZeroC.Ice.ObjectAdapter.DispatchInterceptors">
            <summary>The dispatch interceptors of this object adapter. The default value is
            <see cref="P:ZeroC.Ice.Communicator.DefaultDispatchInterceptors"/></summary>
        </member>
        <member name="P:ZeroC.Ice.ObjectAdapter.Endpoints">
            <summary>Returns the endpoints this object adapter is listening on.</summary>
            <returns>The endpoints configured on the object adapter; for IP endpoints, port 0 is substituted by the
            actual port selected by the operating system.</returns>
        </member>
        <member name="P:ZeroC.Ice.ObjectAdapter.Locator">
            <summary>The locator proxy associated with this object adapter, if any. The object adapter registers itself
            with the locator registry associated with this locator during activation.</summary>
            <value>The locator proxy.</value>
        </member>
        <member name="P:ZeroC.Ice.ObjectAdapter.Name">
            <summary>Returns the name of this object adapter. This name is used as prefix for the object adapter's
            configuration properties.</summary>
            <value>The object adapter's name.</value>
        </member>
        <member name="P:ZeroC.Ice.ObjectAdapter.Protocol">
            <summary>Gets the protocol of this object adapter. The format of this object adapter's Endpoints property
            determines this protocol.</summary>
        </member>
        <member name="P:ZeroC.Ice.ObjectAdapter.PublishedEndpoints">
            <summary>Returns the endpoints listed in a direct proxy created by this object adapter.</summary>
        </member>
        <member name="P:ZeroC.Ice.ObjectAdapter.ReplicaGroupId">
            <summary>Returns the replica group ID of this object adapter, or the empty string if this object adapter
            does not belong to a replica group.</summary>
        </member>
        <member name="P:ZeroC.Ice.ObjectAdapter.SerializeDispatch">
            <summary>Indicates whether or not this object adapter serializes the dispatching of requests received
            over the same connection.</summary>
            <value>The serialize dispatch value.</value>
        </member>
        <member name="P:ZeroC.Ice.ObjectAdapter.ShutdownComplete">
            <summary>Returns a task that completes when the object adapter's shutdown is complete: see
            <see cref="M:ZeroC.Ice.ObjectAdapter.ShutdownAsync"/>. This property can be retrieved before shutdown is initiated. See also
            <see cref="P:ZeroC.Ice.Communicator.ShutdownComplete"/>.</summary>
        </member>
        <member name="P:ZeroC.Ice.ObjectAdapter.TaskScheduler">
            <summary>Returns the TaskScheduler used to dispatch requests.</summary>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.ActivateAsync(System.Threading.CancellationToken)">
            <summary>Activates this object adapter. After activation, the object adapter can dispatch requests received
            through its endpoints. Also registers this object adapter with the locator (if set).</summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that completes when the activation completes.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.Find(ZeroC.Ice.Identity,System.String)">
            <summary>Finds a servant in the Active Servant Map (ASM), taking into account the servants and default
            servants currently in the ASM.</summary>
            <param name="identity">The identity of the Ice object.</param>
            <param name="facet">The facet of the Ice object.</param>
            <returns>The corresponding servant in the ASM, or null if the servant was not found.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.Find(System.String)">
            <summary>Finds a servant in the Active Servant Map (ASM), taking into account the servants and default
            servants currently in the ASM.</summary>
            <param name="identityAndFacet">A relative URI string [category/]identity[#facet].</param>
            <returns>The corresponding servant in the ASM, or null if the servant was not found.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.Add``1(ZeroC.Ice.Identity,System.String,ZeroC.Ice.IObject,ZeroC.Ice.ProxyFactory{``0})">
            <summary>Adds a servant to this object adapter's Active Servant Map (ASM), using as key the provided
            identity and facet. Adding a servant with an identity and facet that are already in the ASM throws
            ArgumentException.</summary>
            <param name="identity">The identity of the Ice object incarnated by this servant. identity.Name cannot
            be empty.</param>
            <param name="facet">The facet of the Ice object.</param>
            <param name="servant">The servant to add.</param>
            <param name="proxyFactory">The proxy factory used to manufacture the returned proxy. Pass INamePrx.Factory
            for this parameter. See <see cref="M:ZeroC.Ice.ObjectAdapter.CreateProxy``1(ZeroC.Ice.Identity,System.String,ZeroC.Ice.ProxyFactory{``0})"/>.</param>
            <returns>A proxy associated with this object adapter, object identity and facet.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.Add(ZeroC.Ice.Identity,System.String,ZeroC.Ice.IObject)">
            <summary>Adds a servant to this object adapter's Active Servant Map (ASM), using as key the provided
            identity and facet. Adding a servant with an identity and facet that are already in the ASM throws
            ArgumentException.</summary>
            <param name="identity">The identity of the Ice object incarnated by this servant. identity.Name cannot
            be empty.</param>
            <param name="facet">The facet of the Ice object.</param>
            <param name="servant">The servant to add.</param>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.Add``1(System.String,ZeroC.Ice.IObject,ZeroC.Ice.ProxyFactory{``0})">
            <summary>Adds a servant to this object adapter's Active Servant Map (ASM), using as key the provided
            identity and facet. Adding a servant with an identity and facet that are already in the ASM throws
            ArgumentException.</summary>
            <param name="identityAndFacet">A relative URI string [category/]identity[#facet].</param>
            <param name="servant">The servant to add.</param>
            <param name="proxyFactory">The proxy factory used to manufacture the returned proxy. Pass INamePrx.Factory
            for this parameter. See <see cref="M:ZeroC.Ice.ObjectAdapter.CreateProxy``1(System.String,ZeroC.Ice.ProxyFactory{``0})"/>.</param>
            <returns>A proxy associated with this object adapter, object identity and facet.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.Add(System.String,ZeroC.Ice.IObject)">
            <summary>Adds a servant to this object adapter's Active Servant Map (ASM), using as key the provided
            identity and facet. Adding a servant with an identity and facet that are already in the ASM throws
            ArgumentException.</summary>
            <param name="identityAndFacet">A relative URI string [category/]identity[#facet].</param>
            <param name="servant">The servant to add.</param>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.Add``1(ZeroC.Ice.Identity,ZeroC.Ice.IObject,ZeroC.Ice.ProxyFactory{``0})">
            <summary>Adds a servant to this object adapter's Active Servant Map (ASM), using as key the provided
            identity and the default (empty) facet.</summary>
            <param name="identity">The identity of the Ice object incarnated by this servant. identity.Name cannot
            be empty.</param>
            <param name="servant">The servant to add.</param>
            <param name="proxyFactory">The proxy factory used to manufacture the returned proxy. Pass INamePrx.Factory
            for this parameter. See <see cref="M:ZeroC.Ice.ObjectAdapter.CreateProxy``1(ZeroC.Ice.Identity,ZeroC.Ice.ProxyFactory{``0})"/>.</param>
            <returns>A proxy associated with this object adapter, object identity and the default facet.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.Add(ZeroC.Ice.Identity,ZeroC.Ice.IObject)">
            <summary>Adds a servant to this object adapter's Active Servant Map (ASM), using as key the provided
            identity and the default (empty) facet.</summary>
            <param name="identity">The identity of the Ice object incarnated by this servant. identity.Name cannot
            be empty.</param>
            <param name="servant">The servant to add.</param>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.AddWithUUID``1(System.String,ZeroC.Ice.IObject,ZeroC.Ice.ProxyFactory{``0})">
            <summary>Adds a servant to this object adapter's Active Servant Map (ASM), using as key a unique identity
            and the provided facet. This method creates the unique identity with a UUID name and an empty category.
            </summary>
            <param name="facet">The facet of the Ice object.</param>
            <param name="servant">The servant to add.</param>
            <param name="proxyFactory">The proxy factory used to manufacture the returned proxy. Pass INamePrx.Factory
            for this parameter. See <see cref="M:ZeroC.Ice.ObjectAdapter.CreateProxy``1(ZeroC.Ice.Identity,System.String,ZeroC.Ice.ProxyFactory{``0})"/>.
            </param>
            <returns>A proxy associated with this object adapter, object identity and facet.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.AddWithUUID``1(ZeroC.Ice.IObject,ZeroC.Ice.ProxyFactory{``0})">
            <summary>Adds a servant to this object adapter's Active Servant Map (ASM), using as key a unique identity
            and the default (empty) facet. This method creates the unique identity with a UUID name and an empty
            category.</summary>
            <param name="servant">The servant to add.</param>
            <param name="proxyFactory">The proxy factory used to manufacture the returned proxy. Pass INamePrx.Factory
            for this parameter. See <see cref="M:ZeroC.Ice.ObjectAdapter.CreateProxy``1(ZeroC.Ice.Identity,ZeroC.Ice.ProxyFactory{``0})"/>.</param>
            <returns>A proxy associated with this object adapter, object identity and the default facet.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.Remove(ZeroC.Ice.Identity,System.String)">
            <summary>Removes a servant previously added to the Active Servant Map (ASM) using Add.</summary>
            <param name="identity">The identity of the Ice object.</param>
            <param name="facet">The facet of the Ice object.</param>
            <returns>The servant that was just removed from the ASM, or null if the servant was not found.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.Remove(System.String)">
            <summary>Removes a servant previously added to the Active Servant Map (ASM) using Add.</summary>
            <param name="identityAndFacet">A relative URI string [category/]identity[#facet].</param>
            <returns>The servant that was just removed from the ASM, or null if the servant was not found.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.AddDefaultForCategory(System.String,System.String,ZeroC.Ice.IObject)">
            <summary>Adds a category-specific default servant to this object adapter's Active Servant Map (ASM), using
            as key the provided category and facet.</summary>
            <param name="category">The object identity category.</param>
            <param name="facet">The facet.</param>
            <param name="servant">The default servant to add.</param>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.AddDefaultForCategory(System.String,ZeroC.Ice.IObject)">
            <summary>Adds a category-specific default servant to this object adapter's Active Servant Map (ASM), using
            as key the provided category and the default (empty) facet.</summary>
            <param name="category">The object identity category.</param>
            <param name="servant">The default servant to add.</param>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.RemoveDefaultForCategory(System.String,System.String)">
            <summary>Removes a category-specific default servant previously added to the Active Servant Map (ASM) using
            AddDefaultForCategory.</summary>
            <param name="category">The category associated with this default servant.</param>
            <param name="facet">The facet.</param>
            <returns>The servant that was just removed from the ASM, or null if the servant was not found.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.AddDefault(System.String,ZeroC.Ice.IObject)">
            <summary>Adds a default servant to this object adapter's Active Servant Map (ASM), using as key the provided
            facet.</summary>
            <param name="facet">The facet.</param>
            <param name="servant">The default servant to add.</param>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.AddDefault(ZeroC.Ice.IObject)">
            <summary>Adds a default servant to this object adapter's Active Servant Map (ASM), using as key the default
            (empty) facet.</summary>
            <param name="servant">The default servant to add.</param>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.RemoveDefault(System.String)">
            <summary>Removes a default servant previously added to the Active Servant Map (ASM) using AddDefault.
            </summary>
            <param name="facet">The facet.</param>
            <returns>The servant that was just removed from the ASM, or null if the servant was not found.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.CreateProxy``1(ZeroC.Ice.Identity,System.String,ZeroC.Ice.ProxyFactory{``0})">
            <summary>Creates a proxy for the object with the given identity and facet. If this object adapter is
            configured with an adapter ID, creates an indirect proxy that refers to the adapter ID. If a replica group
            ID is also defined, creates an indirect proxy that refers to the replica group ID. Otherwise, if no adapter
            ID is defined, creates a direct proxy containing this object adapter's published endpoints.</summary>
            <param name="identity">The object's identity.</param>
            <param name="facet">The facet.</param>
            <param name="factory">The proxy factory. Use INamePrx.Factory for this parameter, where INamePrx is the
            desired proxy type.</param>
            <returns>A proxy for the object with the given identity and facet.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.CreateProxy``1(ZeroC.Ice.Identity,ZeroC.Ice.ProxyFactory{``0})">
            <summary>Creates a proxy for the object with the given identity. If this object adapter is configured with
            an adapter id, creates an indirect proxy that refers to the adapter id. If a replica group id is also
            defined, creates an indirect proxy that refers to the replica group id. Otherwise, if no adapter
            id is defined, creates a direct proxy containing this object adapter's published endpoints.</summary>
            <param name="identity">The object's identity.</param>
            <param name="factory">The proxy factory. Use INamePrx.Factory for this parameter, where INamePrx is the
            desired proxy type.</param>
            <returns>A proxy for the object with the given identity.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.CreateProxy``1(System.String,ZeroC.Ice.ProxyFactory{``0})">
            <summary>Creates a proxy for the object with the given identity and facet. If this object adapter is
            configured with an adapter id, creates an indirect proxy that refers to the adapter id. If a replica group
            id is also defined, creates an indirect proxy that refers to the replica group id. Otherwise, if no adapter
            id is defined, creates a direct proxy containing this object adapter's published endpoints.</summary>
            <param name="identityAndFacet">A relative URI string [category/]identity[#facet].</param>
            <param name="factory">The proxy factory. Use INamePrx.Factory for this parameter, where INamePrx is the
            desired proxy type.</param>
            <returns>A proxy for the object with the given identity and facet.</returns>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.ShutdownAsync">
            <summary>Shuts down this object adapter. Once shut down, an object adapter is disposed and can no longer be
            used. This method can be safely called multiple times and always returns the same task.</summary>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.#ctor(ZeroC.Ice.Communicator,System.Boolean,System.Threading.Tasks.TaskScheduler,ZeroC.Ice.Protocol)">
            <summary>Constructs a nameless object adapter.</summary>
        </member>
        <member name="M:ZeroC.Ice.ObjectAdapter.#ctor(ZeroC.Ice.Communicator,System.String,System.Boolean,System.Threading.Tasks.TaskScheduler)">
            <summary>Constructs a named object adapter.</summary>
        </member>
        <member name="T:ZeroC.Ice.OpaqueEndpoint">
            <summary>Describes an ice1 endpoint that the associated communicator cannot use, typically because it does not
            implement the endpoint's transport. The communicator can marshal a proxy with such an endpoint and send it to
            another Ice application that may know/decode this endpoint. This class is used only with the ice1 protocol.
            </summary>
        </member>
        <member name="T:ZeroC.Ice.Options">
            <summary>Provides a helper method to parse command line arguments.</summary>
        </member>
        <member name="M:ZeroC.Ice.Options.Split(System.String)">
            <summary>Splits a string into a list of command line arguments, the string is parsed using semantics similar
            to that of command-line arguments.</summary>
            <param name="line">The string to split.</param>
            <returns>An array of strings containing the parsed command line arguments.</returns>
        </member>
        <member name="T:ZeroC.Ice.CompressionResult">
            <summary>Indicates the result of the <see cref="M:ZeroC.Ice.OutgoingFrame.CompressPayload(ZeroC.Ice.CompressionFormat)"/> operation.</summary>
        </member>
        <member name="F:ZeroC.Ice.CompressionResult.Success">
            <summary>The payload was successfully compressed.</summary>
        </member>
        <member name="F:ZeroC.Ice.CompressionResult.PayloadTooSmall">
            <summary>The payload size is smaller than the configured compression threshold.</summary>
        </member>
        <member name="F:ZeroC.Ice.CompressionResult.PayloadNotCompressible">
            <summary>The payload was not compressed, compressing it would increase its size.</summary>
        </member>
        <member name="T:ZeroC.Ice.OutgoingFrame">
            <summary>Base class for outgoing frames.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingFrame.BinaryContextOverride">
            <summary>Returns a dictionary used to override the binary context of this frame. The full binary context
            is a combination of the <see cref="P:ZeroC.Ice.OutgoingFrame.InitialBinaryContext"/> plus these overrides.</summary>
            <remarks>The actions set in this dictionary are executed when the frame is sent.</remarks>
        </member>
        <member name="P:ZeroC.Ice.OutgoingFrame.HasCompressedPayload">
            <summary>Returns true when the payload is compressed; otherwise, returns false.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingFrame.InitialBinaryContext">
            <summary>Returns the initial binary context set during construction of this frame. See also
            <see cref="P:ZeroC.Ice.OutgoingFrame.BinaryContextOverride"/>.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingFrame.Payload">
            <summary>Returns the payload of this frame.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingFrame.PayloadCompressionFormat">
            <summary>Returns the payload's compression format.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingFrame.PayloadEncoding">
            <summary>Returns the encoding of the payload of this frame.</summary>
            <remarks>The header of the frame is always encoded using the frame protocol's encoding.</remarks>
        </member>
        <member name="P:ZeroC.Ice.OutgoingFrame.PayloadSize">
            <summary>Returns the number of bytes in the payload.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingFrame.Protocol">
            <summary>Returns the Ice protocol of this frame.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingFrame.StreamDataWriter">
            <summary>The stream data writer if the request or response has an outgoing stream param. The writer is
            called after the request or response frame is sent over a socket stream.</summary>
        </member>
        <member name="M:ZeroC.Ice.OutgoingFrame.CompressPayload(ZeroC.Ice.CompressionFormat)">
            <summary>Compresses the encapsulation payload using the specified compression format (by default, gzip).
            Compressed encapsulation payload is only supported with the 2.0 encoding.</summary>
            <returns>A <see cref="T:ZeroC.Ice.CompressionResult"/> value indicating the result of the compression operation.
            </returns>
        </member>
        <member name="M:ZeroC.Ice.OutgoingFrame.ToIncoming">
            <summary>Returns a new incoming frame built from this outgoing frame. This method is used for colocated
            calls.</summary>
        </member>
        <member name="M:ZeroC.Ice.OutgoingFrame.GetBinaryContext">
            <summary>Gets or builds a combined binary context using InitialBinaryContext and _binaryContextOverride.
            This method is used for colocated calls.</summary>
        </member>
        <member name="M:ZeroC.Ice.OutgoingFrame.WriteHeader(ZeroC.Ice.OutputStream)">
            <summary>Writes the header of a frame. This header does not include the frame's prologue.</summary>
            <param name="ostr">The output stream.</param>
        </member>
        <member name="T:ZeroC.Ice.OutgoingRequestFrame">
            <summary>Represents an ice1 or ice2 request frame sent by the application.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingRequestFrame.Context">
            <summary>The context of this request frame as a read-only dictionary.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingRequestFrame.CancellationToken">
            <summary>A cancellation token that receives the cancellation requests. The cancellation token takes into
            account the invocation timeout and the cancellation token provided by the application.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingRequestFrame.Deadline">
            <summary>The deadline corresponds to the request's expiration time. Once the deadline is reached, the
            caller is no longer interested in the response and discards the request. The server-side runtime does not
            enforce this deadline - it's provided "for information" to the application. The Ice client runtime sets
            this deadline automatically using the proxy's invocation timeout and sends it with ice2 requests but not
            with ice1 requests. As a result, the deadline for an ice1 request is always <see cref="F:System.DateTime.MaxValue"/>
            on the server-side even though the invocation timeout is usually not infinite.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingRequestFrame.Facet">
            <summary>The facet of the target Ice object.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingRequestFrame.Identity">
            <summary>The identity of the target Ice object.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingRequestFrame.InitialBinaryContext">
            <inheritdoc/>
        </member>
        <member name="P:ZeroC.Ice.OutgoingRequestFrame.IsIdempotent">
            <summary>When true, the operation is idempotent.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingRequestFrame.Location">
            <summary>The location of the target Ice object. With ice1, it is always empty.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingRequestFrame.Operation">
            <summary>The operation called on the Ice object.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingRequestFrame.PayloadEncoding">
            <inheritdoc/>
        </member>
        <member name="P:ZeroC.Ice.OutgoingRequestFrame.WritableContext">
            <summary>WritableContext is a writable version of Context. Its entries are always the same as Context's
            entries.</summary>
        </member>
        <member name="M:ZeroC.Ice.OutgoingRequestFrame.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.OutgoingRequestFrame.WithArgs``1(ZeroC.Ice.IObjectPrx,System.String,System.Boolean,System.Boolean,ZeroC.Ice.FormatType,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},``0,ZeroC.Ice.OutputStreamWriter{``0},System.Threading.CancellationToken)">
            <summary>Creates a new <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for an operation with a single non-struct
            parameter.</summary>
            <typeparam name="T">The type of the operation's parameter.</typeparam>
            <param name="proxy">A proxy to the target Ice object. This method uses the communicator, identity, facet,
            encoding and context of this proxy to create the request frame.</param>
            <param name="operation">The operation to invoke on the target Ice object.</param>
            <param name="idempotent">True when operation is idempotent, otherwise false.</param>
            <param name="compress">True if the request should be compressed, false otherwise.</param>
            <param name="format">The format to use when writing class instances in case <c>args</c> contains class
            instances.</param>
            <param name="context">An optional explicit context. When non null, it overrides both the context of the
            proxy and the communicator's current context (if any).</param>
            <param name="args">The argument(s) to write into the frame.</param>
            <param name="writer">The <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> that writes the arguments into the frame.
            </param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>A new OutgoingRequestFrame.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutgoingRequestFrame.WithArgs``1(ZeroC.Ice.IObjectPrx,System.String,System.Boolean,System.Boolean,ZeroC.Ice.FormatType,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},``0,System.Action{ZeroC.Ice.SocketStream,``0,System.Threading.CancellationToken},System.Threading.CancellationToken)">
            <summary>Creates a new <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for an operation with a single stream
            parameter.</summary>
            <typeparam name="T">The type of the operation's parameter.</typeparam>
            <param name="proxy">A proxy to the target Ice object. This method uses the communicator, identity, facet,
            encoding and context of this proxy to create the request frame.</param>
            <param name="operation">The operation to invoke on the target Ice object.</param>
            <param name="idempotent">True when operation is idempotent, otherwise false.</param>
            <param name="compress">True if the request should be compressed, false otherwise.</param>
            <param name="format">The format to use when writing class instances in case <c>args</c> contains class
            instances.</param>
            <param name="context">An optional explicit context. When non null, it overrides both the context of the
            proxy and the communicator's current context (if any).</param>
            <param name="args">The argument(s) to write into the frame.</param>
            <param name="writer">The delegate that will send the streamable.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>A new OutgoingRequestFrame.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutgoingRequestFrame.WithArgs``1(ZeroC.Ice.IObjectPrx,System.String,System.Boolean,System.Boolean,ZeroC.Ice.FormatType,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},``0@,ZeroC.Ice.OutputStreamValueWriter{``0},System.Threading.CancellationToken)">
            <summary>Creates a new <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for an operation with multiple parameters or a
            single struct parameter.</summary>
            <typeparam name="T">The type of the operation's parameters; it's a tuple type for an operation with multiple
            parameters.</typeparam>
            <param name="proxy">A proxy to the target Ice object. This method uses the communicator, identity, facet,
            encoding and context of this proxy to create the request frame.</param>
            <param name="operation">The operation to invoke on the target Ice object.</param>
            <param name="idempotent">True when operation is idempotent, otherwise false.</param>
            <param name="compress">True if the request should be compressed, false otherwise.</param>
            <param name="format">The format to use when writing class instances in case <c>args</c> contains class
            instances.</param>
            <param name="context">An optional explicit context. When non null, it overrides both the context of the
            proxy and the communicator's current context (if any).</param>
            <param name="args">The argument(s) to write into the frame.</param>
            <param name="writer">The <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> that writes the arguments into the frame.
            </param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>A new OutgoingRequestFrame.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutgoingRequestFrame.WithArgs``1(ZeroC.Ice.IObjectPrx,System.String,System.Boolean,System.Boolean,ZeroC.Ice.FormatType,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},``0@,ZeroC.Ice.OutputStreamValueWriterWithStreamable{``0},System.Threading.CancellationToken)">
            <summary>Creates a new <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for an operation with multiple parameters where
            one of the parameter is a stream parameter.</summary>
            <typeparam name="T">The type of the operation's parameters; it's a tuple type for an operation with multiple
            parameters.</typeparam>
            <param name="proxy">A proxy to the target Ice object. This method uses the communicator, identity, facet,
            encoding and context of this proxy to create the request frame.</param>
            <param name="operation">The operation to invoke on the target Ice object.</param>
            <param name="idempotent">True when operation is idempotent, otherwise false.</param>
            <param name="compress">True if the request should be compressed, false otherwise.</param>
            <param name="format">The format to use when writing class instances in case <c>args</c> contains class
            instances.</param>
            <param name="context">An optional explicit context. When non null, it overrides both the context of the
            proxy and the communicator's current context (if any).</param>
            <param name="args">The argument(s) to write into the frame.</param>
            <param name="writer">The delegate that writes the arguments into the frame.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>A new OutgoingRequestFrame.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutgoingRequestFrame.WithEmptyArgs(ZeroC.Ice.IObjectPrx,System.String,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates a new <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for an operation with no parameter.</summary>
            <param name="proxy">A proxy to the target Ice object. This method uses the communicator, identity, facet,
            encoding and context of this proxy to create the request frame.</param>
            <param name="operation">The operation to invoke on the target Ice object.</param>
            <param name="idempotent">True when operation is idempotent, otherwise false.</param>
            <param name="context">An optional explicit context. When non null, it overrides both the context of the
            proxy and the communicator's current context (if any).</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>A new OutgoingRequestFrame.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutgoingRequestFrame.#ctor(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingRequestFrame,System.Boolean,System.Threading.CancellationToken)">
            <summary>Constructs an outgoing request frame from the given incoming request frame.</summary>
            <param name="proxy">A proxy to the target Ice object. This method uses the communicator, identity, facet
            and context of this proxy to create the request frame.</param>
            <param name="request">The incoming request from which to create an outgoing request.</param>
            <param name="forwardBinaryContext">When true (the default), the new frame uses the incoming request frame's
            binary context as a fallback - all the entries in this binary context are added before the frame is sent,
            except for entries previously added by invocation interceptors.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.OutgoingRequestFrame.ToIncoming">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.OutgoingRequestFrame.WriteHeader(ZeroC.Ice.OutputStream)">
            <inheritdoc/>
        </member>
        <member name="T:ZeroC.Ice.OutgoingResponseFrame">
            <summary>Represents a response protocol frame sent by the application.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutgoingResponseFrame.InitialBinaryContext">
            <inheritdoc/>
        </member>
        <member name="P:ZeroC.Ice.OutgoingResponseFrame.PayloadEncoding">
            <inheritdoc/>
        </member>
        <member name="P:ZeroC.Ice.OutgoingResponseFrame.ResultType">
            <summary>The result type; see <see cref="T:ZeroC.Ice.ResultType"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.OutgoingResponseFrame.WithVoidReturnValue(ZeroC.Ice.Current)">
            <summary>Creates a new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for an operation that returns void.</summary>
            <param name="current">The Current object for the corresponding incoming request.</param>
            <returns>A new OutgoingResponseFrame.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutgoingResponseFrame.WithReturnValue``1(ZeroC.Ice.Current,System.Boolean,ZeroC.Ice.FormatType,``0,ZeroC.Ice.OutputStreamWriter{``0})">
            <summary>Creates a new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for an operation with a non-tuple non-struct
            return type.</summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="current">The Current object for the corresponding incoming request.</param>
            <param name="compress">True if the response should be compressed, false otherwise.</param>
            <param name="format">The format to use when writing class instances in case <c>returnValue</c> contains
            class instances.</param>
            <param name="returnValue">The return value to write into the frame.</param>
            <param name="writer">The <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> that writes the return value into the frame.
            </param>
            <returns>A new OutgoingResponseFrame.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutgoingResponseFrame.WithReturnValue``1(ZeroC.Ice.Current,System.Boolean,ZeroC.Ice.FormatType,``0,System.Action{ZeroC.Ice.SocketStream,``0,System.Threading.CancellationToken})">
            <summary>Creates a new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for an operation with a single stream return
            value.</summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="current">The Current object for the corresponding incoming request.</param>
            <param name="compress">True if the response should be compressed, false otherwise.</param>
            <param name="format">The format to use when writing class instances in case <c>returnValue</c> contains
            class instances.</param>
            <param name="returnValue">The return value to write into the frame.</param>
            <param name="writer">The delegate that will send the stream return value.</param>
            <returns>A new OutgoingResponseFrame.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutgoingResponseFrame.WithReturnValue``1(ZeroC.Ice.Current,System.Boolean,ZeroC.Ice.FormatType,``0@,ZeroC.Ice.OutputStreamValueWriter{``0})">
            <summary>Creates a new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for an operation with a tuple or struct return
            type.</summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="current">The Current object for the corresponding incoming request.</param>
            <param name="compress">True if the response should be compressed, false otherwise.</param>
            <param name="format">The format to use when writing class instances in case <c>returnValue</c> contains
            class instances.</param>
            <param name="returnValue">The return value to write into the frame.</param>
            <param name="writer">The <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> that writes the return value into the frame.
            </param>
            <returns>A new OutgoingResponseFrame.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutgoingResponseFrame.WithReturnValue``1(ZeroC.Ice.Current,System.Boolean,ZeroC.Ice.FormatType,``0@,ZeroC.Ice.OutputStreamValueWriterWithStreamable{``0})">
            <summary>Creates a new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for an operation with a tuple return
            type where the tuple return type contains a stream return value.</summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="current">The Current object for the corresponding incoming request.</param>
            <param name="compress">True if the response should be compressed, false otherwise.</param>
            <param name="format">The format to use when writing class instances in case <c>returnValue</c> contains
            class instances.</param>
            <param name="returnValue">The return value to write into the frame.</param>
            <param name="writer">The delegate that writes the return value into the frame.</param>
            <returns>A new OutgoingResponseFrame.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutgoingResponseFrame.#ctor(ZeroC.Ice.IncomingRequestFrame,ZeroC.Ice.IncomingResponseFrame,System.Boolean)">
            <summary>Constructs an outgoing response frame from the given incoming response frame. The new response will
            use the protocol of the <paramref name="request"/> and the encoding of <paramref name="response"/>.</summary>
            <param name="request">The request for which this constructor creates a response.</param>
            <param name="response">The incoming response used to construct the new outgoing response frame.</param>
            <param name="forwardBinaryContext">When true (the default), the new frame uses the incoming response frame's
            binary context as a fallback - all the entries in this binary context are added before the frame is sent,
            except for entries previously added by dispatch interceptors.</param>
        </member>
        <member name="M:ZeroC.Ice.OutgoingResponseFrame.#ctor(ZeroC.Ice.IncomingRequestFrame,ZeroC.Ice.RemoteException)">
            <summary>Constructs a response frame that represents a failure and contains an exception.</summary>
            <param name="request">The incoming request for which this constructor creates a response.</param>
            <param name="exception">The exception to store into the frame's payload.</param>
        </member>
        <member name="M:ZeroC.Ice.OutgoingResponseFrame.ToIncoming">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.OutgoingResponseFrame.WriteHeader(ZeroC.Ice.OutputStream)">
            <inheritdoc/>
        </member>
        <member name="T:ZeroC.Ice.OutputStream">
            <summary>Writes data into a byte buffer using the Ice encoding.</summary>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.IceEndSlice(System.Boolean)">
            <summary>Marks the end of a slice for a class instance or user exception. This is an Ice-internal method
            marked public because it's called by the generated code.</summary>
            <param name="lastSlice">True when it's the last (least derived) slice of the instance; otherwise, false.
            </param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.IceStartFirstSlice(System.String[],System.Nullable{ZeroC.Ice.SlicedData},System.String,System.Nullable{ZeroC.Ice.RemoteExceptionOrigin},System.Nullable{System.Int32})">
            <summary>Starts writing the first slice of a class or exception instance. This is an Ice-internal method
            marked public because it's called by the generated code.</summary>
            <param name="allTypeIds">The type IDs of all slices of the instance (excluding sliced-off slices), from
            most derived to least derived.</param>
            <param name="slicedData">The preserved sliced-off slices, if any.</param>
            <param name="errorMessage">The exception error message (provided only by exceptions).</param>
            <param name="origin">The exception origin (provided only by exceptions).</param>
            <param name="compactId">The compact ID of this slice, if any. Used by the 1.1 encoding.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.IceStartNextSlice(System.String,System.Nullable{System.Int32})">
            <summary>Starts writing the next (i.e. not first) slice of a class or exception instance. This is an
            Ice-internal method marked public because it's called by the generated code.</summary>
            <param name="typeId">The type ID of this slice.</param>
            <param name="compactId">The compact ID of this slice, if any. Used by the 1.1 encoding.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteClass(ZeroC.Ice.AnyClass,System.String)">
            <summary>Writes a class instance to the stream.</summary>
            <param name="v">The class instance to write. This instance cannot be null.</param>
            <param name="formalTypeId">The type ID of the formal type of the parameter or data member being written.
            Use null when the type of the parameter/data member is AnyClass.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteException(ZeroC.Ice.RemoteException)">
            <summary>Writes a remote exception to the stream.</summary>
            <param name="v">The remote exception to write.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteNullableClass(ZeroC.Ice.AnyClass,System.String)">
            <summary>Writes a class instance to the stream, or null.</summary>
            <param name="v">The class instance to write, or null.</param>
            <param name="formalTypeId">The type ID of the formal type of the parameter or data member being written.
            Use null when the type of the parameter/data member is AnyClass.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteSlicedData(ZeroC.Ice.SlicedData,System.String[],System.String,System.Nullable{ZeroC.Ice.RemoteExceptionOrigin})">
            <summary>Writes sliced-off slices to the stream.</summary>
            <param name="slicedData">The sliced-off slices to write.</param>
            <param name="baseTypeIds">The type IDs of less derived slices.</param>
            <param name="errorMessage">For exceptions, the exception's error message.</param>
            <param name="origin">For exceptions, the exception's origin.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.RegisterTypeId(System.String)">
            <summary>Registers or looks up a type ID in the the _typeIdMap.</summary>
            <param name="typeId">The type ID to register or lookup.</param>
            <returns>The index in _typeIdMap if this type ID was previously registered; otherwise, -1.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteInstance(ZeroC.Ice.AnyClass,System.String)">
            <summary>Writes this class instance inline if not previously marshaled, otherwise just write its instance
            ID.</summary>
            <param name="v">The class instance.</param>
            <param name="formalTypeId">The type ID of the formal parameter or data member being marshaled.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTypeId11(System.String,System.Nullable{System.Int32})">
            <summary>Writes the type ID or compact ID immediately after the slice flags byte, and updates the slice
            flags byte as needed.</summary>
            <param name="typeId">The type ID of the current slice.</param>
            <param name="compactId">The compact ID of the current slice.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTypeId20(System.String[],System.String,System.Nullable{ZeroC.Ice.RemoteExceptionOrigin})">
            <summary>Writes the type ID or type ID sequence immediately after the slice flags byte of the first slice,
            and updates the slice flags byte as needed. Applies formal type optimization (class only), if possible.
            </summary>
            <param name="allTypeIds">The type IDs of all slices of this class or exception instance.</param>
            <param name="errorMessage">The exception's error message. Provided only for exceptions.</param>
            <param name="origin">The exception's origin. Provided only for exceptions.</param>
        </member>
        <member name="T:ZeroC.Ice.OutputStream.Position">
            <summary>Represents a position in the OutputStream's buffer. This position consists of the index of the
            segment in the list and the offset into the segment.</summary>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.Position.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new position from the segment and offset values.</summary>
            <param name="segment">The zero based index of the segment.</param>
            <param name="offset">The offset into the segment.</param>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.Position.Segment">
            <summary>The zero based index of the segment.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.Position.Offset">
            <summary>The offset into the segment.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromBool">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <c>bool</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromByte">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <c>byte</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromDouble">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <c>double</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromFloat">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <c>float</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromInt">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <c>int</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromLong">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <c>long</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromShort">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <c>short</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromString">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <c>string</c> instances.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromUInt">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <c>uint</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromULong">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <c>ulong</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromUShort">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <c>ushort</c> values.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromVarInt">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write var int values.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromVarLong">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write var long values.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromVarUInt">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write var uint values.</summary>
        </member>
        <member name="F:ZeroC.Ice.OutputStream.IceWriterFromVarULong">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write var ulong values.</summary>
        </member>
        <member name="P:ZeroC.Ice.OutputStream.Encoding">
            <summary>The encoding used when writing to this stream.</summary>
            <value>The encoding.</value>
        </member>
        <member name="P:ZeroC.Ice.OutputStream.Size">
            <summary>Determines the current size of the stream. This corresponds to the number of bytes already written
            to the stream.</summary>
            <value>The current size.</value>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteBool(System.Boolean)">
            <summary>Writes a boolean to the stream.</summary>
            <param name="v">The boolean to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteByte(System.Byte)">
            <summary>Writes a byte to the stream.</summary>
            <param name="v">The byte to write.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteDouble(System.Double)">
            <summary>Writes a double to the stream.</summary>
            <param name="v">The double to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteFloat(System.Single)">
            <summary>Writes a float to the stream.</summary>
            <param name="v">The float to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteInt(System.Int32)">
            <summary>Writes an int to the stream.</summary>
            <param name="v">The int to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteLong(System.Int64)">
            <summary>Writes a long to the stream.</summary>
            <param name="v">The long to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteShort(System.Int16)">
            <summary>Writes a short to the stream.</summary>
            <param name="v">The short to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteSize(System.Int32)">
            <summary>Writes a size to the stream.</summary>
            <param name="v">The size.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteString(System.String)">
            <summary>Writes a string to the stream.</summary>
            <param name="v">The string to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteUInt(System.UInt32)">
            <summary>Writes a uint to the stream.</summary>
            <param name="v">The uint to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteULong(System.UInt64)">
            <summary>Writes a ulong to the stream.</summary>
            <param name="v">The ulong to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteUShort(System.UInt16)">
            <summary>Writes a ushort to the stream.</summary>
            <param name="v">The ushort to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteVarInt(System.Int32)">
            <summary>Writes an int to stream, using Ice's variable-size integer encoding.</summary>
            <param name="v">The int to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteVarLong(System.Int64)">
            <summary>Writes a long to stream, using Ice's variable-size integer encoding, with the minimum number of
            bytes required by the encoding.</summary>
            <param name="v">The long to write to the stream. It must be in the range [-2^61..2^61 - 1].</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteVarUInt(System.UInt32)">
            <summary>Writes a uint to stream, using Ice's variable-size integer encoding.</summary>
            <param name="v">The uint to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteVarULong(System.UInt64)">
            <summary>Writes a ulong to stream, using Ice's variable-size integer encoding, with the minimum number of
            bytes required by the encoding.</summary>
            <param name="v">The ulong to write to the stream. It must be in the range [0..2^62 - 1].</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteArray``1(``0[])">
            <summary>Writes an array of fixed-size numeric values, such as int and long, to the stream.</summary>
            <param name="v">The array of numeric values.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteDictionary``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},ZeroC.Ice.OutputStreamWriter{``0},ZeroC.Ice.OutputStreamWriter{``1})">
            <summary>Writes a dictionary to the stream.</summary>
            <param name="v">The dictionary to write.</param>
            <param name="keyWriter">The delegate that writes each key to the stream.</param>
            <param name="valueWriter">The delegate that writes each value to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteDictionary``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Boolean,ZeroC.Ice.OutputStreamWriter{``0},ZeroC.Ice.OutputStreamWriter{``1})">
            <summary>Writes a dictionary to the stream. The dictionary's value type is reference type.</summary>
            <param name="v">The dictionary to write.</param>
            <param name="withBitSequence">When true, encodes entries with a null value using a bit sequence; otherwise,
            false.</param>
            <param name="keyWriter">The delegate that writes each key to the stream.</param>
            <param name="valueWriter">The delegate that writes each non-null value to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteDictionary``2(System.Collections.Generic.IReadOnlyDictionary{``0,System.Nullable{``1}},ZeroC.Ice.OutputStreamWriter{``0},ZeroC.Ice.OutputStreamWriter{``1})">
            <summary>Writes a dictionary to the stream. The dictionary's value type is a nullable value type.
            </summary>
            <param name="v">The dictionary to write.</param>
            <param name="keyWriter">The delegate that writes each key to the stream.</param>
            <param name="valueWriter">The delegate that writes each non-null value to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteNullableProxy``1(``0)">
            <summary>Writes a nullable proxy to the stream.</summary>
            <param name="v">The proxy to write, or null.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteProxy``1(``0)">
            <summary>Writes a proxy to the stream.</summary>
            <param name="v">The proxy to write. This proxy cannot be null.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteSequence``1(System.ReadOnlySpan{``0})">
            <summary>Writes a sequence of fixed-size numeric values, such as int and long, to the stream.</summary>
            <param name="v">The sequence of numeric values represented by a ReadOnlySpan.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteSequence``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Writes a sequence of fixed-size numeric values, such as int and long, to the stream.</summary>
            <param name="v">The sequence of numeric values.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteSequence``1(System.Collections.Generic.IEnumerable{``0},ZeroC.Ice.OutputStreamWriter{``0})">
            <summary>Writes a sequence to the stream.</summary>
            <param name="v">The sequence to write.</param>
            <param name="writer">The delegate that writes each element to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteSequence``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,ZeroC.Ice.OutputStreamWriter{``0})">
            <summary>Writes a sequence to the stream. The elements of the sequence are reference types.</summary>
            <param name="v">The sequence to write.</param>
            <param name="withBitSequence">True to encode null elements using a bit sequence; otherwise, false.</param>
            <param name="writer">The delegate that writes each non-null element to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteSequence``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}},ZeroC.Ice.OutputStreamWriter{``0})">
            <summary>Writes a sequence of nullable values to the stream.</summary>
            <param name="v">The sequence to write.</param>
            <param name="writer">The delegate that writes each non-null value to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteStruct``1(``0)">
            <summary>Writes a mapped Slice struct to the stream.</summary>
            <param name="v">The struct instance to write.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedBool(System.Int32,System.Nullable{System.Boolean})">
            <summary>Writes a tagged boolean to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The boolean to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedByte(System.Int32,System.Nullable{System.Byte})">
            <summary>Writes a tagged byte to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The byte to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedDouble(System.Int32,System.Nullable{System.Double})">
            <summary>Writes a tagged double to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The double to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedFloat(System.Int32,System.Nullable{System.Single})">
            <summary>Writes a tagged float to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The float to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedInt(System.Int32,System.Nullable{System.Int32})">
            <summary>Writes a tagged int to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The int to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedLong(System.Int32,System.Nullable{System.Int64})">
            <summary>Writes a tagged long to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The long to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedSize(System.Int32,System.Nullable{System.Int32})">
            <summary>Writes a tagged size to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The size.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedShort(System.Int32,System.Nullable{System.Int16})">
            <summary>Writes a tagged short to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The short to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedString(System.Int32,System.String)">
            <summary>Writes a tagged string to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The string to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedUInt(System.Int32,System.Nullable{System.UInt32})">
            <summary>Writes a tagged uint to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The uint to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedULong(System.Int32,System.Nullable{System.UInt64})">
            <summary>Writes a tagged ulong to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The ulong to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedUShort(System.Int32,System.Nullable{System.UInt16})">
            <summary>Writes a tagged ushort to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The ushort to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedVarInt(System.Int32,System.Nullable{System.Int32})">
            <summary>Writes a tagged int to stream, using Ice's variable-size integer encoding.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The int to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedVarLong(System.Int32,System.Nullable{System.Int64})">
            <summary>Writes a tagged long to stream, using Ice's variable-size integer encoding.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The long to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedVarUInt(System.Int32,System.Nullable{System.UInt32})">
            <summary>Writes a tagged uint to stream, using Ice's variable-size integer encoding.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The uint to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedVarULong(System.Int32,System.Nullable{System.UInt64})">
            <summary>Writes a tagged ulong to stream, using Ice's variable-size integer encoding.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The ulong to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedArray``1(System.Int32,``0[])">
            <summary>Writes a tagged array of fixed-size numeric values to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The array to write.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedDictionary``2(System.Int32,System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Int32,ZeroC.Ice.OutputStreamWriter{``0},ZeroC.Ice.OutputStreamWriter{``1})">
            <summary>Writes a tagged dictionary with fixed-size entries to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The dictionary to write.</param>
            <param name="entrySize">The size of each entry (key + value), in bytes.</param>
            <param name="keyWriter">The delegate that writes each key to the stream.</param>
            <param name="valueWriter">The delegate that writes each value to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedDictionary``2(System.Int32,System.Collections.Generic.IReadOnlyDictionary{``0,``1},ZeroC.Ice.OutputStreamWriter{``0},ZeroC.Ice.OutputStreamWriter{``1})">
            <summary>Writes a tagged dictionary with variable-size elements to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The dictionary to write.</param>
            <param name="keyWriter">The delegate that writes each key to the stream.</param>
            <param name="valueWriter">The delegate that writes each value to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedDictionary``2(System.Int32,System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Boolean,ZeroC.Ice.OutputStreamWriter{``0},ZeroC.Ice.OutputStreamWriter{``1})">
            <summary>Writes a tagged dictionary to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The dictionary to write.</param>
            <param name="withBitSequence">When true, encodes entries with a null value using a bit sequence; otherwise,
            false.</param>
            <param name="keyWriter">The delegate that writes each key to the stream.</param>
            <param name="valueWriter">The delegate that writes each value to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedDictionary``2(System.Int32,System.Collections.Generic.IReadOnlyDictionary{``0,System.Nullable{``1}},ZeroC.Ice.OutputStreamWriter{``0},ZeroC.Ice.OutputStreamWriter{``1})">
            <summary>Writes a tagged dictionary to the stream. The dictionary's value type is a nullable value type.
            </summary>
            <param name="tag">The tag.</param>
            <param name="v">The dictionary to write.</param>
            <param name="keyWriter">The delegate that writes each key to the stream.</param>
            <param name="valueWriter">The delegate that writes each non-null value to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedProxy(System.Int32,ZeroC.Ice.IObjectPrx)">
            <summary>Writes a tagged proxy to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The proxy to write.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedSequence``1(System.Int32,System.ReadOnlySpan{``0})">
            <summary>Writes a tagged sequence of fixed-size numeric values to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The sequence to write.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedSequence``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>Writes a tagged sequence of fixed-size numeric values to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The sequence to write.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedSequence``1(System.Int32,System.Collections.Generic.IEnumerable{``0},ZeroC.Ice.OutputStreamWriter{``0})">
            <summary>Writes a tagged sequence of variable-size elements to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The sequence to write.</param>
            <param name="writer">The delegate that writes each element to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedSequence``1(System.Int32,System.Collections.Generic.IEnumerable{``0},System.Int32,ZeroC.Ice.OutputStreamWriter{``0})">
            <summary>Writes a tagged sequence of fixed-size values to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The sequence to write.</param>
            <param name="elementSize">The fixed size of each element of the sequence, in bytes.</param>
            <param name="writer">The delegate that writes each element to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedSequence``1(System.Int32,System.Collections.Generic.IEnumerable{``0},System.Boolean,ZeroC.Ice.OutputStreamWriter{``0})">
            <summary>Writes a tagged sequence of nullable elements to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The sequence to write.</param>
            <param name="withBitSequence">True to encode null elements using a bit sequence; otherwise, false.</param>
            <param name="writer">The delegate that writes each non-null element to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedSequence``1(System.Int32,System.Collections.Generic.IEnumerable{System.Nullable{``0}},ZeroC.Ice.OutputStreamWriter{``0})">
            <summary>Writes a tagged sequence of nullable values to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The sequence to write.</param>
            <param name="writer">The delegate that writes each non-null element to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedStruct``1(System.Int32,System.Nullable{``0},System.Int32)">
            <summary>Writes a tagged fixed-size struct to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The struct to write.</param>
            <param name="fixedSize">The size of the struct, in bytes.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedStruct``1(System.Int32,System.Nullable{``0})">
            <summary>Writes a tagged variable-size struct to the stream.</summary>
            <param name="tag">The tag.</param>
            <param name="v">The struct to write.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteBitSequence(System.Int32)">
            <summary>Writes a sequence of bits to the stream, and returns this sequence backed by the stream's buffer.
            </summary>
            <param name="bitSize">The minimum number of bits in the sequence.</param>
            <returns>The bit sequence, with all bits set. The actual size of the sequence is a multiple of 8.
            </returns>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.GetSizeLength20(System.Int64)">
            <summary>Computes the minimum number of bytes needed to write a variable-length size with the 2.0 encoding.
            </summary>
            <remarks>The parameter is a long and not a varulong because sizes and size-like values are usually passed
            around as signed integers, even though sizes cannot be negative and are encoded like varulong values.
            </remarks>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.EndFixedLengthSize(ZeroC.Ice.OutputStream.Position,System.Int32)">
            <summary>Computes the amount of data written from the start position to the current position and writes that
            size at the start position (as a fixed-length size). The size does not include its own encoded length.
            </summary>
            <param name="start">The start position.</param>
            <param name="sizeLength">The number of bytes used to marshal the size 1, 2 or 4.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.Finish">
            <summary>Completes the current encapsulation (if any) and finishes off the underlying buffer. You should not
            write additional data to this output stream or its underlying buffer after calling Finish, however rewriting
            previous data (with for example <see cref="M:ZeroC.Ice.OutputStream.EndFixedLengthSize(ZeroC.Ice.OutputStream.Position,System.Int32)"/>) is fine.</summary>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.RewriteFixedLengthSize20(System.Int32,ZeroC.Ice.OutputStream.Position,System.Int32)">
            <summary>Writes a size on a fixed number of bytes at the given position of the stream.</summary>
            <param name="size">The size to write.</param>
            <param name="pos">The position to write to.</param>
            <param name="sizeLength">The number of bytes used to encode the size. Can be 1, 2 or 4.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.StartFixedLengthSize(System.Int32)">
            <summary>Returns the current position and writes placeholder for a fixed-length size value. The
            position must be used to rewrite the size later.</summary>
            <param name="sizeLength">The number of bytes reserved to write the fixed-length size.</param>
            <returns>The position before writing the size.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteByteSpan(System.ReadOnlySpan{System.Byte})">
            <summary>Writes a span of bytes. The stream capacity is expanded if required, the size and tail position are
            increased according to the span length.</summary>
            <param name="span">The data to write as a span of bytes.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteEmptyEncapsulation(ZeroC.Ice.Encoding)">
            <summary>Writes an empty encapsulation.</summary>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.GetVarLongEncodedSizeExponent(System.Int64)">
            <summary>Gets the minimum number of bytes needed to encode a long value with the varlong encoding as an
            exponent of 2.</summary>
            <param name="value">The value to encode.</param>
            <returns>N where 2^N is the number of bytes needed to encode value with Ice's varlong encoding.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.GetVarULongEncodedSizeExponent(System.UInt64)">
            <summary>Gets the mimimum number of bytes needed to encode a long value with the varulong encoding as an
            exponent of 2.</summary>
            <param name="value">The value to encode.</param>
            <returns>N where 2^N is the number of bytes needed to encode value with varulong encoding.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.Distance(ZeroC.Ice.OutputStream.Position)">
            <summary>Returns the distance in bytes from start position to the current position.</summary>
            <param name="start">The start position from where to calculate distance to current position.</param>
            <returns>The distance in bytes from the current position to the start position.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.Expand(System.Int32)">
            <summary>Expands the stream to make room for more data. If the bytes remaining in the stream are not enough
            to hold the given number of bytes, allocates a new byte array. The caller should then consume the new bytes
            immediately; calling Expand repeatedly is not supported.</summary>
            <param name="n">The number of bytes to accommodate in the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.GetSizeLength(System.Int32)">
            <summary>Computes the minimum number of bytes needed to write a variable-length size with the current
            encoding.</summary>
            <param name="size">The size.</param>
            <returns>The minimum number of bytes.</returns>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.RewriteByte(System.Byte,ZeroC.Ice.OutputStream.Position)">
            <summary>Writes a byte at a given position of the stream.</summary>
            <param name="v">The byte value to write.</param>
            <param name="pos">The position to write to.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.RewriteEncapsulationSize(System.Int32,ZeroC.Ice.OutputStream.Position,System.Int32)">
            <summary>Rewrites an encapsulation size on a fixed number of bytes at the given position of the stream.
            </summary>
            <param name="size">The number of bytes in the encapsulation, without taking into account the bytes for the
            size itself.</param>
            <param name="pos">The position to write to.</param>
            <param name="sizeLength">The number of bytes used to encode the size with the 2.0 encoding. Can be 1, 2 or
            4.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.RewriteFixedLengthSize11(System.Int32,ZeroC.Ice.OutputStream.Position)">
            <summary>Writes a size on 4 bytes at the given position of the stream.</summary>
            <param name="size">The size to write.</param>
            <param name="pos">The position to write to.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteEncapsulationHeader(System.Int32,ZeroC.Ice.Encoding)">
            <summary>Writes an encapsulation header.</summary>
            <param name="size">The size of the encapsulation, in bytes. This size does not include the length of the
            encoded size itself.</param>
            <param name="encoding">The encoding of the new encapsulation.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteEncapsulationHeader(ZeroC.Ice.Encoding,System.Int32)">
            <summary>Writes an encapsulation header with a placeholder size.</summary>
            <param name="encoding">The encoding of the new encapsulation.</param>
            <param name="sizeLength">The number of bytes used to encode the size, used only with the 2.0 encoding. Can
            be 1, 2 or 4.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteFixedSizeNumeric``1(``0)">
            <summary>Writes a fixed-size numeric value to the stream.</summary>
            <param name="v">The numeric value to write to the stream.</param>
        </member>
        <member name="M:ZeroC.Ice.OutputStream.WriteTaggedParamHeader(System.Int32,ZeroC.Ice.EncodingDefinitions.TagFormat)">
            <summary>Writes the header for a tagged parameter or data member.</summary>
            <param name="tag">The numeric tag associated with the parameter or data member.</param>
            <param name="format">The tag format.</param>
        </member>
        <member name="T:ZeroC.Ice.IStreamableStruct">
            <summary>All mapped structs generated by the Slice compiler implement IStreamableStruct.</summary>
        </member>
        <member name="M:ZeroC.Ice.IStreamableStruct.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Writes the instance to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The <see cref="T:ZeroC.Ice.OutputStream"/> to write to.</param>
        </member>
        <member name="T:ZeroC.Ice.OutputStreamWriter`1">
            <summary>A delegate that writes a value to an output stream.</summary>
            <typeparam name="T">The type of the value to write.</typeparam>
            <param name="ostr">The output stream to write to.</param>
            <param name="value">The value to write to the stream.</param>
        </member>
        <member name="T:ZeroC.Ice.OutputStreamValueWriter`1">
            <summary>A delegate that writes a value passed as in-reference to an output stream. This value typically
            corresponds to the argument tuple or return value tuple of an operation.</summary>
            <typeparam name="T">The type of the value to write (a struct).</typeparam>
            <param name="ostr">The output stream to write to.</param>
            <param name="value">The value to write to the stream.</param>
        </member>
        <member name="T:ZeroC.Ice.OutputStreamValueWriterWithStreamable`1">
            <summary>A delegate that writes a value passed as in-reference to an output stream. The value contains a
            stream parameter that will be sent using the returned stream data writer. This value typically corresponds
            to the argument tuple or return value tuple of an operation.</summary>
            <typeparam name="T">The type of the value to write (a struct).</typeparam>
            <param name="ostr">The output stream to write to.</param>
            <param name="value">The value to write to the stream.</param>
            <param name="cancel">The cancellation token to cancel the sending of the streamable parameter.</param>
            <returns>The stream data writer to write the streamable parameter.</returns>
        </member>
        <member name="T:ZeroC.Ice.Properties">
            <summary>Provides property-related extension methods for <see cref="T:ZeroC.Ice.Communicator"/> and
            <see cref="T:System.Collections.Generic.Dictionary`2"/> of strings.</summary>
        </member>
        <member name="M:ZeroC.Ice.Properties.GetPropertyAsBool(ZeroC.Ice.Communicator,System.String)">
            <summary>Gets the value of a property as a bool. If the property is not set, returns null.</summary>
            <param name="communicator">The communicator holding the properties.</param>
            <param name="name">The property name.</param>
            <returns>True if the property value is the "1" or "True", false if "0" or "False", or null. Values are
            case-insensitive.</returns>
        </member>
        <member name="M:ZeroC.Ice.Properties.GetPropertyAsByteSize(ZeroC.Ice.Communicator,System.String)">
            <summary>Gets the value of a property as a size in bytes. If the property is not set, returns null.
            The value must be an integer followed immediately by an optional size unit of 'K', 'M' or 'G'.
            These correspond to kilobytes, megabytes, or gigabytes, respectively.</summary>
            <param name="communicator">The communicator holding the properties.</param>
            <param name="name">The property name.</param>
            <returns>The property value parsed into an integer representing the number of bytes or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.Properties.GetPropertyAsEnum``1(ZeroC.Ice.Communicator,System.String)">
            <summary>Gets the value of a property as an enumerated type, the conversion does a case insensitive
            comparison of the property value with the enumerators and returns the matching enumerator or throws an
            exception if none matches the property value. If the property is not set, returns null.</summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <param name="communicator">The communicator holding the properties.</param>
            <param name="name">The property name.</param>
            <exception cref="T:ZeroC.Ice.InvalidConfigurationException">If the property value cannot be converted to one of the
            enumeration values.</exception>
            <returns>The enumerator value or null if the property was not set.</returns>
        </member>
        <member name="M:ZeroC.Ice.Properties.GetPropertyAsInt(ZeroC.Ice.Communicator,System.String)">
            <summary>Gets the value of a property as an integer. If the property is not set, returns null.</summary>
            <param name="communicator">The communicator holding the properties.</param>
            <param name="name">The property name.</param>
            <returns>The property value parsed into an integer or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.Properties.GetPropertyAsList(ZeroC.Ice.Communicator,System.String)">
            <summary>Gets the value of a property as an array of strings. If the property is not set, returns null. The
            value must contain strings separated by whitespace or comma. These strings can contain whitespace and
            commas if they are enclosed in single or double quotes. Within single quotes or double quotes, you can
            escape the quote in question with \, e.g. O'Reilly can be written as O'Reilly, "O'Reilly" or 'O\'Reilly'.
            </summary>
            <param name="communicator">The communicator holding the properties.</param>
            <param name="name">The property name.</param>
            <returns>The property value parsed into an array of strings or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.Properties.GetPropertyAsProxy``1(ZeroC.Ice.Communicator,System.String,ZeroC.Ice.ProxyFactory{``0})">
            <summary>Gets the value of a property as a proxy. If the property is not set, returns null. For ice1
            proxies, this method uses the property name to lookup sub-properties such as Name.InvocationTimeout and
            fill-in the corresponding property of new proxy. For ice2 proxies, this method is equivalent to parsing the
            property's value.</summary>
            <param name="communicator">The communicator holding the properties.</param>
            <param name="name">The property name.</param>
            <param name="factory">The proxy factory. Use IAPrx.Factory to create IAPrx proxies.</param>
            <returns>The property value parsed into a proxy or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.Properties.GetPropertyAsTimeSpan(ZeroC.Ice.Communicator,System.String)">
            <summary>Gets the value of a property as a TimeSpan. If the property is not set, returns null.
            The value must be an integer followed immediately by a time unit of 'ms', 's', 'm', 'h', or 'd'. These
            correspond to milliseconds, seconds, minutes, hours, and days, respectively. A value of "infinite" can be
            used to specify an infinite duration. </summary>
            <param name="communicator">The communicator holding the properties.</param>
            <param name="name">The property name.</param>
            <returns>The property value parsed into a TimeSpan or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.Properties.LoadIceConfigFile(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>Loads an Ice configuration file.</summary>
            <param name="into">The property dictionary into which the loaded properties are added.</param>
            <param name="configFile">The path to the Ice configuration file to load.</param>
        </member>
        <member name="M:ZeroC.Ice.Properties.ParseIceArgs(System.Collections.Generic.Dictionary{System.String,System.String},System.String[]@)">
            <summary>Extracts the reserved Ice properties from command-line args.</summary>
            <param name="into">The property dictionary into which the properties are added.</param>
            <param name="args">The command-line args.</param>
        </member>
        <member name="M:ZeroC.Ice.Properties.ParseArgs(System.Collections.Generic.Dictionary{System.String,System.String},System.String[]@,System.String)">
            <summary>Extracts properties from command-line args.</summary>
            <param name="into">The property dictionary into which the parsed properties are added.</param>
            <param name="args">The command-line args.</param>
            <param name="prefix">Only arguments that start with --prefix are extracted.</param>
        </member>
        <member name="T:ZeroC.Ice.Property">
            <summary>Helper struct used for property name validation.</summary>
        </member>
        <member name="T:ZeroC.Ice.ProtocolExtensions">
            <summary>Provides public extensions methods for <see cref="T:ZeroC.Ice.Protocol"/>.</summary>
        </member>
        <member name="M:ZeroC.Ice.ProtocolExtensions.GetEncoding(ZeroC.Ice.Protocol)">
            <summary>Returns the Ice encoding that this protocol uses for its headers.</summary>
            <param name="protocol">The protocol.</param>
        </member>
        <member name="M:ZeroC.Ice.ProtocolExtensions.GetName(ZeroC.Ice.Protocol)">
            <summary>Returns the name of this protocol in lowercase, e.g. "ice1" or "ice2".</summary>
        </member>
        <member name="M:ZeroC.Ice.ProtocolExtensions.Parse(System.String)">
            <summary>Parses a protocol string in the stringified proxy format into a Protocol.</summary>
            <param name="str">The string to parse.</param>
            <returns>The parsed protocol, or throws an exception if the string cannot be parsed.</returns>
        </member>
        <member name="M:ZeroC.Ice.ProtocolExtensions.CheckSupported(ZeroC.Ice.Protocol)">
            <summary>Checks if this protocol is supported by the Ice runtime. If not supported, throws
            NotSupportedException.</summary>
            <param name="protocol">The protocol.</param>
        </member>
        <member name="T:ZeroC.Ice.ProxyFactory`1">
            <summary>Factory function that creates a proxy from a reference.</summary>
            <typeparam name="T">The proxy type.</typeparam>
            <param name="reference">The underlying reference.</param>
            <returns>The new proxy.</returns>
        </member>
        <member name="T:ZeroC.Ice.Proxy">
            <summary>Proxy provides extension methods for IObjectPrx.</summary>
        </member>
        <member name="M:ZeroC.Ice.Proxy.CheckedCastAsync``1(ZeroC.Ice.IObjectPrx,ZeroC.Ice.ProxyFactory{``0},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Tests whether this proxy points to a remote object derived from T. If so it returns a proxy of
            type T otherwise returns null. This is a convenience wrapper for <see cref="M:ZeroC.Ice.IObjectPrx.IceIsAAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)"/>.
            </summary>
            <param name="prx">The source proxy.</param>
            <param name="factory">The proxy factory used to manufacture the returned proxy.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>A new proxy manufactured by the proxy factory, or null.</returns>
        </member>
        <member name="M:ZeroC.Ice.Proxy.Clone``1(ZeroC.Ice.IObjectPrx,ZeroC.Ice.ProxyFactory{``0},System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Nullable{ZeroC.Ice.Encoding},System.Collections.Generic.IEnumerable{ZeroC.Ice.Endpoint},System.String,ZeroC.Ice.Connection,System.Nullable{ZeroC.Ice.Identity},System.String,System.Collections.Generic.IEnumerable{ZeroC.Ice.InvocationInterceptor},System.Nullable{ZeroC.Ice.InvocationMode},System.Nullable{System.TimeSpan},System.Object,System.Collections.Generic.IEnumerable{System.String},ZeroC.Ice.ILocatorPrx,System.Nullable{System.TimeSpan},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{ZeroC.Ice.NonSecure},System.Nullable{System.Boolean})">
            <summary>Creates a clone of this proxy, with a new identity and optionally other options. The clone
            is identical to this proxy except for its identity and other options set through parameters.</summary>
            <param name="prx">The source proxy.</param>
            <param name="factory">The proxy factory used to manufacture the clone.</param>
            <param name="cacheConnection">Determines whether or not the clone caches its connection (optional).</param>
            <param name="clearLabel">When set to true, the clone does not have an associated label (optional).</param>
            <param name="clearLocator">When set to true, the clone does not have an associated locator proxy (optional).
            </param>
            <param name="context">The context of the clone (optional).</param>
            <param name="encoding">The encoding of the clone (optional).</param>
            <param name="endpoints">The endpoints of the clone (optional).</param>
            <param name="facet">The facet of the clone (optional).</param>
            <param name="fixedConnection">The connection of the clone (optional). When specified, the clone is a fixed
            proxy. You can clone a non-fixed proxy into a fixed proxy but not vice-versa.</param>
            <param name="identity">The identity of the clone.</param>
            <param name="identityAndFacet">A relative URI string [category/]identity[#facet].</param>
            <param name="invocationInterceptors">A collection of <see cref="T:ZeroC.Ice.InvocationInterceptor"/> that will be
            executed with each invocation</param>
            <param name="invocationMode">The invocation mode of the clone (optional). Applies only to ice1 proxies.
            </param>
            <param name="invocationTimeout">The invocation timeout of the clone (optional).</param>
            <param name="label">The label of the clone (optional).</param>
            <param name="location">The location of the clone (optional).</param>
            <param name="locator">The locator proxy of the clone (optional).</param>
            <param name="locatorCacheTimeout">The locator cache timeout of the clone (optional).</param>
            <param name="oneway">Determines whether the clone is oneway or twoway (optional).</param>
            <param name="preferExistingConnection">Determines whether or not the clone prefer using an existing
            connection.</param>
            <param name="preferNonSecure">Determines whether the clone prefers non-secure connections over secure
            connections (optional).</param>
            <param name="relative">When true, the new proxy is a relative proxy (optional).</param>
            <returns>A new proxy manufactured by the proxy factory (see factory parameter).</returns>
        </member>
        <member name="M:ZeroC.Ice.Proxy.Clone``1(``0,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Nullable{ZeroC.Ice.Encoding},System.Collections.Generic.IEnumerable{ZeroC.Ice.Endpoint},ZeroC.Ice.Connection,System.Collections.Generic.IEnumerable{ZeroC.Ice.InvocationInterceptor},System.Nullable{ZeroC.Ice.InvocationMode},System.Nullable{System.TimeSpan},System.Object,System.Collections.Generic.IEnumerable{System.String},ZeroC.Ice.ILocatorPrx,System.Nullable{System.TimeSpan},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{ZeroC.Ice.NonSecure},System.Nullable{System.Boolean})">
            <summary>Creates a clone of this proxy. The clone is identical to this proxy except for options set
            through parameters. This method returns this proxy instead of a new proxy in the event none of the options
            specified through the parameters change this proxy's options.</summary>
            <param name="prx">The source proxy.</param>
            <param name="cacheConnection">Determines whether or not the clone caches its connection (optional).</param>
            <param name="clearLabel">When set to true, the clone does not have an associated label (optional).</param>
            <param name="clearLocator">When set to true, the clone does not have an associated locator proxy (optional).
            </param>
            <param name="context">The context of the clone (optional).</param>
            <param name="encoding">The encoding of the clone (optional).</param>
            <param name="endpoints">The endpoints of the clone (optional).</param>
            <param name="fixedConnection">The connection of the clone (optional). When specified, the clone is a fixed
            proxy. You can clone a non-fixed proxy into a fixed proxy but not vice-versa.</param>
            <param name="invocationInterceptors">A collection of <see cref="T:ZeroC.Ice.InvocationInterceptor"/> that will be
            executed with each invocation</param>
            <param name="invocationMode">The invocation mode of the clone (optional). Applies only to ice1 proxies.
            </param>
            <param name="invocationTimeout">The invocation timeout of the clone (optional).</param>
            <param name="label">The label of the clone (optional).</param>
            <param name="location">The location of the clone (optional).</param>
            <param name="locator">The locator proxy of the clone (optional).</param>
            <param name="locatorCacheTimeout">The locator cache timeout of the clone (optional).</param>
            <param name="oneway">Determines whether the clone is oneway or twoway (optional).</param>
            <param name="preferExistingConnection">Determines whether or not the clone prefer using an existing
            connection.</param>
            <param name="preferNonSecure">Determines whether the clone prefers non-secure connections over secure
            connections (optional).</param>
            <param name="relative">When true, the new proxy is a relative proxy (optional).</param>
            <returns>A new proxy with the same type as this proxy.</returns>
        </member>
        <member name="M:ZeroC.Ice.Proxy.GetCachedConnection(ZeroC.Ice.IObjectPrx)">
            <summary>Returns the cached Connection for this proxy. If the proxy does not yet have an established
            connection, it does not attempt to create a connection.</summary>
            <param name="proxy">The proxy.</param>
            <returns>The cached Connection for this proxy (null if the proxy does not have
            an established connection).</returns>
        </member>
        <member name="M:ZeroC.Ice.Proxy.GetConnectionAsync(ZeroC.Ice.IObjectPrx,System.Threading.CancellationToken)">
            <summary>Returns the Connection for this proxy. If the proxy does not yet have an established connection,
            it first attempts to create a connection.</summary>
            <param name="proxy">The proxy.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>The Connection for this proxy.</returns>
        </member>
        <member name="M:ZeroC.Ice.Proxy.ForwardAsync(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingRequestFrame,System.Boolean,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Forwards an incoming request to another Ice object represented by the <paramref name="proxy"/>
            parameter.</summary>
            <remarks>When the incoming request frame's protocol and proxy's protocol are different, this method
            automatically bridges between these two protocols. When proxy's protocol is ice1, the resulting outgoing
            request frame is never compressed.</remarks>
            <param name="proxy">The proxy for the target Ice object.</param>
            <param name="request">The incoming request frame to forward to proxy's target.</param>
            <param name="oneway">When true, the request is sent as a oneway request. When false, it is sent as a
            two-way request.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>A task holding the response frame.</returns>
        </member>
        <member name="M:ZeroC.Ice.Proxy.InvokeAsync(ZeroC.Ice.IObjectPrx,ZeroC.Ice.OutgoingRequestFrame,System.Boolean,System.IProgress{System.Boolean})">
            <summary>Invokes a request on a proxy.</summary>
            <remarks>request.CancellationToken holds the cancellation token.</remarks>
            <param name="proxy">The proxy for the target Ice object.</param>
            <param name="request">The request frame.</param>
            <param name="oneway">When true, the request is sent as a oneway request. When false, it is sent as a
            two-way request.</param>
            <param name="progress">Sent progress provider.</param>
            <returns>A task holding the response frame.</returns>
        </member>
        <member name="M:ZeroC.Ice.Proxy.ToLocationString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Produces a string representation of a location.</summary>
            <param name="location">The location.</param>
            <returns>The location as a percent-escaped string with segments separated by '/'.</returns>
        </member>
        <member name="T:ZeroC.Ice.ProxyComparer">
            <summary>Represents an <see cref="T:ZeroC.Ice.IObjectPrx">object proxy</see>comparison operation based on all or only some
            of the proxy properties. The <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> property delegates to the implementation
            of <see cref="T:System.IEquatable`1"/> provided by IObjectPrx.</summary>
        </member>
        <member name="P:ZeroC.Ice.ProxyComparer.Identity">
            <summary>Gets a <see cref="T:ZeroC.Ice.ProxyComparer"/> that compares proxies based only on the proxies' object
            identity.</summary>
        </member>
        <member name="P:ZeroC.Ice.ProxyComparer.IdentityAndFacet">
            <summary>Gets a <see cref="T:ZeroC.Ice.ProxyComparer"/> that compares proxies based only on the proxies' object identity
            and facet.</summary>
        </member>
        <member name="T:ZeroC.Ice.ProxyDataExtensions">
            <summary>Extension class for OutputStream to marshal ProxyData11 and ProxyData20 without creating a
            ProxyData11/20 instance. This implementation is slightly more efficient than the generated code because it
            avoids the allocation of a string[] to write the facet (ProxyData11) and of a string[] to write the location
            (ProxyData20)</summary>
        </member>
        <member name="T:ZeroC.Ice.Reference">
            <summary>Reference is an Ice-internal but publicly visible class. Each Ice proxy has a single Reference.
            Reference represents the untyped implementation of a proxy. Multiples proxies that point to the same Ice object
            and share the same proxy options can share the same Reference object, even if these proxies have different
            types.</summary>
        </member>
        <member name="M:ZeroC.Ice.Reference.op_Equality(ZeroC.Ice.Reference,ZeroC.Ice.Reference)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Reference.op_Inequality(ZeroC.Ice.Reference,ZeroC.Ice.Reference)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.Reference.Parse(System.String,ZeroC.Ice.Communicator,System.String)">
            <summary>Creates a reference from a string and a communicator. This an Ice-internal publicly visible static
            method.</summary>
        </member>
        <member name="M:ZeroC.Ice.Reference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Reference.Equals(ZeroC.Ice.Reference)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Reference.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.Reference.ToString">
            <summary>Converts the reference into a string. The format of this string depends on the protocol: for ice1,
            this method uses the ice1 format, which can be customized by Communicator.ToStringMode. For ice2 and
            greater, this method uses the URI format.</summary>
        </member>
        <member name="M:ZeroC.Ice.Reference.Read(ZeroC.Ice.InputStream)">
            <summary>Reads a reference from the input stream.</summary>
            <param name="istr">The input stream to read from.</param>
            <returns>The reference read from the stream (can be null).</returns>
        </member>
        <member name="T:ZeroC.Ice.RetryPolicy">
            <summary>The retry policy that can be specified when constructing a remote exception.</summary>
        </member>
        <member name="F:ZeroC.Ice.RetryPolicy.NoRetry">
            <summary>The NoRetry policy specifies that the exception cannot be retried. This is the default policy
            when no policy is specified.</summary>
        </member>
        <member name="F:ZeroC.Ice.RetryPolicy.OtherReplica">
            <summary>The OtherReplica policy specifies that the exception can be retried on a different replica.
            </summary>
        </member>
        <member name="M:ZeroC.Ice.RetryPolicy.AfterDelay(System.TimeSpan)">
            <summary>Creates a retry policy that specifies that the exception can be retried after the given delay.</summary>
            <param name="delay">The delay after which the exception can be retried.</param>
            <returns>The retry policy.</returns>
        </member>
        <member name="M:ZeroC.Ice.RetryPolicy.Equals(ZeroC.Ice.RetryPolicy)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.RetryPolicy.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.RetryPolicy.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.RetryPolicy.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.RetryPolicy.op_Equality(ZeroC.Ice.RetryPolicy,ZeroC.Ice.RetryPolicy)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.Ice.RetryPolicy.op_Inequality(ZeroC.Ice.RetryPolicy,ZeroC.Ice.RetryPolicy)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ZeroC.Ice.RemoteException">
            <summary>Base class for exceptions that can be transmitted in responses to Ice requests. The derived exception
            classes are generated from exceptions defined in Slice.</summary>
        </member>
        <member name="P:ZeroC.Ice.RemoteException.Message">
            <inheritdoc/>
        </member>
        <member name="P:ZeroC.Ice.RemoteException.ConvertToUnhandled">
            <summary>When true, if this exception is thrown from the implementation of an operation, Ice will convert
            it into an Ice.UnhandledException. When false, Ice marshals this remote exception as-is. true is the
            default for exceptions unmarshaled by Ice, while false is the default for exceptions that did not originate
            in a remote server.</summary>
        </member>
        <member name="P:ZeroC.Ice.RemoteException.Origin">
            <summary>The remote exception origin.</summary>
        </member>
        <member name="P:ZeroC.Ice.RemoteException.DefaultMessage">
            <summary>When DefaultMessage is not null and the application does not construct the exception with a
            constructor that takes a message parameter, Message returns DefaultMessage. This property should be
            overridden in derived partial exception classes that provide a custom default message.</summary>
        </member>
        <member name="P:ZeroC.Ice.RemoteException.IceSlicedData">
            <summary>Returns the sliced data if the exception has a preserved-slice base exception and has been sliced during
            unmarshaling, <c>null</c> is returned otherwise.</summary>
        </member>
        <member name="M:ZeroC.Ice.RemoteException.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a remote exception with the default system message.</summary>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="M:ZeroC.Ice.RemoteException.#ctor(System.String,System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a remote exception with the provided message and inner exception.</summary>
            <param name="message">Message that describes the exception.</param>
            <param name="retryPolicy">The retry policy for the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ZeroC.Ice.RemoteException.#ctor(System.String,System.Nullable{ZeroC.Ice.RemoteExceptionOrigin})">
            <summary>Constructs a remote exception with the provided message and origin.</summary>
            <param name="message">Message that describes the exception.</param>
            <param name="origin">The remote exception origin.</param>
        </member>
        <member name="M:ZeroC.Ice.RemoteException.IceRead(ZeroC.Ice.InputStream,System.Boolean)">
            <summary>Unmarshals a remote exception from the <see cref="T:ZeroC.Ice.InputStream"/>. This base implementation is only
            called on a plain RemoteException.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> to read from.</param>
            <param name="firstSlice"><c>True</c> if the exception corresponds to the first Slice, <c>False</c>
            otherwise.</param>
        </member>
        <member name="M:ZeroC.Ice.RemoteException.IceWrite(ZeroC.Ice.OutputStream,System.Boolean)">
            <summary>Marshal a remote exception to the <see cref="T:ZeroC.Ice.OutputStream"/>. This implementation can only be
            called on a plain RemoteException with IceSlicedData set.</summary>
            <param name="ostr">The <see cref="T:ZeroC.Ice.OutputStream"/> to marshal the exception.</param>
            <param name="firstSlice"><c>True</c> if the exception corresponds to the first Slice, <c>False</c>
            otherwise.</param>
        </member>
        <member name="T:ZeroC.Ice.RemoteExceptionExtensions">
            <summary>Provides public extensions methods for RemoteException instances.</summary>
        </member>
        <member name="M:ZeroC.Ice.RemoteExceptionExtensions.GetSlicedData(ZeroC.Ice.RemoteException)">
            <summary>During unmarshaling, Ice slices off derived slices that it does not know how to read, and preserves
            these "unknown" slices.</summary>
            <returns>A SlicedData value that provides the list of sliced-off slices.</returns>
        </member>
        <member name="T:ZeroC.Ice.Runtime">
            <summary>The Ice runtime.</summary>
        </member>
        <member name="P:ZeroC.Ice.Runtime.Logger">
            <summary>The process-wide logger.</summary>
        </member>
        <member name="F:ZeroC.Ice.Runtime.IntVersion">
            <summary>Returns the Ice version as an integer in the form A.BB.CC, where A indicates the major version,
            BB indicates the minor version, and CC indicates the patch level. For example, for Ice 3.3.1, the returned
            value is 30301.</summary>
            <returns>The Ice version.</returns>
        </member>
        <member name="F:ZeroC.Ice.Runtime.StringVersion">
            <summary>Returns the Ice version in the form A.B.C, where A indicates the major version, B indicates the
            minor version, and C indicates the patch level.</summary>
            <returns>The Ice version.</returns>
        </member>
        <member name="T:ZeroC.Ice.SignaledSocketStream`1">
            <summary>The SignaledSocketStream abstract class provides signaling functionality using the
            IValueTaskSource interface. It's useful for stream implementations that depend on the socket
            for receiving data. The socket can easily signal the stream when new data is available.</summary>
        </member>
        <member name="M:ZeroC.Ice.SignaledSocketStream`1.Abort(System.Exception)">
            <summary>Aborts the stream. If the stream is waiting to be signaled and the stream is not signaled
            already, the stream will be signaled with the exception. If the stream is signaled, we save the
            exception to raise it after the stream consumes the signal and waits for a new signal</summary>
        </member>
        <member name="T:ZeroC.Ice.SingleStreamSocket">
            <summary>A single-stream socket represents the local end of a network connection and enables transmitting
            raw binary data over a transport such as TCP, UDP or WebSocket.</summary>
        </member>
        <member name="P:ZeroC.Ice.SingleStreamSocket.Socket">
            <summary>Gets the optional .NET socket associated with this single-stream socket.</summary>
        </member>
        <member name="P:ZeroC.Ice.SingleStreamSocket.SslStream">
            <summary>Gets the optional SslStream associated with this socket.</summary>
        </member>
        <member name="M:ZeroC.Ice.SingleStreamSocket.CheckSendSize(System.Int32)">
            <summary>Checks if the socket can send messages of the given size. Throw if the message is too large.
            </summary>
            <param name="size">The size of the message to check.</param>
        </member>
        <member name="M:ZeroC.Ice.SingleStreamSocket.CloseAsync(System.Exception,System.Threading.CancellationToken)">
            <summary>Closes the socket. The socket might use this method to send a notification to the peer
            of the connection closure.</summary>
            <param name="exception">The reason of the connection closure.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.SingleStreamSocket.Dispose">
            <summary>Releases the resources used by the socket.</summary>
        </member>
        <member name="M:ZeroC.Ice.SingleStreamSocket.InitializeAsync(System.Threading.CancellationToken)">
            <summary>Initializes the socket. This is called to initialize the socket during connection establishment
            or when a new connection is accepted.</summary>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.SingleStreamSocket.ReceiveDatagramAsync(System.Threading.CancellationToken)">
            <summary>Receives a new datagram from the connection, only supported for datagram connections.</summary>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <return>The received data.</return>
        </member>
        <member name="M:ZeroC.Ice.SingleStreamSocket.ReceiveAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>Receives data from the connection. This is used for stream based connections only.</summary>
            <param name="buffer">The buffer that holds the received data.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <return>The number of bytes received.</return>
        </member>
        <member name="M:ZeroC.Ice.SingleStreamSocket.SendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Threading.CancellationToken)">
            <summary>Send data over the connection.</summary>
            <param name="buffer">The buffer containing the data to send.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <return>The number of bytes sent.</return>
        </member>
        <member name="M:ZeroC.Ice.SingleStreamSocket.Dispose(System.Boolean)">
            <summary>Releases the resources used by the socket.</summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only
            unmanaged resources.</param>
        </member>
        <member name="T:ZeroC.Ice.SlicedData">
            <summary>SlicedData holds the sliced-off unknown slices of a class or remote exception. Each SlicedData value
            holds at least one slice.</summary>
        </member>
        <member name="P:ZeroC.Ice.SlicedData.Encoding">
            <summary>The Ice encoding of the "unknown" slices held by this SlicedData. These slices can only be
            remarshaled with the same encoding.</summary>
        </member>
        <member name="P:ZeroC.Ice.SlicedData.Slices">
            <summary>The "unknown" or unreadable slices from a class or remote exception instance.</summary>
        </member>
        <member name="M:ZeroC.Ice.SlicedData.Equals(ZeroC.Ice.SlicedData)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.SlicedData.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.SlicedData.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.SlicedData.op_Equality(ZeroC.Ice.SlicedData,ZeroC.Ice.SlicedData)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
        </member>
        <member name="M:ZeroC.Ice.SlicedData.op_Inequality(ZeroC.Ice.SlicedData,ZeroC.Ice.SlicedData)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
        </member>
        <member name="T:ZeroC.Ice.SliceInfo">
            <summary>SliceInfo encapsulates the details of a slice for an unknown class or remote exception.</summary>
        </member>
        <member name="P:ZeroC.Ice.SliceInfo.TypeId">
            <summary>The Slice type ID for this slice.</summary>
        </member>
        <member name="P:ZeroC.Ice.SliceInfo.CompactId">
            <summary>The Slice compact type ID for this slice. Only applicable to classes with the 1.1 encoding;
            otherwise, always null.</summary>
        </member>
        <member name="P:ZeroC.Ice.SliceInfo.Bytes">
            <summary>The encoded bytes for this slice, including the leading size integer.</summary>
        </member>
        <member name="P:ZeroC.Ice.SliceInfo.Instances">
            <summary>The class instances referenced by this slice.</summary>
        </member>
        <member name="P:ZeroC.Ice.SliceInfo.HasTaggedMembers">
            <summary>Whether or not the slice contains tagged members.</summary>
        </member>
        <member name="T:ZeroC.Ice.SlicSocket">
            <summary>The Slic socket implements a multi-stream transport on top of a single-stream transport such
            as TCP. It supports the same set of features as Quic.</summary>
        </member>
        <member name="T:ZeroC.Ice.SlicStream">
            <summary>The stream implementation for Slic.</summary>
        </member>
        <member name="T:ZeroC.Ice.SocketStream">
            <summary>The SocketStream abstract base class to be overridden by multi-stream transport implementations.
            There's an instance of this class for each active stream managed by the multi-stream socket.</summary>
        </member>
        <member name="F:ZeroC.Ice.SocketStream.IceSendDataFromIOStream">
            <summary>A delegate used to send data from a System.IO.Stream value.</summary>
        </member>
        <member name="F:ZeroC.Ice.SocketStream.IceReceiveDataIntoIOStream">
            <summary>A delegate used to receive data into a System.IO.Stream value.</summary>
        </member>
        <member name="P:ZeroC.Ice.SocketStream.Id">
            <summary>The stream ID. If the stream ID hasn't been assigned yet, an exception is thrown. Assigning the
            stream ID registers the stream with the socket.</summary>
            <exception cref="T:System.InvalidOperationException">If the stream ID has not been assigned yet.</exception>
        </member>
        <member name="P:ZeroC.Ice.SocketStream.IsIncoming">
            <summary>Returns True if the stream is an incoming stream, False otherwise.</summary>
        </member>
        <member name="P:ZeroC.Ice.SocketStream.IsBidirectional">
            <summary>Returns True if the stream is a bidirectional stream, False otherwise.</summary>
        </member>
        <member name="P:ZeroC.Ice.SocketStream.IsControl">
            <summary>Returns True if the stream is a control stream, False otherwise.</summary>
        </member>
        <member name="P:ZeroC.Ice.SocketStream.TransportHeader">
            <summary>The transport header sentinel. Transport implementations that need to add an additional header
            to transmit data over the stream can provide the header data here. This can improve performance by reducing
            the number of allocations as Ice will allocate buffer space for both the transport header and the Ice
            protocol header. If a header is returned here, the implementation of the SendAsync method should this header
            to be set at the start of the first segment.</summary>
        </member>
        <member name="E:ZeroC.Ice.SocketStream.Reset">
            <summary>The Reset event is triggered when a reset frame is received.</summary>
        </member>
        <member name="P:ZeroC.Ice.SocketStream.IsStarted">
            <summary>Returns true if the stream ID is assigned</summary>
        </member>
        <member name="M:ZeroC.Ice.SocketStream.Abort(System.Exception)">
            <summary>Aborts the stream. This is called by the connection when it's being closed. If needed, the stream
            implementation should abort the pending receive task.</summary>
        </member>
        <member name="M:ZeroC.Ice.SocketStream.Dispose">
            <summary>Releases the stream resources.</summary>
        </member>
        <member name="M:ZeroC.Ice.SocketStream.ReceiveAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>Receives data in the given buffer and return the number of received bytes.</summary>
            <param name="buffer">The buffer to store the received data.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <return>The number of bytes received.</return>
        </member>
        <member name="M:ZeroC.Ice.SocketStream.ResetAsync(System.Int64)">
            <summary>Resets the stream.</summary>
            <param name="errorCode">The error code indicating the reason of the reset to transmit to the peer.</param>
        </member>
        <member name="M:ZeroC.Ice.SocketStream.SendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Boolean,System.Threading.CancellationToken)">
            <summary>Sends data from the given buffer and returns once the buffer is sent.</summary>
            <param name="buffer">The buffer with the data to send.</param>
            <param name="fin">True if no more data will be sent over this stream, False otherwise.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.Ice.SocketStream.#ctor(ZeroC.Ice.MultiStreamSocket,System.Int64)">
            <summary>Constructs a stream with the given ID.</summary>
            <param name="streamId">The stream ID.</param>
            <param name="socket">The parent socket.</param>
        </member>
        <member name="M:ZeroC.Ice.SocketStream.#ctor(ZeroC.Ice.MultiStreamSocket,System.Boolean,System.Boolean)">
            <summary>Constructs an outgoing stream.</summary>
            <param name="bidirectional">True to create a bidirectional stream, False otherwise.</param>
            <param name="control">True to create a control stream, False otherwise.</param>
            <param name="socket">The parent socket.</param>
        </member>
        <member name="M:ZeroC.Ice.SocketStream.Dispose(System.Boolean)">
            <summary>Releases the resources used by the socket.</summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only
            unmanaged resources.</param>
        </member>
        <member name="T:ZeroC.Ice.StringUtil">
            <summary>Helper methods for string manipulation.</summary>
        </member>
        <member name="M:ZeroC.Ice.StringUtil.UnescapeString(System.String,System.Int32,System.Int32,System.String)">
            <summary>Remove escape sequences added by <see cref="M:ZeroC.Ice.StringUtil.EscapeString(System.String,ZeroC.Ice.ToStringMode,System.Nullable{System.Char})"/>. Throws System.ArgumentException for
            an invalid input string.</summary>
            <param name="s">The string to escape.</param>
            <param name="start">Index to start escaping the string.</param>
            <param name="end">Index to end escaping the string.</param>
            <param name="special">String containing special characters that must be escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:ZeroC.Ice.StringUtil.SplitString(System.String,System.String)">
            <summary>Helper method for split string; returns null for unmatched quotes.</summary>
            <param name="str">The string to split.</param>
            <param name="separators">A string containing the characters used as separators.</param>
            <returns>An array of strings, whose elements correspond to the parts of the string separated by one of the
            separator characters.</returns>
        </member>
        <member name="M:ZeroC.Ice.StringUtil.ToPropertyValue(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Concatenates a collection of strings in a format that is compatible with
            <see cref="M:ZeroC.Ice.Properties.GetPropertyAsList(ZeroC.Ice.Communicator,System.String)"/>.</summary>
            <param name="values">The collection of strings to concatenate.</param>
            <returns>The values concatenated in a string that is compatible with
            <see cref="M:ZeroC.Ice.Properties.GetPropertyAsList(ZeroC.Ice.Communicator,System.String)"/>.</returns>
        </member>
        <member name="T:ZeroC.Ice.TaskExtensions">
            <summary>WaitAsync task extensions allow to cancel the wait for the task completion without canceling the
            task. For example, the user might want to cancel an invocation that is waiting for connection establishment.
            Instead of canceling the connection establishment which might be shared by other invocations we cancel the wait
            on the connection establishment for the invocation. The same applies for invocations which are waiting on a
            connection to be sent.</summary>
        </member>
        <member name="M:ZeroC.Ice.TaskExtensions.WaitAsync(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>Waits for the task to complete and allows the wait to be canceled.</summary>
            <param name="task">The task to wait for.</param>
            <param name="cancel">The cancellation token.</param>
        </member>
        <member name="M:ZeroC.Ice.TaskExtensions.WaitAsync``1(System.Threading.Tasks.ValueTask{``0},System.Threading.CancellationToken)">
            <summary>Waits for the task to complete and allows the wait to be canceled.</summary>
            <param name="task">The task to wait for.</param>
            <param name="cancel">The cancellation token.</param>
        </member>
        <member name="M:ZeroC.Ice.TaskExtensions.WaitAsync``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>Waits for the task to complete and allows the wait to be canceled.</summary>
            <param name="task">The task to wait for.</param>
            <param name="cancel">The cancellation token.</param>
        </member>
        <member name="T:ZeroC.Ice.TcpEndpoint">
            <summary>The Endpoint class for the TCP transport.</summary>
        </member>
        <member name="F:ZeroC.Ice.TcpEndpoint.DefaultTimeout">
            <summary>The default timeout for ice1 endpoints.</summary>
        </member>
        <member name="P:ZeroC.Ice.Time.Elapsed">
            <summary>Gets the total elapsed time since the Ice run-time started as a TimeSpan object.</summary>
        </member>
        <member name="T:ZeroC.Ice.TimeSpanExtensions">
            <summary>Provides public extension methods for <see cref="T:System.TimeSpan"/> values.</summary>
        </member>
        <member name="M:ZeroC.Ice.TimeSpanExtensions.ToPropertyValue(System.TimeSpan)">
            <summary>Gets the TimeSpan as an Ice property value. The largest possible unit which fully represents the
            TimeSpan will be used. e.g. A TimeSpan of 00:01:30 will be returned as "75s".</summary>
            <param name="ts">The TimeSpan.</param>
            <returns>The stringified TimeSpan.</returns>
        </member>
        <member name="T:ZeroC.Ice.TlsClientOptions">
            <summary>This class represents the client side TLS configuration.</summary>
        </member>
        <member name="P:ZeroC.Ice.TlsClientOptions.ClientCertificates">
            <summary>Gets or sets the certificates used to authenticate client connections. If the
            <see cref="P:ZeroC.Ice.TlsClientOptions.ClientCertificateSelectionCallback"/> is defined, the certificates are provided to the callback.
            Otherwise, the built-in certificate selection callback will select a certificate that matches one of the
            server's issuers or the first certificate if no matching issuers is found.</summary>
        </member>
        <member name="P:ZeroC.Ice.TlsClientOptions.ClientCertificateSelectionCallback">
            <summary>Gets or set the certificate selection callback used to select the client side certificate.
            </summary>
        </member>
        <member name="P:ZeroC.Ice.TlsClientOptions.EnabledSslProtocols">
            <summary>Gets or sets the list of SSL protocols allowed for client connections. The default is None which
            specifies to rely on the operating system for selecting the best protocol to use. It can be set to Tls12,
            Tls13, None or a combination of these, other values are not accepted.</summary>
        </member>
        <member name="P:ZeroC.Ice.TlsClientOptions.ServerCertificateCertificateAuthorities">
            <summary>Gets or sets the certificates collection that will be used as trusted certificate authorities
            to verify the server certificate. Setting this is incompatible with setting
            <see cref="P:ZeroC.Ice.TlsClientOptions.ServerCertificateValidationCallback"/>.</summary>
        </member>
        <member name="P:ZeroC.Ice.TlsClientOptions.ServerCertificateValidationCallback">
            <summary>Gets or sets the callback that will be used to verify the server certificate. Setting this is
            incompatible with setting <see cref="P:ZeroC.Ice.TlsClientOptions.ServerCertificateCertificateAuthorities"/>.</summary>
        </member>
        <member name="P:ZeroC.Ice.TlsClientOptions.UseMachineContex">
            <summary>When true and IceSSL.CertFile property is defined, the certificates are imported with the
            <see cref="F:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.MachineKeySet"/> flag and the certificate chain used to validate the
            server certificate is build using the machine context, otherwise the certificates are imported with the
            <see cref="F:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.UserKeySet"/> and the certificate chain uses the user context. On Linux
            certificates are always imported with <see cref="F:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.EphemeralKeySet"/> flag independently
            of the value of this property.</summary>
        </member>
        <member name="T:ZeroC.Ice.TlsServerOptions">
            <summary>This class represents the server side TLS configuration.</summary>
        </member>
        <member name="P:ZeroC.Ice.TlsServerOptions.ClientCertificateCertificateAuthorities">
            <summary>Gets or sets the certificates of trusted certificate authorities. These authorities are used to
            verify client authentication. Setting this is incompatible with setting
            <see cref="P:ZeroC.Ice.TlsServerOptions.ClientCertificateValidationCallback"/>.</summary>
        </member>
        <member name="P:ZeroC.Ice.TlsServerOptions.ClientCertificateValidationCallback">
            <summary>Gets or sets the callback that will be used to verify the client certificate. Setting this is
            incompatible with setting <see cref="P:ZeroC.Ice.TlsServerOptions.ClientCertificateCertificateAuthorities"/>.</summary>
        </member>
        <member name="P:ZeroC.Ice.TlsServerOptions.EnabledSslProtocols">
            <summary>Gets or sets the list of SSL protocols allowed for server connections. The default is None which
            specifies to rely on the operating system for selecting the best protocol to use. It can be set to Tls12,
            Tls13, None or a combination of these, other values are not accepted.</summary>
        </member>
        <member name="P:ZeroC.Ice.TlsServerOptions.RequireClientCertificate">
            <summary>Gets or sets a boolean value to specify if the client certificate is requested. If no custom
            client certificate validation callback is set, the built-in validation will fail if the client doesn't
            provide a certificate and one is required.</summary>
        </member>
        <member name="P:ZeroC.Ice.TlsServerOptions.UseMachineContex">
            <summary>When true and IceSSL.CertFile property is defined, the certificates are imported with the
            <see cref="F:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.MachineKeySet"/> flag and the certificate chain used to validate the
            client certificate is build using the machine context, otherwise the certificates are imported with the
            <see cref="F:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.UserKeySet"/> and the certificate chain uses the user context. On Linux
            certificates are always imported with <see cref="F:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.EphemeralKeySet"/> flag independently
            of the value of this property.</summary>
        </member>
        <member name="P:ZeroC.Ice.TlsServerOptions.ServerCertificate">
            <summary>Gets or sets the certificate user for incoming connections.</summary>
        </member>
        <member name="T:ZeroC.Ice.TypeIdAttribute">
            <summary> This attribute class is used by the generated code to assign a type ID to C# classes and
            interfaces mapped from Slice interfaces, classes and exceptions. </summary>
        </member>
        <member name="P:ZeroC.Ice.TypeIdAttribute.Value">
            <summary>Retrieve the type ID.</summary>
            <value>The type ID string.</value>
        </member>
        <member name="M:ZeroC.Ice.TypeIdAttribute.#ctor(System.String)">
            <summary>Construct a TypeIdAttribute.</summary>
            <param name="value">The type ID.</param>>
        </member>
        <member name="T:ZeroC.Ice.TypeExtensions">
            <summary> This class adds extension methods to System.Type.</summary>
        </member>
        <member name="M:ZeroC.Ice.TypeExtensions.GetIceTypeId(System.Type)">
            <summary>Retrieve the Ice type ID from a type with the attribute Ice.TypeId.</summary>
            <param name="type">The class or interface generated by the Slice compiler.</param>
            <returns>The type ID, or null if type does not carry the Ice.TypeId attribute.</returns>
        </member>
        <member name="M:ZeroC.Ice.TypeExtensions.GetAllIceTypeIds(System.Type)">
            <summary>Retrieve the Ice type ID from a type and from all its base types.
            When type is an interface, it returns the type ID for that interface, plus all its base interfaces, plus
            "::Ice::Object", and these type IDs are returned in alphabetical order.
            When type is a class, it returns the type ID of that class plus the type ID of the base classes. These
            type IDs are sorted from most derived to least derived.</summary>
            <param name="type">The class or interface generated by the Slice compiler.</param>
            <returns>An array of Ice type IDs.</returns>
        </member>
        <member name="T:ZeroC.Ice.UdpEndpoint">
            <summary>The Endpoint class for the UDP transport.</summary>
        </member>
        <member name="P:ZeroC.Ice.UdpEndpoint.MulticastInterface">
            <summary>The local network interface used to send multicast datagrams.</summary>
        </member>
        <member name="P:ZeroC.Ice.UdpEndpoint.MulticastTtl">
            <summary>The time-to-live of the multicast datagrams, in hops.</summary>
        </member>
        <member name="T:ZeroC.Ice.UniversalEndpoint">
            <summary>Describes an endpoint with a transport or protocol that the associated communicator does not implement.
            The communicator cannot send a request to this endpoint; it can however marshal this endpoint (within a proxy)
            and send this proxy to another application that may know this transport. This class is used only for protocol
            ice2 or greater.</summary>
        </member>
        <member name="T:ZeroC.Ice.UnknownSlicedClass">
            <summary>UnknownSlicedClass represents a fully sliced class instance. The local Ice runtime does not known this
            type or any of its base classes (other than AnyClass).</summary>
        </member>
        <member name="P:ZeroC.Ice.UnknownSlicedClass.TypeId">
            <summary>Returns the most derived type ID this class instance.</summary>
            <value>The type ID.</value>
        </member>
        <member name="M:ZeroC.Ice.UnknownSlicedClass.IceRead(ZeroC.Ice.InputStream,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:ZeroC.Ice.UnknownSlicedClass.IceSlicedData">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.Ice.UnknownSlicedClass.IceWrite(ZeroC.Ice.OutputStream,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ZeroC.Ice.UriParser">
            <summary>Provides helper methods to parse proxy and endpoint strings in the URI format.</summary>
        </member>
        <member name="T:ZeroC.Ice.UriParser.ProxyOptions">
            <summary>The proxy options parsed by the UriParser.</summary>
        </member>
        <member name="M:ZeroC.Ice.UriParser.IsEndpointUri(System.String)">
            <summary>Checks if a string is an ice+transport URI, and not an endpoint string using the ice1 string
            format.</summary>
            <param name="s">The string to check.</param>
            <returns>True when the string is most likely an ice+transport URI; otherwise, false.</returns>
        </member>
        <member name="M:ZeroC.Ice.UriParser.IsProxyUri(System.String)">
            <summary>Checks if a string is an ice or ice+transport URI, and not a proxy string using the ice1 string
            format.</summary>
            <param name="s">The string to check.</param>
            <returns>True when the string is most likely an ice or ice+transport URI; otherwise, false.</returns>
        </member>
        <member name="M:ZeroC.Ice.UriParser.ParseEndpoints(System.String,ZeroC.Ice.Communicator)">
            <summary>Parses an ice+transport URI string that represents one or more object adapter endpoints.</summary>
            <param name="uriString">The URI string to parse.</param>
            <param name="communicator">The communicator.</param>
            <returns>The list of endpoints.</returns>
        </member>
        <member name="M:ZeroC.Ice.UriParser.ParseIdentity(System.String)">
            <summary>Converts the string representation of an identity to its equivalent Identity struct.</summary>
            <param name="path">A string [escapedCategory/]escapedName.</param>
            <exception cref="T:System.FormatException">Thrown when <c>path</c> is not in the correct format.</exception>
            <returns>An Identity equivalent to the identity contained in path.</returns>
        </member>
        <member name="M:ZeroC.Ice.UriParser.ParseIdentityAndFacet(System.String)">
            <summary>Parses a relative URI [category/]name[#facet] into an identity and facet.</summary>
        </member>
        <member name="M:ZeroC.Ice.UriParser.ParseProxy(System.String,ZeroC.Ice.Communicator)">
            <summary>Parses an ice or ice+transport URI string that represents a proxy.</summary>
            <param name="uriString">The URI string to parse.</param>
            <param name="communicator">The communicator.</param>
            <returns>The components of the proxy.</returns>
        </member>
        <member name="M:ZeroC.Ice.UriParser.RegisterCommon">
            <summary>Registers the ice and ice+universal schemes.</summary>
        </member>
        <member name="M:ZeroC.Ice.UriParser.RegisterTransport(System.String,System.UInt16)">
            <summary>Registers an ice+transport scheme.</summary>
            <param name="transportName">The name of the transport (cannot be empty).</param>
            <param name="defaultPort">The default port for this transport.</param>
        </member>
        <member name="M:ZeroC.Ice.UriParser.InitialParse(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Creates a Uri and parses its query.</summary>
            <param name="uriString">The string to parse.</param>
            <param name="pureEndpoints">When true, the string represents one or more endpoints, and proxy options are
            not allowed in the query.</param>
            <param name="endpointOptions">A dictionary that accepts the parsed endpoint options. Set to null when
            parsing an ice URI (and in this case pureEndpoints must be false).</param>
            <returns>The parsed URI, the alt-endpoint option (if set) and the ProxyOptions struct.</returns>
        </member>
        <member name="M:ZeroC.Ice.UriParser.Parse(System.String,System.Boolean,ZeroC.Ice.Communicator)">
            <summary>Parses an ice or ice+transport URI string.</summary>
            <param name="uriString">The URI string to parse.</param>
            <param name="oaEndpoints">True when parsing the endpoints of an object adapter; false when parsing a proxy.
            </param>
            <param name="communicator">The communicator.</param>
            <returns>The Uri and endpoints of the ice or ice+transport URI.</returns>
        </member>
        <member name="T:ZeroC.Ice.VectoredBufferExtensions">
            <summary>Provides public extensions methods to manage byte array segments.</summary>
        </member>
        <member name="M:ZeroC.Ice.VectoredBufferExtensions.GetByteCount(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})">
            <summary>Returns the sum of the count of all the array segments in the source enumerable.</summary>
            <param name="src">The list of segments.</param>
            <returns>The byte count of the segment list.</returns>
        </member>
        <member name="M:ZeroC.Ice.VectoredBufferExtensions.GetSegment(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Int32,System.Int32)">
            <summary>Returns an array segment with the requested bytes, starting at the given
            byte offset, if the required bytes are available in a single segment this method returns
            an slice of the segment without copying the data, otherwise the data is copied into
            a byte array and the segment is created from the copied data.</summary>
            <param name="src">The source segment list.</param>
            <param name="srcOffset">The zero-based byte offset into the source segment list.</param>
            <param name="count">The size in bytes of the returned segment.</param>
            <returns>A segment with the requested size.</returns>
        </member>
        <member name="P:ZeroC.Ice.WSEndpoint.Resource">
            <summary>A URI specifying the resource associated with this endpoint. The value is passed as the target for
            GET in the WebSocket upgrade request.</summary>
        </member>
        <member name="T:ZeroC.IceMX.Metrics">
            <summary>The base class for metrics. A metrics object represents a collection of measurements associated to a given a
            system.</summary>
        </member>
        <member name="F:ZeroC.IceMX.Metrics.Id">
            <summary>The metrics identifier.</summary>
        </member>
        <member name="F:ZeroC.IceMX.Metrics.Total">
            <summary>The total number of objects observed by this metrics. This includes the number of currently observed
            objects and the number of objects observed in the past.</summary>
        </member>
        <member name="F:ZeroC.IceMX.Metrics.Current">
            <summary>The number of objects currently observed by this metrics.</summary>
        </member>
        <member name="F:ZeroC.IceMX.Metrics.TotalLifetime">
            <summary>The sum of the lifetime of each observed objects. This does not include the lifetime of objects which are
            currently observed, only the objects observed in the past.</summary>
        </member>
        <member name="F:ZeroC.IceMX.Metrics.Failures">
            <summary>The number of failures observed.</summary>
        </member>
        <member name="M:ZeroC.IceMX.Metrics.#ctor(System.String,System.Int64,System.Int32,System.Int64,System.Int32)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.Metrics"/>.</summary>
            <param name="id">The metrics identifier.</param>
            <param name="total">The total number of objects observed by this metrics. This includes the number of currently observed
            objects and the number of objects observed in the past.</param>
            <param name="current">The number of objects currently observed by this metrics.</param>
            <param name="totalLifetime">The sum of the lifetime of each observed objects. This does not include the lifetime of objects which are
            currently observed, only the objects observed in the past.</param>
            <param name="failures">The number of failures observed.</param>
        </member>
        <member name="M:ZeroC.IceMX.Metrics.#ctor">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.Metrics"/>.</summary>
        </member>
        <member name="T:ZeroC.IceMX.MetricsFailures">
            <summary>A structure to keep track of failures associated with a given metrics.</summary>
        </member>
        <member name="F:ZeroC.IceMX.MetricsFailures.IceReader">
            <summary>A <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.IceMX.MetricsFailures"/> instances.</summary>
        </member>
        <member name="F:ZeroC.IceMX.MetricsFailures.IceWriter">
            <summary>A <see cref="T:ZeroC.Ice.OutputStreamWriter`1"/> used to write <see cref="T:ZeroC.IceMX.MetricsFailures"/> instances.</summary>
        </member>
        <member name="F:ZeroC.IceMX.MetricsFailures.Id">
            <summary>The identifier of the metrics object associated to the failures.</summary>
        </member>
        <member name="F:ZeroC.IceMX.MetricsFailures.Failures">
            <summary>The failures observed for this metrics.</summary>
        </member>
        <member name="M:ZeroC.IceMX.MetricsFailures.op_Equality(ZeroC.IceMX.MetricsFailures,ZeroC.IceMX.MetricsFailures)">
            <summary>The equality operator == returns true if its operands are equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.IceMX.MetricsFailures.op_Inequality(ZeroC.IceMX.MetricsFailures,ZeroC.IceMX.MetricsFailures)">
            <summary>The inequality operator != returns true if its operands are not equal, false otherwise.</summary>
            <param name="lhs">The left hand side operand.</param>
            <param name="rhs">The right hand side operand.</param>
            <returns><c>true</c> if the operands are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ZeroC.IceMX.MetricsFailures.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.MetricsFailures"/>.</summary>
            <param name="id">The identifier of the metrics object associated to the failures.</param>
            <param name="failures">The failures observed for this metrics.</param>
        </member>
        <member name="M:ZeroC.IceMX.MetricsFailures.#ctor(ZeroC.Ice.InputStream)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.MetricsFailures"/>.</summary>
            <param name="istr">The <see cref="T:ZeroC.Ice.InputStream"/> being used to unmarshal the instance.</param>
        </member>
        <member name="M:ZeroC.IceMX.MetricsFailures.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.IceMX.MetricsFailures.Equals(ZeroC.IceMX.MetricsFailures)">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.IceMX.MetricsFailures.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ZeroC.IceMX.MetricsFailures.IceWrite(ZeroC.Ice.OutputStream)">
            <summary>Marshals the struct by writing its fields to the <see cref="T:ZeroC.Ice.OutputStream"/>.</summary>
            <param name="ostr">The stream to write to.</param>
        </member>
        <member name="T:ZeroC.IceMX.UnknownMetricsView">
            <summary>Raised if a metrics view cannot be found.</summary>
        </member>
        <member name="M:ZeroC.IceMX.UnknownMetricsView.#ctor(System.String,System.Exception,ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.UnknownMetricsView"/>.</summary>
            <param name="message">Message that describes the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="M:ZeroC.IceMX.UnknownMetricsView.#ctor(ZeroC.Ice.RetryPolicy)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.UnknownMetricsView"/>.</summary>
            <param name="retryPolicy">The retry policy for the exception.</param>
        </member>
        <member name="T:ZeroC.IceMX.ThreadMetrics">
            <summary>Provides information on the number of threads currently in use and their activity.</summary>
        </member>
        <member name="F:ZeroC.IceMX.ThreadMetrics.InUseForIO">
            <summary>The number of threads which are currently performing socket read or writes.</summary>
        </member>
        <member name="F:ZeroC.IceMX.ThreadMetrics.InUseForUser">
            <summary>The number of threads which are currently calling user code (servant dispatch, AMI callbacks, etc).</summary>
        </member>
        <member name="F:ZeroC.IceMX.ThreadMetrics.InUseForOther">
            <summary>The number of threads which are currently performing other activities. These are all other that are
            not counted with .InUseForUser or .InUseForIO, such as DNS lookups, garbage collection).</summary>
        </member>
        <member name="M:ZeroC.IceMX.ThreadMetrics.#ctor(System.String,System.Int64,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.ThreadMetrics"/>.</summary>
            <param name="id">The metrics identifier.</param>
            <param name="total">The total number of objects observed by this metrics. This includes the number of currently observed
            objects and the number of objects observed in the past.</param>
            <param name="current">The number of objects currently observed by this metrics.</param>
            <param name="totalLifetime">The sum of the lifetime of each observed objects. This does not include the lifetime of objects which are
            currently observed, only the objects observed in the past.</param>
            <param name="failures">The number of failures observed.</param>
            <param name="inUseForIO">The number of threads which are currently performing socket read or writes.</param>
            <param name="inUseForUser">The number of threads which are currently calling user code (servant dispatch, AMI callbacks, etc).</param>
            <param name="inUseForOther">The number of threads which are currently performing other activities. These are all other that are
            not counted with .InUseForUser or .InUseForIO, such as DNS lookups, garbage collection).</param>
        </member>
        <member name="M:ZeroC.IceMX.ThreadMetrics.#ctor">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.ThreadMetrics"/>.</summary>
        </member>
        <member name="T:ZeroC.IceMX.DispatchMetrics">
            <summary>Provides information on servant dispatch.</summary>
        </member>
        <member name="F:ZeroC.IceMX.DispatchMetrics.UserException">
            <summary>The number of dispatch that failed with a user exception.</summary>
        </member>
        <member name="F:ZeroC.IceMX.DispatchMetrics.Size">
            <summary>The size of the dispatch. This corresponds to the size of the
            marshalled input parameters.</summary>
        </member>
        <member name="F:ZeroC.IceMX.DispatchMetrics.ReplySize">
            <summary>The size of the dispatch reply. This corresponds to the size of
            the marshalled output and return parameters.</summary>
        </member>
        <member name="M:ZeroC.IceMX.DispatchMetrics.#ctor(System.String,System.Int64,System.Int32,System.Int64,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.DispatchMetrics"/>.</summary>
            <param name="id">The metrics identifier.</param>
            <param name="total">The total number of objects observed by this metrics. This includes the number of currently observed
            objects and the number of objects observed in the past.</param>
            <param name="current">The number of objects currently observed by this metrics.</param>
            <param name="totalLifetime">The sum of the lifetime of each observed objects. This does not include the lifetime of objects which are
            currently observed, only the objects observed in the past.</param>
            <param name="failures">The number of failures observed.</param>
            <param name="userException">The number of dispatch that failed with a user exception.</param>
            <param name="size">The size of the dispatch. This corresponds to the size of the
            marshalled input parameters.</param>
            <param name="replySize">The size of the dispatch reply. This corresponds to the size of
            the marshalled output and return parameters.</param>
        </member>
        <member name="M:ZeroC.IceMX.DispatchMetrics.#ctor">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.DispatchMetrics"/>.</summary>
        </member>
        <member name="T:ZeroC.IceMX.ChildInvocationMetrics">
            <summary>Provides information on child invocations. A child invocation is either remote (sent over an Ice connection) or
            collocated. An invocation can have multiple child invocation if it is retried. Child invocation metrics are
            embedded within InvocationMetrics.</summary>
        </member>
        <member name="F:ZeroC.IceMX.ChildInvocationMetrics.Size">
            <summary>The size of the invocation. This corresponds to the size of the marshalled input parameters.</summary>
        </member>
        <member name="F:ZeroC.IceMX.ChildInvocationMetrics.ReplySize">
            <summary>The size of the invocation reply. This corresponds to the size of the marshalled output and return
            parameters.</summary>
        </member>
        <member name="M:ZeroC.IceMX.ChildInvocationMetrics.#ctor(System.String,System.Int64,System.Int32,System.Int64,System.Int32,System.Int64,System.Int64)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.ChildInvocationMetrics"/>.</summary>
            <param name="id">The metrics identifier.</param>
            <param name="total">The total number of objects observed by this metrics. This includes the number of currently observed
            objects and the number of objects observed in the past.</param>
            <param name="current">The number of objects currently observed by this metrics.</param>
            <param name="totalLifetime">The sum of the lifetime of each observed objects. This does not include the lifetime of objects which are
            currently observed, only the objects observed in the past.</param>
            <param name="failures">The number of failures observed.</param>
            <param name="size">The size of the invocation. This corresponds to the size of the marshalled input parameters.</param>
            <param name="replySize">The size of the invocation reply. This corresponds to the size of the marshalled output and return
            parameters.</param>
        </member>
        <member name="M:ZeroC.IceMX.ChildInvocationMetrics.#ctor">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.ChildInvocationMetrics"/>.</summary>
        </member>
        <member name="T:ZeroC.IceMX.CollocatedMetrics">
            <summary>Provides information on invocations that are collocated. Collocated metrics are embedded within
            InvocationMetrics.</summary>
        </member>
        <member name="M:ZeroC.IceMX.CollocatedMetrics.#ctor(System.String,System.Int64,System.Int32,System.Int64,System.Int32,System.Int64,System.Int64)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.CollocatedMetrics"/>.</summary>
            <param name="id">The metrics identifier.</param>
            <param name="total">The total number of objects observed by this metrics. This includes the number of currently observed
            objects and the number of objects observed in the past.</param>
            <param name="current">The number of objects currently observed by this metrics.</param>
            <param name="totalLifetime">The sum of the lifetime of each observed objects. This does not include the lifetime of objects which are
            currently observed, only the objects observed in the past.</param>
            <param name="failures">The number of failures observed.</param>
            <param name="size">The size of the invocation. This corresponds to the size of the marshalled input parameters.</param>
            <param name="replySize">The size of the invocation reply. This corresponds to the size of the marshalled output and return
            parameters.</param>
        </member>
        <member name="M:ZeroC.IceMX.CollocatedMetrics.#ctor">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.CollocatedMetrics"/>.</summary>
        </member>
        <member name="T:ZeroC.IceMX.RemoteMetrics">
            <summary>Provides information on invocations that are specifically sent over Ice connections. Remote metrics are
            embedded within InvocationMetrics.</summary>
        </member>
        <member name="M:ZeroC.IceMX.RemoteMetrics.#ctor(System.String,System.Int64,System.Int32,System.Int64,System.Int32,System.Int64,System.Int64)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.RemoteMetrics"/>.</summary>
            <param name="id">The metrics identifier.</param>
            <param name="total">The total number of objects observed by this metrics. This includes the number of currently observed
            objects and the number of objects observed in the past.</param>
            <param name="current">The number of objects currently observed by this metrics.</param>
            <param name="totalLifetime">The sum of the lifetime of each observed objects. This does not include the lifetime of objects which are
            currently observed, only the objects observed in the past.</param>
            <param name="failures">The number of failures observed.</param>
            <param name="size">The size of the invocation. This corresponds to the size of the marshalled input parameters.</param>
            <param name="replySize">The size of the invocation reply. This corresponds to the size of the marshalled output and return
            parameters.</param>
        </member>
        <member name="M:ZeroC.IceMX.RemoteMetrics.#ctor">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.RemoteMetrics"/>.</summary>
        </member>
        <member name="T:ZeroC.IceMX.InvocationMetrics">
            <summary>Provide measurements for proxy invocations. Proxy invocations can either be sent over the wire or be collocated.</summary>
        </member>
        <member name="F:ZeroC.IceMX.InvocationMetrics.Retry">
            <summary>The number of retries for the invocation(s).</summary>
        </member>
        <member name="F:ZeroC.IceMX.InvocationMetrics.UserException">
            <summary>The number of invocations that failed with a user exception.</summary>
        </member>
        <member name="F:ZeroC.IceMX.InvocationMetrics.Children">
             <summary>The children invocation metrics map.
            
             @see ChildInvocationMetrics</summary>
        </member>
        <member name="F:ZeroC.IceMX.InvocationMetrics.Remotes">
            <summary>The remote invocation metrics map.
            TODO: Remove once all language mappings implement colocation as a transport
            @see RemoteMetrics</summary>
        </member>
        <member name="F:ZeroC.IceMX.InvocationMetrics.Collocated">
            <summary>The collocated invocation metrics map.
            TODO: Remove once all language mappings implement colocation as a transport
            @see CollocatedMetrics</summary>
        </member>
        <member name="M:ZeroC.IceMX.InvocationMetrics.#ctor(System.String,System.Int64,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,ZeroC.IceMX.Metrics[],ZeroC.IceMX.Metrics[],ZeroC.IceMX.Metrics[])">
             <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.InvocationMetrics"/>.</summary>
             <param name="id">The metrics identifier.</param>
             <param name="total">The total number of objects observed by this metrics. This includes the number of currently observed
             objects and the number of objects observed in the past.</param>
             <param name="current">The number of objects currently observed by this metrics.</param>
             <param name="totalLifetime">The sum of the lifetime of each observed objects. This does not include the lifetime of objects which are
             currently observed, only the objects observed in the past.</param>
             <param name="failures">The number of failures observed.</param>
             <param name="retry">The number of retries for the invocation(s).</param>
             <param name="userException">The number of invocations that failed with a user exception.</param>
             <param name="children">The children invocation metrics map.
            
             @see ChildInvocationMetrics</param>
             <param name="remotes">The remote invocation metrics map.
             TODO: Remove once all language mappings implement colocation as a transport
             @see RemoteMetrics</param>
             <param name="collocated">The collocated invocation metrics map.
             TODO: Remove once all language mappings implement colocation as a transport
             @see CollocatedMetrics</param>
        </member>
        <member name="M:ZeroC.IceMX.InvocationMetrics.#ctor(ZeroC.IceMX.Metrics[],ZeroC.IceMX.Metrics[],ZeroC.IceMX.Metrics[])">
             <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.InvocationMetrics"/>.</summary>
             <param name="children">The children invocation metrics map.
            
             @see ChildInvocationMetrics</param>
             <param name="remotes">The remote invocation metrics map.
             TODO: Remove once all language mappings implement colocation as a transport
             @see RemoteMetrics</param>
             <param name="collocated">The collocated invocation metrics map.
             TODO: Remove once all language mappings implement colocation as a transport
             @see CollocatedMetrics</param>
        </member>
        <member name="M:ZeroC.IceMX.InvocationMetrics.#ctor">
            <summary>Constructs a new InvocationMetrics object.</summary>
        </member>
        <member name="T:ZeroC.IceMX.ConnectionMetrics">
            <summary>Provides information on the data sent and received over Ice connections.</summary>
        </member>
        <member name="F:ZeroC.IceMX.ConnectionMetrics.ReceivedBytes">
            <summary>The number of bytes received by the connection.</summary>
        </member>
        <member name="F:ZeroC.IceMX.ConnectionMetrics.SentBytes">
            <summary>The number of bytes sent by the connection.</summary>
        </member>
        <member name="M:ZeroC.IceMX.ConnectionMetrics.#ctor(System.String,System.Int64,System.Int32,System.Int64,System.Int32,System.Int64,System.Int64)">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.ConnectionMetrics"/>.</summary>
            <param name="id">The metrics identifier.</param>
            <param name="total">The total number of objects observed by this metrics. This includes the number of currently observed
            objects and the number of objects observed in the past.</param>
            <param name="current">The number of objects currently observed by this metrics.</param>
            <param name="totalLifetime">The sum of the lifetime of each observed objects. This does not include the lifetime of objects which are
            currently observed, only the objects observed in the past.</param>
            <param name="failures">The number of failures observed.</param>
            <param name="receivedBytes">The number of bytes received by the connection.</param>
            <param name="sentBytes">The number of bytes sent by the connection.</param>
        </member>
        <member name="M:ZeroC.IceMX.ConnectionMetrics.#ctor">
            <summary>Constructs a new instance of <see cref="T:ZeroC.IceMX.ConnectionMetrics"/>.</summary>
        </member>
        <member name="T:ZeroC.IceMX.IMetricsAdminPrx">
            <summary>Proxy interface used to call remote Ice objects that implement Slice interface MetricsAdmin.
            The metrics administrative facet interface. This interface allows remote administrative clients to access
            metrics of an application that enabled the Ice administrative facility and configured some metrics views.
            <seealso cref="T:ZeroC.IceMX.IMetricsAdmin"/>.</summary>
        </member>
        <member name="T:ZeroC.IceMX.IMetricsAdminPrx.Request">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> factory method for each remote operation defined in <see cref="T:ZeroC.IceMX.IMetricsAdminPrx"/>.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.Request.GetMetricsViewNames(ZeroC.Ice.IObjectPrx,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for GetMetricsViewNames operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.Request.EnableMetricsView(ZeroC.Ice.IObjectPrx,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for EnableMetricsView operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.Request.DisableMetricsView(ZeroC.Ice.IObjectPrx,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for DisableMetricsView operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.Request.GetMetricsView(ZeroC.Ice.IObjectPrx,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for GetMetricsView operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.Request.GetMapMetricsFailures(ZeroC.Ice.IObjectPrx,System.ValueTuple{System.String,System.String}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for GetMapMetricsFailures operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.Request.GetMetricsFailures(ZeroC.Ice.IObjectPrx,System.ValueTuple{System.String,System.String,System.String}@,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingRequestFrame"/> for GetMetricsFailures operation.</summary>
            <param name="proxy">Proxy to the target Ice Object.</param>
            <param name="args">The remote operation arguments.</param>
            <param name="context">The context to write into the request.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        </member>
        <member name="T:ZeroC.IceMX.IMetricsAdminPrx.Response">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each non-void remote operation defined in <see cref="T:ZeroC.IceMX.IMetricsAdminPrx"/>.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.Response.GetMetricsViewNames(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingResponseFrame)">
            <summary>The <see cref="T:ZeroC.Ice.ResponseReader`1"/> for the return type of operation GetMetricsViewNames.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.Response.GetMetricsView(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingResponseFrame)">
            <summary>The <see cref="T:ZeroC.Ice.ResponseReader`1"/> for the return type of operation GetMetricsView.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.Response.GetMapMetricsFailures(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingResponseFrame)">
            <summary>The <see cref="T:ZeroC.Ice.ResponseReader`1"/> for the return type of operation GetMapMetricsFailures.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.Response.GetMetricsFailures(ZeroC.Ice.IObjectPrx,ZeroC.Ice.IncomingResponseFrame)">
            <summary>The <see cref="T:ZeroC.Ice.ResponseReader`1"/> for the return type of operation GetMetricsFailures.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.GetMetricsViewNames(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Get the names of enabled and disabled metrics.</summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>Named tuple with the following fields:</returns>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.GetMetricsViewNamesAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Get the names of enabled and disabled metrics.</summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.EnableMetricsView(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Enables a metrics view.</summary>
            <param name="name">The metrics view name.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.EnableMetricsViewAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Enables a metrics view.</summary>
            <param name="name">The metrics view name.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.DisableMetricsView(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Disable a metrics view.</summary>
            <param name="name">The metrics view name.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.DisableMetricsViewAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Disable a metrics view.</summary>
            <param name="name">The metrics view name.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.GetMetricsView(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Get the metrics objects for the given metrics view. This returns a dictionary of metric maps for each
            metrics class configured with the view. The timestamp allows the client to compute averages which are
            not dependent of the invocation latency for this operation.</summary>
            <param name="view">The name of the metrics view.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>Named tuple with the following fields:</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.GetMetricsViewAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Get the metrics objects for the given metrics view. This returns a dictionary of metric maps for each
            metrics class configured with the view. The timestamp allows the client to compute averages which are
            not dependent of the invocation latency for this operation.</summary>
            <param name="view">The name of the metrics view.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.GetMapMetricsFailures(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Get the metrics failures associated with the given view and map.</summary>
            <param name="view">The name of the metrics view.</param>
            <param name="map">The name of the metrics map.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The metrics failures associated with the map.</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.GetMapMetricsFailuresAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Get the metrics failures associated with the given view and map.</summary>
            <param name="view">The name of the metrics view.</param>
            <param name="map">The name of the metrics map.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.GetMetricsFailures(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Get the metrics failure associated for the given metrics.</summary>
            <param name="view">The name of the metrics view.</param>
            <param name="map">The name of the metrics map.</param>
            <param name="id">The ID of the metrics.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The metrics failures associated with the metrics.</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.GetMetricsFailuresAsync(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>Get the metrics failure associated for the given metrics.</summary>
            <param name="view">The name of the metrics view.</param>
            <param name="map">The name of the metrics map.</param>
            <param name="id">The ID of the metrics.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="F:ZeroC.IceMX.IMetricsAdminPrx.Factory">
            <summary>Factory for <see cref="T:ZeroC.IceMX.IMetricsAdminPrx"/> proxies.</summary>
        </member>
        <member name="F:ZeroC.IceMX.IMetricsAdminPrx.IceReader">
            <summary>An <see cref="T:ZeroC.Ice.InputStreamReader`1"/> used to read <see cref="T:ZeroC.IceMX.IMetricsAdminPrx"/> proxies.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.Parse(System.String,ZeroC.Ice.Communicator)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.IceMX.IMetricsAdminPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <returns>The new proxy</returns>
            <exception cref="T:System.FormatException"><c>s</c> does not contain a valid string representation of a proxy.</exception>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdminPrx.TryParse(System.String,ZeroC.Ice.Communicator,ZeroC.IceMX.IMetricsAdminPrx@)">
            <summary>Converts the string representation of a proxy to its <see cref="T:ZeroC.IceMX.IMetricsAdminPrx"/> equivalent.</summary>
            <param name="s">The proxy string representation.</param>
            <param name="communicator">The communicator for the new proxy</param>
            <param name="prx">When this method returns it contains the new proxy, if the conversion succeeded or null if the conversion failed.</param>
            <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ZeroC.IceMX.IMetricsAdmin">
            <summary>Interface used to implement servants for Slice interface MetricsAdmin.
            The metrics administrative facet interface. This interface allows remote administrative clients to access
            metrics of an application that enabled the Ice administrative facility and configured some metrics views.
            <seealso cref="T:ZeroC.IceMX.IMetricsAdminPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.IceMX.IMetricsAdmin.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.IceMX.IMetricsAdmin"/>.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.Request.EnableMetricsView(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameter of operation EnableMetricsView.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.Request.DisableMetricsView(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameter of operation DisableMetricsView.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.Request.GetMetricsView(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameter of operation GetMetricsView.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.Request.GetMapMetricsFailures(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation GetMapMetricsFailures.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.Request.GetMetricsFailures(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation GetMetricsFailures.</summary>
        </member>
        <member name="T:ZeroC.IceMX.IMetricsAdmin.Response">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> factory method for each non-void remote operation
            defined in the <see cref="T:ZeroC.IceMX.IMetricsAdmin"/>.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.Response.GetMetricsViewNames(ZeroC.Ice.Current,System.ValueTuple{System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String}}@)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation GetMetricsViewNames.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.Response.GetMetricsView(ZeroC.Ice.Current,System.ValueTuple{System.Collections.Generic.IReadOnlyDictionary{System.String,ZeroC.IceMX.Metrics[]},System.Int64}@)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation GetMetricsView.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.Response.GetMapMetricsFailures(ZeroC.Ice.Current,System.Collections.Generic.IEnumerable{ZeroC.IceMX.MetricsFailures})">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation GetMapMetricsFailures.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.Response.GetMetricsFailures(ZeroC.Ice.Current,ZeroC.IceMX.MetricsFailures)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation GetMetricsFailures.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.GetMetricsViewNames(ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Get the names of enabled and disabled metrics.</summary>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>Named tuple with the following fields:</returns>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.EnableMetricsView(System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Enables a metrics view.</summary>
            <param name="name">The metrics view name.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.DisableMetricsView(System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Disable a metrics view.</summary>
            <param name="name">The metrics view name.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.GetMetricsView(System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Get the metrics objects for the given metrics view. This returns a dictionary of metric maps for each
            metrics class configured with the view. The timestamp allows the client to compute averages which are
            not dependent of the invocation latency for this operation.</summary>
            <param name="view">The name of the metrics view.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>Named tuple with the following fields:</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.GetMapMetricsFailures(System.String,System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Get the metrics failures associated with the given view and map.</summary>
            <param name="view">The name of the metrics view.</param>
            <param name="map">The name of the metrics map.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The metrics failures associated with the map.</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IMetricsAdmin.GetMetricsFailures(System.String,System.String,System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Get the metrics failure associated for the given metrics.</summary>
            <param name="view">The name of the metrics view.</param>
            <param name="map">The name of the metrics map.</param>
            <param name="id">The ID of the metrics.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The metrics failures associated with the metrics.</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="T:ZeroC.IceMX.IAsyncMetricsAdmin">
            <summary>Interface used to implement servants for Slice interface MetricsAdmin.
            The metrics administrative facet interface. This interface allows remote administrative clients to access
            metrics of an application that enabled the Ice administrative facility and configured some metrics views.
            <seealso cref="T:ZeroC.IceMX.IMetricsAdminPrx"/>.</summary>
        </member>
        <member name="T:ZeroC.IceMX.IAsyncMetricsAdmin.Request">
            <summary>Holds a <see cref="T:ZeroC.Ice.InputStreamReader`1"/> for each remote operation with parameter(s)
            defined in <see cref="T:ZeroC.IceMX.IAsyncMetricsAdmin"/>.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.Request.EnableMetricsView(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameter of operation EnableMetricsView.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.Request.DisableMetricsView(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameter of operation DisableMetricsView.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.Request.GetMetricsView(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameter of operation GetMetricsView.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.Request.GetMapMetricsFailures(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation GetMapMetricsFailures.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.Request.GetMetricsFailures(ZeroC.Ice.Connection,ZeroC.Ice.IncomingRequestFrame)">
            <summary>The <see cref="T:ZeroC.Ice.RequestReader`1"/> for the parameters of operation GetMetricsFailures.</summary>
        </member>
        <member name="T:ZeroC.IceMX.IAsyncMetricsAdmin.Response">
            <summary>Provides a <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> factory method for each non-void remote operation
            defined in the <see cref="T:ZeroC.IceMX.IAsyncMetricsAdmin"/>.</summary>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.Response.GetMetricsViewNames(ZeroC.Ice.Current,System.ValueTuple{System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String}}@)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation GetMetricsViewNames.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.Response.GetMetricsView(ZeroC.Ice.Current,System.ValueTuple{System.Collections.Generic.IReadOnlyDictionary{System.String,ZeroC.IceMX.Metrics[]},System.Int64}@)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation GetMetricsView.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.Response.GetMapMetricsFailures(ZeroC.Ice.Current,System.Collections.Generic.IEnumerable{ZeroC.IceMX.MetricsFailures})">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation GetMapMetricsFailures.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.Response.GetMetricsFailures(ZeroC.Ice.Current,ZeroC.IceMX.MetricsFailures)">
            <summary>Creates an <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/> for operation GetMetricsFailures.</summary>
            <param name="current">Holds decoded header data and other information about the current request.</param>
            <param name="returnValue">The return value to write into the new frame.</param>
            <returns>A new <see cref="T:ZeroC.Ice.OutgoingResponseFrame"/>.</returns>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.GetMetricsViewNamesAsync(ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Get the names of enabled and disabled metrics.</summary>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.EnableMetricsViewAsync(System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Enables a metrics view.</summary>
            <param name="name">The metrics view name.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.DisableMetricsViewAsync(System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Disable a metrics view.</summary>
            <param name="name">The metrics view name.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.GetMetricsViewAsync(System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Get the metrics objects for the given metrics view. This returns a dictionary of metric maps for each
            metrics class configured with the view. The timestamp allows the client to compute averages which are
            not dependent of the invocation latency for this operation.</summary>
            <param name="view">The name of the metrics view.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.GetMapMetricsFailuresAsync(System.String,System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Get the metrics failures associated with the given view and map.</summary>
            <param name="view">The name of the metrics view.</param>
            <param name="map">The name of the metrics map.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
        <member name="M:ZeroC.IceMX.IAsyncMetricsAdmin.GetMetricsFailuresAsync(System.String,System.String,System.String,ZeroC.Ice.Current,System.Threading.CancellationToken)">
            <summary>Get the metrics failure associated for the given metrics.</summary>
            <param name="view">The name of the metrics view.</param>
            <param name="map">The name of the metrics map.</param>
            <param name="id">The ID of the metrics.</param>
            <param name="current">The Current object for the dispatch.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exceptions cref="T:ZeroC.IceMX.UnknownMetricsView">Raised if the metrics view cannot be found.</exceptions>
        </member>
    </members>
</doc>
