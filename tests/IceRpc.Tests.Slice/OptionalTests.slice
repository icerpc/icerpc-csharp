// Copyright (c) ZeroC, Inc. All rights reserved.

module IceRpc::Tests::Slice;

compact struct OneOptional
{
    a: int32?,
}

compact struct MultiOptional
{
    mUInt8: uint8?,
    mBool: bool?,
    mInt16: int16?,
    mInt32: int32?,
    mInt64: int64?,
    mFloat32: float32?,
    mFloat64: float64?,
    mUInt16: uint16?,
    mUInt32: uint32?,
    mUInt64: uint64?,
    mVarInt32: varint32?,
    mVarInt62: varint62?,
    mVarUInt32: varuint32?,
    mVarUInt62: varuint62?,
    mString: string?,

    mMyEnum: MyEnum?,
    mMyCompactStruct: MyCompactStruct?,
    mAnotherCompactStruct: AnotherCompactStruct?,

    mUInt8Seq: UInt8Seq?,
    mStringSeq: StringSeq?,
    mInt16Seq: Int16Seq?,
    mMyEnumSeq: MyEnumSeq?,
    mMyCompactStructSeq: MyCompactStructSeq?,
    mAnotherCompactStructSeq: AnotherCompactStructSeq?,

    mInt32Dict: Int32Dict?,
    mStringDict: StringDict?,
    mUInt16Seq: UInt16Seq?,
    mVarUInt62Seq: VarUInt62Seq?,
    mVarInt32Seq: VarInt32Seq?,

    mUInt8Dict: UInt8Dict?,
    mMyCompactStructDict: MyCompactStructDict?,
    mAnotherCompactStructDict: AnotherCompactStructDict?,
}

interface OptionalOperations
{
    pingPongOne(o: OneOptional?) -> OneOptional?;
    pingPongMulti(o: MultiOptional?) -> MultiOptional?;

    opUInt8(p1: uint8?) -> (r1: uint8?, r2: uint8?);

    opBool(p1: bool?) -> (r1: bool?, r2: bool?);

    opInt16(p1: int16?) -> (r1: int16?, r2: int16?);

    opInt32(p1: int32?) -> (r1: int32?, r2: int32?);

    opInt64(p1: int64?) -> (r1: int64?, r2: int64?);

    opFloat32(p1: float32?) -> (r1: float32?, r2: float32?);

    opFloat64(p1: float64?) -> (r1: float64?, r2: float64?);

    opString(p1: string?) -> (r1: string?, r2: string?);

    opMyEnum(p1: MyEnum?) -> (r1: MyEnum?, r2: MyEnum?);

    opMyCompactStruct(p1: MyCompactStruct?) -> (r1: MyCompactStruct?, r2: MyCompactStruct?);

    opAnotherCompactStruct(p1: AnotherCompactStruct?) -> (r1: AnotherCompactStruct?, r2: AnotherCompactStruct?);

    opUInt8Seq(p1: UInt8Seq?) -> (r1: UInt8Seq?, r2: UInt8Seq?);
    opUInt8List(p1: UInt8List?) -> (r1: UInt8List?, r2: UInt8List?);

    opBoolSeq(p1: BoolSeq?) -> (r1: BoolSeq?, r2: BoolSeq?);
    opBoolList(p1: BoolList?) -> (r1: BoolList?, r2: BoolList?);

    opInt16Seq(p1: Int16Seq?) -> (r1: Int16Seq?, r2: Int16Seq?);
    opInt16List(p1: Int16List?) -> (r1: Int16List?, r2: Int16List?);

    opInt32Seq(p1: Int32Seq?) -> (r1: Int32Seq?, r2: Int32Seq?);
    opInt32List(p1: Int32List?) -> (r1: Int32List?, r2: Int32List?);

    opInt64Seq(p1: Int64Seq?) -> (r1: Int64Seq?, r2: Int64Seq?);
    opInt64List(p1: Int64List?) -> (r1: Int64List?, r2: Int64List?);

    opFloat32Seq(p1: Float32Seq?) -> (r1: Float32Seq?, r2: Float32Seq?);
    opFloat32List(p1: Float32List?) -> (r1: Float32List?, r2: Float32List?);

    opFloat64Seq(p1: Float64Seq?) -> (r1: Float64Seq?, r2: Float64Seq?);
    opFloat64List(p1: Float64List?) -> (r1: Float64List?, r2: Float64List?);

    opStringSeq(p1: StringSeq?) -> (r1: StringSeq?, r2: StringSeq?);
    opStringList(p1: StringList?) -> (r1: StringList?, r2: StringList?);

    opMyCompactStructSeq(p1: MyCompactStructSeq?) -> (r1: MyCompactStructSeq?, r2: MyCompactStructSeq?);
    opMyCompactStructList(p1: MyCompactStructList?) -> (r1: MyCompactStructList?, r2: MyCompactStructList?);

    opAnotherCompactStructSeq(p1: AnotherCompactStructSeq?) -> (
        r1: AnotherCompactStructSeq?,
        r2: AnotherCompactStructSeq?,
    );
    opAnotherCompactStructList(p1: AnotherCompactStructList?) -> (
        r1: AnotherCompactStructList?,
        r2: AnotherCompactStructList?,
    );

    opInt32Dict(p1: Int32Dict?) -> (r1: Int32Dict?, r2: Int32Dict?);
    opStringDict(p1: StringDict?) -> (r1: StringDict?, r2: StringDict?);

    [cs:encoded-result] opMyCompactStructMarshaledResult(p1: MyCompactStruct?) -> MyCompactStruct?;
    [cs:encoded-result] opStringSeqMarshaledResult(p1: StringSeq?) -> StringSeq?;
    [cs:encoded-result] opInt32DictMarshaledResult(p1: Int32Dict?) -> Int32Dict?;
}
