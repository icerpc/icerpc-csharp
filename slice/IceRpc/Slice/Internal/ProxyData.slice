// Copyright (c) ZeroC, Inc. All rights reserved.

encoding = 1.1;

[cs:internal]
module IceRpc::Slice::Internal;

// These definitions help with the encoding of proxies with the Slice 1.1 encoding.

/// The fragment of a service, encoded as a sequence of 0 or 1 elements. The empty string is encoded as an empty
/// sequence. A non-empty string is encoded as a sequence with 1 element. While the fragment string is
/// percent-escaped, the sequence element is not.
[cs:type("string")]
compact struct Fragment
{
    value: sequence<string>, // has 0 or 1 element
}

/// The InvocationMode is carried by proxies that use the ice protocol, and it specifies the behavior when sending
/// a request using such a proxy. When encoding an ice proxy, IceRPC always uses Twoway.
enum InvocationMode
{
    /// This is the default invocation mode; a request using this mode always expects a response.
    Twoway,

    /// A request using oneway mode returns control to the application code as soon as it has been accepted by the
    /// local transport.
    Oneway,

    /// Not used by IceRPC.
    BatchOneway,

    /// Not used by IceRPC.
    Datagram,

    /// Not used by IceRPC.
    BatchDatagram,
}

/// With the Slice 1.1 encoding, a proxy is encoded as a kind of discriminated union with:
/// - Identity
/// - if Identity is not the null identity:
///     - ProxyData
///     - a sequence of endpoints that can be empty
///     - an adapter ID string present only when the sequence of endpoints is empty
[cs:readonly]
compact struct ProxyData
{
    fragment: Fragment,
    invocationMode: InvocationMode,
    secure: bool,
    protocolMajor: byte,
    protocolMinor: byte,
    encodingMajor: byte,
    encodingMinor: byte,
}
