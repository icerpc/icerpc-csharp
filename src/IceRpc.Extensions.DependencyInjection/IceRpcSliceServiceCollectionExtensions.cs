// Copyright (c) ZeroC, Inc. All rights reserved.

using IceRpc;
using IceRpc.Slice;

namespace Microsoft.Extensions.DependencyInjection;

/// <summary>Extension methods for setting up IceRpc.Slice services in an <see cref="IServiceCollection"/>.</summary>
public static class IceRpcSliceServiceCollectionExtensions
{
    /// <summary>Adds a Prx singleton to this service collection.</summary>
    /// <typeparam name="TPrx">The Prx interface generated by the Slice compiler.</typeparam>
    /// <typeparam name="TPrxImplementation">The implementation of TPrx.</typeparam>
    /// <param name="services">The service collection to add services to.</param>
    /// <param name="proxyString">A string representation of the underlying proxy. If it's an absolute path, the
    /// <see cref="IClientConnection"/> service must be available to provide the proxy's protocol.</param>
    /// <returns>The service collection.</returns>
    public static IServiceCollection AddIceRpcPrx<TPrx, TPrxImplementation>(
        this IServiceCollection services,
        string proxyString)
        where TPrx : class
        where TPrxImplementation : IPrx, TPrx, new() =>
        services
            .AddSingleton<TPrx>(provider =>
            {
                IInvoker invoker = provider.GetService<IInvoker>() ?? Proxy.DefaultInvoker;
                Proxy proxy;
                if (proxyString.StartsWith('/'))
                {
                    IClientConnection connection = provider.GetRequiredService<IClientConnection>();
                    proxy = Proxy.FromConnection(connection, proxyString, invoker);
                }
                else
                {
                    proxy = Proxy.Parse(proxyString, invoker);
                    proxy.Connection = provider.GetService<IClientConnection>();
                }

                return new TPrxImplementation
                {
                    EncodeFeature = provider.GetService<ISliceEncodeFeature>(),
                    Proxy = proxy,
                };
            });

    /// <summary>Adds a Prx singleton to this service collection, using the Prx interface default path.</summary>
    /// <typeparam name="TPrx">The Prx interface generated by the Slice compiler.</typeparam>
    /// <typeparam name="TPrxImplementation">The implementation of TPrx.</typeparam>
    /// <param name="services">The service collection to add services to.</param>
    /// <returns>The service collection.</returns>
    public static IServiceCollection AddIceRpcPrx<TPrx, TPrxImplementation>(this IServiceCollection services)
        where TPrx : class
        where TPrxImplementation : IPrx, TPrx, new() =>
        services.AddIceRpcPrx<TPrx, TPrxImplementation>(typeof(TPrx).GetDefaultPath());
}
