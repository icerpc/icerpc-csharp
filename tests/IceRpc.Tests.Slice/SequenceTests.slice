// Copyright (c) ZeroC, Inc. All rights reserved.

module IceRpc::Tests::Slice;

typealias ByteSeq = sequence<uint8>;
typealias BoolSeq = sequence<bool>;
typealias ShortSeq = sequence<int16>;
typealias UShortSeq = sequence<uint16>;
typealias IntSeq = sequence<int32>;
typealias VarIntSeq = sequence<varint32>;
typealias UIntSeq = sequence<uint32>;
typealias VarUIntSeq = sequence<varuint32>;
typealias LongSeq = sequence<int64>;
typealias VarLongSeq = sequence<varint62>;
typealias ULongSeq = sequence<uint64>;
typealias VarULongSeq = sequence<varuint62>;
typealias FloatSeq = sequence<float32>;
typealias DoubleSeq = sequence<float64>;
typealias StringSeq = sequence<string>;

typealias MyEnumSeq = sequence<MyEnum>;
typealias MyFixedLengthEnumSeq = sequence<MyFixedLengthEnum>;
typealias MyUncheckedEnumSeq = sequence<MyUncheckedEnum>;

typealias MyCompactStructSeq = sequence<MyCompactStruct>;
typealias OperationsSeq = sequence<Operations>;
typealias AnotherCompactStructSeq = sequence<AnotherCompactStruct>;

// Sequence mapping
typealias ByteList = [cs:generic("System.Collections.Generic.List")] sequence<uint8>;
typealias ByteCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<uint8>;

typealias BoolList = [cs:generic("System.Collections.Generic.List")] sequence<bool>;
typealias BoolCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<bool>;

typealias ShortList = [cs:generic("System.Collections.Generic.List")] sequence<int16>;
typealias ShortCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<int16>;

typealias IntList = [cs:generic("System.Collections.Generic.List")] sequence<int32>;
typealias IntCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<int32>;

typealias LongList = [cs:generic("System.Collections.Generic.List")] sequence<int64>;
typealias LongCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<int64>;

typealias FloatList = [cs:generic("System.Collections.Generic.List")] sequence<float32>;
typealias FloatCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<float32>;

typealias DoubleList = [cs:generic("System.Collections.Generic.List")] sequence<float64>;
typealias DoubleCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<float64>;

typealias StringList = [cs:generic("System.Collections.Generic.List")] sequence<string>;
typealias StringCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<string>;

typealias MyEnumList = [cs:generic("System.Collections.Generic.List")] sequence<MyEnum>;
typealias MyEnumCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<MyEnum>;

typealias MyFixedLengthEnumList = [cs:generic("System.Collections.Generic.List")] sequence<MyFixedLengthEnum>;
typealias MyFixedLengthEnumCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<MyFixedLengthEnum>;

typealias MyUncheckedEnumList = [cs:generic("System.Collections.Generic.List")] sequence<MyUncheckedEnum>;
typealias MyUncheckedEnumCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<MyUncheckedEnum>;

typealias MyCompactStructList = [cs:generic("System.Collections.Generic.List")] sequence<MyCompactStruct>;
typealias MyCompactStructCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<MyCompactStruct>;

typealias OperationsList = [cs:generic("System.Collections.Generic.List")] sequence<Operations>;
typealias OperationsCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<Operations>;

typealias AnotherCompactStructList = [cs:generic("System.Collections.Generic.List")] sequence<AnotherCompactStruct>;
typealias AnotherCompactStructCustomSeq = [cs:generic("IceRpc.Tests.Slice.CustomSequence")] sequence<AnotherCompactStruct>;

interface SequenceOperations
{
    // Builtin types sequences
    opUInt8Seq(p1: ByteSeq, p2: ByteSeq) -> (r1: ByteSeq, r2: ByteSeq);
    opBoolSeq(p1: BoolSeq, p2: BoolSeq) -> (r1: BoolSeq, r2: BoolSeq);
    opInt16Seq(p1: ShortSeq, p2: ShortSeq) -> (r1: ShortSeq, r2: ShortSeq);
    opUInt16Seq(p1: UShortSeq, p2: UShortSeq) -> (r1: UShortSeq, r2: UShortSeq);
    opInt32Seq(p1: IntSeq, p2: IntSeq) -> (r1: IntSeq, r2: IntSeq);
    opVarInt32Seq(p1: VarIntSeq, p2: VarIntSeq) -> (r1: VarIntSeq, r2: VarIntSeq);
    opUInt32Seq(p1: UIntSeq, p2: UIntSeq) -> (r1: UIntSeq, r2: UIntSeq);
    opVarUInt32Seq(p1: VarUIntSeq, p2: VarUIntSeq) -> (r1: VarUIntSeq, r2: VarUIntSeq);
    opInt64Seq(p1: LongSeq, p2: LongSeq) -> (r1: LongSeq, r2: LongSeq);
    opVarInt62Seq(p1: VarLongSeq, p2: VarLongSeq) -> (r1: VarLongSeq, r2: VarLongSeq);
    opUInt64Seq(p1: ULongSeq, p2: ULongSeq) -> (r1: ULongSeq, r2: ULongSeq);
    opVarUInt3262Seq(p1: VarULongSeq, p2: VarULongSeq) -> (r1: VarULongSeq, r2: VarULongSeq);
    opFloat32Seq(p1: FloatSeq, p2: FloatSeq) -> (r1: FloatSeq, r2: FloatSeq);
    opFloat64Seq(p1: DoubleSeq, p2: DoubleSeq) -> (r1: DoubleSeq, r2: DoubleSeq);
    opStringSeq(p1: StringSeq, p2: StringSeq) -> (r1: StringSeq, r2: StringSeq);

    // Defined types sequences
    opMyEnumSeq(p1: MyEnumSeq, p2: MyEnumSeq) -> (r1: MyEnumSeq, r2: MyEnumSeq);
    opMyFixedLengthEnumSeq(p1: MyFixedLengthEnumSeq, p2: MyFixedLengthEnumSeq) -> (
        r1: MyFixedLengthEnumSeq,
        r2: MyFixedLengthEnumSeq,
    );
    opMyUncheckedEnumSeq(p1: MyUncheckedEnumSeq, p2: MyUncheckedEnumSeq) -> (
        r1: MyUncheckedEnumSeq,
        r2: MyUncheckedEnumSeq,
    );
    opMyCompactStructSeq(p1: MyCompactStructSeq, p2: MyCompactStructSeq) -> (
        r1: MyCompactStructSeq,
        r2: MyCompactStructSeq,
    );
    opOperationsSeq(p1: OperationsSeq, p2: OperationsSeq) -> (r1: OperationsSeq, r2: OperationsSeq);
    opAnotherCompactStructSeq(p1: AnotherCompactStructSeq, p2: AnotherCompactStructSeq) -> (
        r1: AnotherCompactStructSeq,
        r2: AnotherCompactStructSeq,
    );

    // Sequence mapping
    opUInt8List(p1: ByteList, p2: ByteList) -> (r1: ByteList, r2: ByteList);
    opUInt8CustomSeq(p1: ByteCustomSeq, p2: ByteCustomSeq) -> (r1: ByteCustomSeq, r2: ByteCustomSeq);

    opBoolList(p1: BoolList, p2: BoolList) -> (r1: BoolList, r2: BoolList);
    opBoolCustomSeq(p1: BoolCustomSeq, p2: BoolCustomSeq) -> (r1: BoolCustomSeq, r2: BoolCustomSeq);

    opInt32List(p1: IntList, p2: IntList) -> (r1: IntList, r2: IntList);
    opIntCustomSeq(p1: IntCustomSeq, p2: IntCustomSeq) -> (r1: IntCustomSeq, r2: IntCustomSeq);

    opInt64List(p1: LongList, p2: LongList) -> (r1: LongList, r2: LongList);
    opInt64CustomSeq(p1: LongCustomSeq, p2: LongCustomSeq) -> (r1: LongCustomSeq, r2: LongCustomSeq);

    opFloat32List(p1: FloatList, p2: FloatList) -> (r1: FloatList, r2: FloatList);
    opFloat32CustomSeq(p1: FloatCustomSeq, p2: FloatCustomSeq) -> (r1: FloatCustomSeq, r2: FloatCustomSeq);

    opStringList(p1: StringList, p2: StringList) -> (r1: StringList, r2: StringList);
    opStringCustomSeq(p1: StringCustomSeq, p2: StringCustomSeq) -> (r1: StringCustomSeq, r2: StringCustomSeq);

    opMyEnumList(p1: MyEnumList, p2: MyEnumList) -> (r1: MyEnumList, r2: MyEnumList);
    opMyEnumCustomSeq(p1: MyEnumCustomSeq, p2: MyEnumCustomSeq) -> (r1: MyEnumCustomSeq, r2: MyEnumCustomSeq);

    opMyFixedLengthEnumList(p1: MyFixedLengthEnumList, p2: MyFixedLengthEnumList) -> (
        r1: MyFixedLengthEnumList,
        r2: MyFixedLengthEnumList,
    );
    opMyFixedLengthEnumCustomSeq(p1: MyFixedLengthEnumCustomSeq, p2: MyFixedLengthEnumCustomSeq) -> (
        r1: MyFixedLengthEnumCustomSeq,
        r2: MyFixedLengthEnumCustomSeq,
    );

    opMyUncheckedEnumList(p1: MyUncheckedEnumList, p2: MyUncheckedEnumList) -> (
        r1: MyUncheckedEnumList,
        r2: MyUncheckedEnumList,
    );
    opMyUncheckedEnumCustomSeq(p1: MyUncheckedEnumCustomSeq, p2: MyUncheckedEnumCustomSeq) -> (
        r1: MyUncheckedEnumCustomSeq,
        r2: MyUncheckedEnumCustomSeq,
    );

    opMyCompactStructList(p1: MyCompactStructList, p2: MyCompactStructList) -> (
        r1: MyCompactStructList,
        r2: MyCompactStructList,
    );
    opMyCompactStructCustomSeq(p1: MyCompactStructCustomSeq, p2: MyCompactStructCustomSeq) -> (
        r1: MyCompactStructCustomSeq,
        r2: MyCompactStructCustomSeq,
    );

    opOperationsList(p1: OperationsList, p2: OperationsList) -> (r1: OperationsList, r2: OperationsList);
    opOperationsCustomSeq(p1: OperationsCustomSeq, p2: OperationsCustomSeq) -> (
        r1: OperationsCustomSeq,
        r2: OperationsCustomSeq,
    );

    opAnotherCompactStructList(p1: AnotherCompactStructList, p2: AnotherCompactStructList) -> (
        r1: AnotherCompactStructList,
        r2: AnotherCompactStructList,
    );
    opAnotherCompactStructCustomSeq(p1: AnotherCompactStructCustomSeq, p2: AnotherCompactStructCustomSeq) -> (
        r1: AnotherCompactStructCustomSeq,
        r2: AnotherCompactStructCustomSeq,
    );
}
