// Copyright (c) ZeroC, Inc. All rights reserved.

module IceRpc::Tests::Slice;

trait MyTraitA;
trait MyTraitB;

struct TraitStructA
{
    s: string,
}

struct TraitStructB
{
    l: int64,
}

struct TraitStructAB
{
    s: string,
    l: int64,
}

struct NestedTraitStruct
{
    t: MyTraitA,
}

struct OptionalNestedTraitStruct
{
    t1: MyTraitA?,
    t2: MyTraitB?,
}

interface TraitOperations
{
    opTraitA(p1: MyTraitA) -> string;
    opTraitB(p1: MyTraitB) -> int64;

    opTraitASeq(p1: sequence<MyTraitA>) -> sequence<string>;
    opTraitBDict(p1: dictionary<uint8, MyTraitB>) -> dictionary<uint8, int64>;
    opNestedTraitStruct(p1: NestedTraitStruct) -> string;
    opOptionalNestedTraitStruct(p1: OptionalNestedTraitStruct) -> (s: string?, l: int64?);

    opOptionalTrait(p1: MyTraitA?) -> string?;

    opConvertToA(p1: MyTraitB) -> MyTraitA?;
}
