// Copyright (c) ZeroC, Inc.

module IceRpc::Slice::Tests

interface SequenceMappingOperations {

    returnSequenceOfInt32() -> Sequence<int32>
    sendSequenceOfInt32(p: Sequence<int32>)

    returnSequenceOfString() -> Sequence<string>
    sendSequenceOfString(p: Sequence<string>)

    returnSequenceOfMyFixedLengthEnum() -> Sequence<MyFixedLengthEnum>
    sendSequenceOfMyFixedLengthEnum(p: Sequence<MyFixedLengthEnum>)

    returnSequenceOfMyVarSizeEnum() -> Sequence<MyVarSizeEnum>
    sendSequenceOfMyVarSizeEnum(p: Sequence<MyVarSizeEnum>)

    returnSequenceOfMyUncheckedEnum() -> Sequence<MyUncheckedEnum>
    sendSequenceOfMyUncheckedEnum(p: Sequence<MyUncheckedEnum>)

    returnSequenceOfOptionalInt32() -> Sequence<int32?>
    sendSequenceOfOptionalInt32(p: Sequence<int32?>)

    returnSequenceOfOptionalString() -> Sequence<string?>
    sendSequenceOfOptionalString(p: Sequence<string?>)

    returnSequenceOfOptionalMyFixedLengthEnum() -> Sequence<MyFixedLengthEnum?>
    sendSequenceOfOptionalMyFixedLengthEnum(p: Sequence<MyFixedLengthEnum?>)

    returnSequenceOfOptionalMyVarSizeEnum() -> Sequence<MyVarSizeEnum?>
    sendSequenceOfOptionalMyVarSizeEnum(p: Sequence<MyVarSizeEnum?>)

    returnSequenceOfOptionalMyUncheckedEnum() -> Sequence<MyUncheckedEnum?>
    sendSequenceOfOptionalMyUncheckedEnum(p: Sequence<MyUncheckedEnum?>)

    returnCustomSequenceOfInt32() -> [cs::type("CustomSequence<int>")] Sequence<int32>
    sendCustomSequenceOfInt32(p: [cs::type("CustomSequence<int>")] Sequence<int32>)

    returnCustomSequenceOfString() -> [cs::type("CustomSequence<string>")] Sequence<string>
    sendCustomSequenceOfString(p: [cs::type("CustomSequence<string>")] Sequence<string>)

    returnCustomSequenceOfMyFixedLengthEnum() -> [cs::type("CustomSequence<MyFixedLengthEnum>")] Sequence<MyFixedLengthEnum>
    sendCustomSequenceOfMyFixedLengthEnum(p: [cs::type("CustomSequence<MyFixedLengthEnum>")] Sequence<MyFixedLengthEnum>)

    returnCustomSequenceOfMyVarSizeEnum() -> [cs::type("CustomSequence<MyVarSizeEnum>")] Sequence<MyVarSizeEnum>
    sendCustomSequenceOfMyVarSizeEnum(p: [cs::type("CustomSequence<MyVarSizeEnum>")] Sequence<MyVarSizeEnum>)

    returnCustomSequenceOfMyUncheckedEnum() -> [cs::type("CustomSequence<MyUncheckedEnum>")] Sequence<MyUncheckedEnum>
    sendCustomSequenceOfMyUncheckedEnum(p: [cs::type("CustomSequence<MyUncheckedEnum>")] Sequence<MyUncheckedEnum>)

    returnCustomSequenceOfOptionalInt32() -> [cs::type("CustomSequence<int?>")] Sequence<int32?>
    sendCustomSequenceOfOptionalInt32(p: [cs::type("CustomSequence<int?>")] Sequence<int32?>)

    returnCustomSequenceOfOptionalString() -> [cs::type("CustomSequence<string?>")] Sequence<string?>
    sendCustomSequenceOfOptionalString(p: [cs::type("CustomSequence<string?>")] Sequence<string?>)

    returnCustomSequenceOfOptionalMyFixedLengthEnum() -> [cs::type("CustomSequence<MyFixedLengthEnum?>")] Sequence<MyFixedLengthEnum?>
    sendCustomSequenceOfOptionalMyFixedLengthEnum(p: [cs::type("CustomSequence<MyFixedLengthEnum?>")] Sequence<MyFixedLengthEnum?>)

    returnCustomSequenceOfOptionalMyVarSizeEnum() -> [cs::type("CustomSequence<MyVarSizeEnum?>")] Sequence<MyVarSizeEnum?>
    sendCustomSequenceOfOptionalMyVarSizeEnum(p: [cs::type("CustomSequence<MyVarSizeEnum?>")] Sequence<MyVarSizeEnum?>)

    returnCustomSequenceOfOptionalMyUncheckedEnum() -> [cs::type("CustomSequence<MyUncheckedEnum?>")] Sequence<MyUncheckedEnum?>
    sendCustomSequenceOfOptionalMyUncheckedEnum(p: [cs::type("CustomSequence<MyUncheckedEnum?>")] Sequence<MyUncheckedEnum?>)

    returnHashSetOfInt32() -> [cs::type("HashSet<int>")] Sequence<int32>
    sendHashSetOfInt32(p: [cs::type("HashSet<int>")] Sequence<int32>)

    opNumericTypeNestedSequence(p1: Sequence<Sequence<Sequence<uint8>>>) -> Sequence<Sequence<Sequence<uint8>>>
    opStructNestedSequence(p1: Sequence<Sequence<Sequence<MyStruct>>>) -> Sequence<Sequence<Sequence<MyStruct>>>

    opReturnTuple() -> (
        r1: [cs::type("CustomSequence<int>")] Sequence<int32>
        r2: [cs::type("CustomSequence<int>")] Sequence<int32>
    )
}
