// Copyright (c) ZeroC, Inc. All rights reserved.

// Ensure that using the same type names in different modules, doesn't cause any conflicts and generates correct code.
module IceRpc::IntegrationTests::Scope
{
    compact struct S
    {
        v: int32,
    }

    typealias SMap = dictionary<string, S>;
    typealias SSeq = sequence<S>;


    enum E1
    {
        v1,
        v2,
        v3,
    }

    compact struct S1
    {
        s: string,
    }

    // Ensure that struct data members can use a type name as a data member name.
    compact struct S2
    {
        E1: E1,
        S1: S1,
    }

    interface Operations
    {
        opS(p1: S) -> S;
        opSSeq(p1: SSeq) -> SSeq;
        opSMap(p1: SMap) -> SMap;

        // Ensure that a type name can be used as a parameter name
        opE1(E1: E1) -> E1;
        opS1(S1: S1) -> S1;
    }

    typealias OperationsMap = dictionary<string, Operations>;
    typealias OperationsSeq = sequence<Operations>;

    module Inner
    {
        compact struct S
        {
            v: int32,
        }

        module Inner2
        {
            compact struct S
            {
                v: int32,
            }

            typealias SMap = dictionary<string, S>;
            typealias SSeq = sequence<S>;

            interface Operations
            {
                opS(p1: S) -> S;
                opSSeq(p1: SSeq) -> SSeq;
                opSMap(p1: SMap) -> SMap;
            }

            typealias OperationsMap = dictionary<string, Operations>;
            typealias OperationsSeq = sequence<Operations>;
        }

        typealias SMap = dictionary<string, Inner2::S>;
        typealias SSeq = sequence<Inner2::S>;

        interface Operations
        {
            opS(p1: Inner2::S) -> Inner2::S;
            opSSeq(p1: Inner2::SSeq) -> Inner2::SSeq;
            opSMap(p1: Inner2::SMap) -> Inner2::SMap;
        }

        typealias OperationsMap = dictionary<string, Operations>;
        typealias OperationsSeq = sequence<Operations>;
    }
}

module IceRpc::IntegrationTests::Scope::Inner::Test::Inner2
{
    interface Operations
    {
        opS(p1: IceRpc::IntegrationTests::Scope::S) -> IceRpc::IntegrationTests::Scope::S;
        opSSeq(p1: IceRpc::IntegrationTests::Scope::SSeq) -> IceRpc::IntegrationTests::Scope::SSeq;
        opSMap(p1: IceRpc::IntegrationTests::Scope::SMap) -> IceRpc::IntegrationTests::Scope::SMap;
    }
}
