// Copyright (c) ZeroC, Inc.

// These definitions help with the encoding of Slic frames.
module IceRpc::Transports::Slic::Internal

/// The Slic frame types.
[cs::internal]
enum FrameType : uint8 {
    // Initiates the connection establishment.
    Initialize = 1

    /// Acknowledges the receipt of the initialize frame.
    InitializeAck

    /// Indicates the versions supported by the server. The server sends this frame if the version from the initialize
    /// frame is not supported.
    Version

    /// Initiates the closure of the connection.
    Close

    /// Checks the liveliness of the connection.
    Ping

    /// Acknowledges the receipt of a Ping frame.
    Pong

    /// Carries stream data.
    Stream

    /// Carries the last stream data.
    StreamLast

    /// Carries the amount of consumed data.
    StreamConsumed

    /// Indicates that reads are closed and that no more data will be read.
    StreamReadsClosed

    /// Indicates that writes are closed and that no more data will be written.
    StreamWritesClosed
}

/// The keys for supported connection parameters exchanged with the initialize and initialize acknowledgment frames.
[cs::internal]
unchecked enum ParameterKey : varuint62 {
    /// The maximum number of bidirectional streams. The peer shouldn't open more streams than the maximum defined
    /// by this parameter.
    MaxBidirectionalStreams = 0

    /// The maximum number of unidirectional streams. The peer shouldn't open more streams than the maximum defined
    /// by this parameter.
    MaxUnidirectionalStreams = 1

    /// The idle timeout in milliseconds. If the connection is inactive for longer than the idle timeout it will be
    /// closed.
    IdleTimeout = 2

    /// The maximum packet size in bytes.
    PacketMaxSize = 3

    /// The pause writer threshold in bytes. The peer should hold on sending data when this limit is reached and should
    /// only resume sending after receiving the stream consumed frame.
    PauseWriterThreshold = 4
}

typealias ParameterFields = dictionary<ParameterKey, sequence<uint8>>

/// The initialize frame body.
[cs::internal]
[cs::readonly]
compact struct InitializeBody {
    /// The application protocol name.
    applicationProtocolName: string

    /// The parameters.
    parameters: ParameterFields
}

/// The initialize acknowledgment frame body.
[cs::internal]
[cs::readonly]
compact struct InitializeAckBody {
    /// The parameters.
    parameters: ParameterFields
}

/// The body of a version frame. This frame is sent in response to an initialize frame if the version from the
/// initialize frame is not supported by the receiver. Upon receiving the version frame the receiver should send back
/// a new initialize frame with a version matching one of the versions provided by the version frame body.
[cs::internal]
[cs::readonly]
compact struct VersionBody {
    /// The supported versions.
    versions: sequence<varuint62>
}

/// The body of a close frame.
[cs::internal]
[cs::readonly]
compact struct CloseBody {
    /// The application error code indicating the reason of the closure.
    applicationErrorCode: varuint62
}

/// The body of a stream consumed frame.
[cs::internal]
[cs::readonly]
compact struct StreamConsumedBody {
    /// The size of the consumed data.
    size: varuint62
}

/// The body of a stream reads closed frame.
[cs::internal]
[cs::readonly]
compact struct StreamReadsClosedBody {
    /// If not null, the application error code indicates the reason the application is not longer reading data. If
    /// null, it indicates that the application read all the data written on the stream.
    applicationErrorCode: varuint62?
}

/// The body of a stream writes closed frame.
[cs::internal]
[cs::readonly]
compact struct StreamWritesClosedBody {
    /// The application error code indicating the reason why the peer is no longer writting data.
    applicationErrorCode: varuint62
}
