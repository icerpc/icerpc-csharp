name: Build Dist

inputs:
  cargo-build-args:
    description: 'Cargo Build Args'
    required: false
    default: ''
  dotnet-build-args:
    description: '.NET Build Args'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
  - name: ðŸ“¦ NuGet Cache
    uses: actions/cache@v3
    with:
      path: ~/.nuget/packages
      key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
      restore-keys: |
        ${{ runner.os }}-nuget-
  - name: ðŸ“¦ Cargo Cache
    uses: actions/cache@v3
    with:
      path: |
        ~/.cargo/bin/
        ~/.cargo/registry/index/
        ~/.cargo/registry/cache/
        ~/.cargo/git/db/
        tools/slicec-cs/target/
      key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      restore-keys: |
        ${{ runner.os }}-cargo-
  - name: ðŸ”— Setup .NET
    uses: actions/setup-dotnet@v3
    with:
      dotnet-version: "7.0.x"
  - name: Install libmsquic
    run: |
      wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
      sudo dpkg -i packages-microsoft-prod.deb
      rm packages-microsoft-prod.deb
      sudo apt update
      sudo apt install libmsquic
    shell: bash
  - name: ðŸ”— Start SSH Agent
    uses: webfactory/ssh-agent@v0.5.4
    with:
      ssh-private-key: ${{ env.SLICEC_DEPLOY_KEY }}
  - name: ðŸ”¨ Build Slice Compiler
    uses: actions-rs/cargo@v1
    with:
      command: build
      args: --manifest-path tools/slicec-cs/Cargo.toml ${{ inputs.cargo-build-args }}
  - name: ðŸ”¨ Build IceRPC Slice Tools
    working-directory: tools/IceRpc.Slice.Tools
    run: dotnet build ${{ inputs.dotnet-build-args }}
    shell: bash
  - name: ðŸ”¨ Build IceRPC
    run:  dotnet build ${{ inputs.dotnet-build-args }}
    shell: bash
