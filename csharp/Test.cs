// Copyright (c) ZeroC, Inc. All rights reserved.

// Ice version 4.0.0-alpha.0
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//

#nullable enable
#pragma warning disable SA1300 // Element must begin with upper case letter
#pragma warning disable SA1306 // Field names must begin with lower case letter
#pragma warning disable SA1309 // Field names must not begin with underscore
#pragma warning disable SA1312 // Variable names must begin with lower case letter
#pragma warning disable SA1313 // Parameter names must begin with lower case letter
#pragma warning disable CA1033 // Interface methods should be callable by child types
#pragma warning disable CA1707 // Remove the underscores from member name
#pragma warning disable CA1711 // Identifiers should not have incorrect suffix

#pragma warning disable 1591
namespace IceRpc.Test.NamespaceMD
{
    /// <summary>Proxy interface used to call remote Ice objects that implement Slice interface Initial.
    /// <seealso cref="IInitial"/>.</summary>
    [IceRpc.TypeId("::IceRpc::Test::NamespaceMD::Initial")]
    public partial interface IInitialPrx : IceRpc.IServicePrx
    {
        /// <summary>Provides a <see cref="IceRpc.OutgoingRequestFrame"/> factory method for each remote operation defined in <see cref="IInitialPrx"/>.</summary>
        public static new class Request
        {
            /// <summary>Creates an <see cref="IceRpc.OutgoingRequestFrame"/> for GetNoNamespaceC2AsC1 operation.</summary>
            /// <param name="proxy">Proxy to the target service.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static IceRpc.OutgoingRequestFrame GetNoNamespaceC2AsC1(IceRpc.IServicePrx proxy, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                IceRpc.OutgoingRequestFrame.WithEmptyArgs(proxy, "getNoNamespaceC2AsC1", idempotent: false, context, cancel);

            /// <summary>Creates an <see cref="IceRpc.OutgoingRequestFrame"/> for GetNoNamespaceC2AsC2 operation.</summary>
            /// <param name="proxy">Proxy to the target service.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static IceRpc.OutgoingRequestFrame GetNoNamespaceC2AsC2(IceRpc.IServicePrx proxy, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                IceRpc.OutgoingRequestFrame.WithEmptyArgs(proxy, "getNoNamespaceC2AsC2", idempotent: false, context, cancel);

            /// <summary>Creates an <see cref="IceRpc.OutgoingRequestFrame"/> for GetNoNamespaceN1N2S1 operation.</summary>
            /// <param name="proxy">Proxy to the target service.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static IceRpc.OutgoingRequestFrame GetNoNamespaceN1N2S1(IceRpc.IServicePrx proxy, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                IceRpc.OutgoingRequestFrame.WithEmptyArgs(proxy, "getNoNamespaceN1N2S1", idempotent: false, context, cancel);

            /// <summary>Creates an <see cref="IceRpc.OutgoingRequestFrame"/> for ThrowNoNamespaceE2AsE1 operation.</summary>
            /// <param name="proxy">Proxy to the target service.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static IceRpc.OutgoingRequestFrame ThrowNoNamespaceE2AsE1(IceRpc.IServicePrx proxy, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                IceRpc.OutgoingRequestFrame.WithEmptyArgs(proxy, "throwNoNamespaceE2AsE1", idempotent: false, context, cancel);

            /// <summary>Creates an <see cref="IceRpc.OutgoingRequestFrame"/> for ThrowNoNamespaceE2AsE2 operation.</summary>
            /// <param name="proxy">Proxy to the target service.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static IceRpc.OutgoingRequestFrame ThrowNoNamespaceE2AsE2(IceRpc.IServicePrx proxy, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                IceRpc.OutgoingRequestFrame.WithEmptyArgs(proxy, "throwNoNamespaceE2AsE2", idempotent: false, context, cancel);

            /// <summary>Creates an <see cref="IceRpc.OutgoingRequestFrame"/> for ThrowNoNamespaceNotify operation.</summary>
            /// <param name="proxy">Proxy to the target service.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static IceRpc.OutgoingRequestFrame ThrowNoNamespaceNotify(IceRpc.IServicePrx proxy, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                IceRpc.OutgoingRequestFrame.WithEmptyArgs(proxy, "throwNoNamespaceNotify", idempotent: false, context, cancel);

            /// <summary>Creates an <see cref="IceRpc.OutgoingRequestFrame"/> for GetWithNamespaceC2AsC1 operation.</summary>
            /// <param name="proxy">Proxy to the target service.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static IceRpc.OutgoingRequestFrame GetWithNamespaceC2AsC1(IceRpc.IServicePrx proxy, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                IceRpc.OutgoingRequestFrame.WithEmptyArgs(proxy, "getWithNamespaceC2AsC1", idempotent: false, context, cancel);

            /// <summary>Creates an <see cref="IceRpc.OutgoingRequestFrame"/> for GetWithNamespaceC2AsC2 operation.</summary>
            /// <param name="proxy">Proxy to the target service.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static IceRpc.OutgoingRequestFrame GetWithNamespaceC2AsC2(IceRpc.IServicePrx proxy, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                IceRpc.OutgoingRequestFrame.WithEmptyArgs(proxy, "getWithNamespaceC2AsC2", idempotent: false, context, cancel);

            /// <summary>Creates an <see cref="IceRpc.OutgoingRequestFrame"/> for GetWithNamespaceN1N2S1 operation.</summary>
            /// <param name="proxy">Proxy to the target service.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static IceRpc.OutgoingRequestFrame GetWithNamespaceN1N2S1(IceRpc.IServicePrx proxy, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                IceRpc.OutgoingRequestFrame.WithEmptyArgs(proxy, "getWithNamespaceN1N2S1", idempotent: false, context, cancel);

            /// <summary>Creates an <see cref="IceRpc.OutgoingRequestFrame"/> for ThrowWithNamespaceE2AsE1 operation.</summary>
            /// <param name="proxy">Proxy to the target service.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static IceRpc.OutgoingRequestFrame ThrowWithNamespaceE2AsE1(IceRpc.IServicePrx proxy, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                IceRpc.OutgoingRequestFrame.WithEmptyArgs(proxy, "throwWithNamespaceE2AsE1", idempotent: false, context, cancel);

            /// <summary>Creates an <see cref="IceRpc.OutgoingRequestFrame"/> for ThrowWithNamespaceE2AsE2 operation.</summary>
            /// <param name="proxy">Proxy to the target service.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static IceRpc.OutgoingRequestFrame ThrowWithNamespaceE2AsE2(IceRpc.IServicePrx proxy, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                IceRpc.OutgoingRequestFrame.WithEmptyArgs(proxy, "throwWithNamespaceE2AsE2", idempotent: false, context, cancel);

            /// <summary>Creates an <see cref="IceRpc.OutgoingRequestFrame"/> for Shutdown operation.</summary>
            /// <param name="proxy">Proxy to the target service.</param>
            /// <param name="context">The context to write into the request.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            public static IceRpc.OutgoingRequestFrame Shutdown(IceRpc.IServicePrx proxy, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context, global::System.Threading.CancellationToken cancel) =>
                IceRpc.OutgoingRequestFrame.WithEmptyArgs(proxy, "shutdown", idempotent: false, context, cancel);
        }

        /// <summary>Holds a <see cref="IceRpc.InputStreamReader{T}"/> for each non-void remote operation defined in <see cref="IInitialPrx"/>.</summary>
        public static new class Response
        {
            /// <summary>The <see cref="IceRpc.ResponseReader{T}"/> for the return type of operation GetNoNamespaceC2AsC1.</summary>
            public static IceRpc.Test.NamespaceMD.NoNamespace.C1? GetNoNamespaceC2AsC1(IceRpc.IServicePrx proxy, IceRpc.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, IceRpc.Test.NamespaceMD.NoNamespace.C1.IceReaderIntoNullable);

            /// <summary>The <see cref="IceRpc.ResponseReader{T}"/> for the return type of operation GetNoNamespaceC2AsC2.</summary>
            public static IceRpc.Test.NamespaceMD.NoNamespace.C2? GetNoNamespaceC2AsC2(IceRpc.IServicePrx proxy, IceRpc.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, IceRpc.Test.NamespaceMD.NoNamespace.C2.IceReaderIntoNullable);

            /// <summary>The <see cref="IceRpc.ResponseReader{T}"/> for the return type of operation GetNoNamespaceN1N2S1.</summary>
            public static IceRpc.Test.NamespaceMD.NoNamespace.N1.N2.S1 GetNoNamespaceN1N2S1(IceRpc.IServicePrx proxy, IceRpc.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, IceRpc.Test.NamespaceMD.NoNamespace.N1.N2.S1.IceReader);

            /// <summary>The <see cref="IceRpc.ResponseReader{T}"/> for the return type of operation GetWithNamespaceC2AsC1.</summary>
            public static IceRpc.Test.NamespaceMD.WithNamespace.C1? GetWithNamespaceC2AsC1(IceRpc.IServicePrx proxy, IceRpc.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, IceRpc.Test.NamespaceMD.WithNamespace.C1.IceReaderIntoNullable);

            /// <summary>The <see cref="IceRpc.ResponseReader{T}"/> for the return type of operation GetWithNamespaceC2AsC2.</summary>
            public static IceRpc.Test.NamespaceMD.WithNamespace.C2? GetWithNamespaceC2AsC2(IceRpc.IServicePrx proxy, IceRpc.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, IceRpc.Test.NamespaceMD.WithNamespace.C2.IceReaderIntoNullable);

            /// <summary>The <see cref="IceRpc.ResponseReader{T}"/> for the return type of operation GetWithNamespaceN1N2S1.</summary>
            public static IceRpc.Test.NamespaceMD.WithNamespace.N1.N2.S1 GetWithNamespaceN1N2S1(IceRpc.IServicePrx proxy, IceRpc.IncomingResponseFrame response) =>
                response.ReadReturnValue(proxy, IceRpc.Test.NamespaceMD.WithNamespace.N1.N2.S1.IceReader);
        }

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        IceRpc.Test.NamespaceMD.NoNamespace.C1? GetNoNamespaceC2AsC1(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.GetNoNamespaceC2AsC1(this, context, cancel), Response.GetNoNamespaceC2AsC1);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<IceRpc.Test.NamespaceMD.NoNamespace.C1?> GetNoNamespaceC2AsC1Async(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.GetNoNamespaceC2AsC1(this, context, cancel), Response.GetNoNamespaceC2AsC1, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        IceRpc.Test.NamespaceMD.NoNamespace.C2? GetNoNamespaceC2AsC2(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.GetNoNamespaceC2AsC2(this, context, cancel), Response.GetNoNamespaceC2AsC2);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<IceRpc.Test.NamespaceMD.NoNamespace.C2?> GetNoNamespaceC2AsC2Async(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.GetNoNamespaceC2AsC2(this, context, cancel), Response.GetNoNamespaceC2AsC2, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        IceRpc.Test.NamespaceMD.NoNamespace.N1.N2.S1 GetNoNamespaceN1N2S1(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.GetNoNamespaceN1N2S1(this, context, cancel), Response.GetNoNamespaceN1N2S1);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<IceRpc.Test.NamespaceMD.NoNamespace.N1.N2.S1> GetNoNamespaceN1N2S1Async(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.GetNoNamespaceN1N2S1(this, context, cancel), Response.GetNoNamespaceN1N2S1, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        void ThrowNoNamespaceE2AsE1(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.ThrowNoNamespaceE2AsE1(this, context, cancel), IsOneway);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task ThrowNoNamespaceE2AsE1Async(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.ThrowNoNamespaceE2AsE1(this, context, cancel), IsOneway, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        void ThrowNoNamespaceE2AsE2(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.ThrowNoNamespaceE2AsE2(this, context, cancel), IsOneway);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task ThrowNoNamespaceE2AsE2Async(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.ThrowNoNamespaceE2AsE2(this, context, cancel), IsOneway, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        void ThrowNoNamespaceNotify(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.ThrowNoNamespaceNotify(this, context, cancel), IsOneway);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task ThrowNoNamespaceNotifyAsync(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.ThrowNoNamespaceNotify(this, context, cancel), IsOneway, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        IceRpc.Test.NamespaceMD.WithNamespace.C1? GetWithNamespaceC2AsC1(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.GetWithNamespaceC2AsC1(this, context, cancel), Response.GetWithNamespaceC2AsC1);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<IceRpc.Test.NamespaceMD.WithNamespace.C1?> GetWithNamespaceC2AsC1Async(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.GetWithNamespaceC2AsC1(this, context, cancel), Response.GetWithNamespaceC2AsC1, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        IceRpc.Test.NamespaceMD.WithNamespace.C2? GetWithNamespaceC2AsC2(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.GetWithNamespaceC2AsC2(this, context, cancel), Response.GetWithNamespaceC2AsC2);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<IceRpc.Test.NamespaceMD.WithNamespace.C2?> GetWithNamespaceC2AsC2Async(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.GetWithNamespaceC2AsC2(this, context, cancel), Response.GetWithNamespaceC2AsC2, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        IceRpc.Test.NamespaceMD.WithNamespace.N1.N2.S1 GetWithNamespaceN1N2S1(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.GetWithNamespaceN1N2S1(this, context, cancel), Response.GetWithNamespaceN1N2S1);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<IceRpc.Test.NamespaceMD.WithNamespace.N1.N2.S1> GetWithNamespaceN1N2S1Async(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.GetWithNamespaceN1N2S1(this, context, cancel), Response.GetWithNamespaceN1N2S1, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        void ThrowWithNamespaceE2AsE1(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.ThrowWithNamespaceE2AsE1(this, context, cancel), IsOneway);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task ThrowWithNamespaceE2AsE1Async(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.ThrowWithNamespaceE2AsE1(this, context, cancel), IsOneway, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        void ThrowWithNamespaceE2AsE2(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.ThrowWithNamespaceE2AsE2(this, context, cancel), IsOneway);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task ThrowWithNamespaceE2AsE2Async(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.ThrowWithNamespaceE2AsE2(this, context, cancel), IsOneway, progress);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        void Shutdown(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvoke(Request.Shutdown(this, context, cancel), IsOneway);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task ShutdownAsync(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceInvokeAsync(Request.Shutdown(this, context, cancel), IsOneway, progress);

        /// <summary>Factory for <see cref="IInitialPrx"/> proxies.</summary>
        public static readonly new IceRpc.IProxyFactory<IInitialPrx> Factory = new IceProxyFactory();

        /// <summary>An <see cref="IceRpc.InputStreamReader{T}"/> used to read <see cref="IInitialPrx"/> proxies.</summary>
        public static readonly new IceRpc.InputStreamReader<IInitialPrx> IceReader =
            istr => IceRpc.ProxyFactory.Read(Factory, istr);

        // <summary>An <see cref="InputStreamReader{T}"/> used to read <see cref="IInitialPrx"/> nullable proxies.</summary>
        public static readonly new IceRpc.InputStreamReader<IInitialPrx?> IceReaderIntoNullable =
            istr => IceRpc.ProxyFactory.ReadNullable(Factory, istr);

        /// <summary>Converts the string representation of a proxy to its <see cref="IInitialPrx"/> equivalent.</summary>
        /// <param name="s">The proxy string representation.</param>
        /// <param name="communicator">The communicator for the new proxy</param>
        /// <returns>The new proxy</returns>
        /// <exception cref="global::System.FormatException"><c>s</c> does not contain a valid string representation of a proxy.</exception>
        public static new IInitialPrx Parse(string s, IceRpc.Communicator communicator) => IceRpc.ProxyFactory.Parse(Factory, s, communicator);

        /// <summary>Converts the string representation of a proxy to its <see cref="IInitialPrx"/> equivalent.</summary>
        /// <param name="s">The proxy string representation.</param>
        /// <param name="communicator">The communicator for the new proxy</param>
        /// <param name="proxy">When this method returns it contains the new proxy, if the conversion succeeded or null if the conversion failed.</param>
        /// <returns><c>true</c> if the s parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(string s, IceRpc.Communicator communicator, out IInitialPrx? proxy)
        {
            try
            {
                proxy = IceRpc.ProxyFactory.Parse(Factory, s, communicator);
            }
            catch
            {
                proxy = null;
                return false;
            }
            return true;
        }

        private class IceProxyFactory : IceRpc.IProxyFactory<IInitialPrx>
        {
            public IInitialPrx Create(IceRpc.ServicePrxOptions options) => new InitialPrx(options);

            private class InitialPrx : IceRpc.ServicePrx, IInitialPrx
            {
                protected override IceRpc.ServicePrx IceClone(IceRpc.ServicePrxOptions options) =>
                    new InitialPrx(options);

                internal InitialPrx(IceRpc.ServicePrxOptions options)
                    : base(options)
                {
                }
            }
        }
    }
}
namespace IceRpc.Test.NamespaceMD
{
    /// <summary>Interface used to implement servants for Slice interface Initial.
    /// <seealso cref="IInitialPrx"/>.</summary>
    [IceRpc.TypeId("::IceRpc::Test::NamespaceMD::Initial")]
    public partial interface IInitial : IceRpc.IService
    {
        /// <summary>Provides a <see cref="IceRpc.OutgoingResponseFrame"/> factory method for each non-void remote operation
        /// defined in the <see cref="IInitial"/>.</summary>
        public static new class Response
        {
            /// <summary>Creates an <see cref="IceRpc.OutgoingResponseFrame"/> for operation GetNoNamespaceC2AsC1.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="IceRpc.OutgoingResponseFrame"/>.</returns>
            public static IceRpc.OutgoingResponseFrame GetNoNamespaceC2AsC1(IceRpc.Current current, IceRpc.Test.NamespaceMD.NoNamespace.C1? returnValue) =>
                IceRpc.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    IceRpc.Test.NamespaceMD.NoNamespace.C1.IceWriterFromNullable);

            /// <summary>Creates an <see cref="IceRpc.OutgoingResponseFrame"/> for operation GetNoNamespaceC2AsC2.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="IceRpc.OutgoingResponseFrame"/>.</returns>
            public static IceRpc.OutgoingResponseFrame GetNoNamespaceC2AsC2(IceRpc.Current current, IceRpc.Test.NamespaceMD.NoNamespace.C2? returnValue) =>
                IceRpc.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    IceRpc.Test.NamespaceMD.NoNamespace.C2.IceWriterFromNullable);

            /// <summary>Creates an <see cref="IceRpc.OutgoingResponseFrame"/> for operation GetNoNamespaceN1N2S1.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="IceRpc.OutgoingResponseFrame"/>.</returns>
            public static IceRpc.OutgoingResponseFrame GetNoNamespaceN1N2S1(IceRpc.Current current, IceRpc.Test.NamespaceMD.NoNamespace.N1.N2.S1 returnValue) =>
                IceRpc.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    IceRpc.Test.NamespaceMD.NoNamespace.N1.N2.S1.IceWriter);

            /// <summary>Creates an <see cref="IceRpc.OutgoingResponseFrame"/> for operation GetWithNamespaceC2AsC1.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="IceRpc.OutgoingResponseFrame"/>.</returns>
            public static IceRpc.OutgoingResponseFrame GetWithNamespaceC2AsC1(IceRpc.Current current, IceRpc.Test.NamespaceMD.WithNamespace.C1? returnValue) =>
                IceRpc.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    IceRpc.Test.NamespaceMD.WithNamespace.C1.IceWriterFromNullable);

            /// <summary>Creates an <see cref="IceRpc.OutgoingResponseFrame"/> for operation GetWithNamespaceC2AsC2.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="IceRpc.OutgoingResponseFrame"/>.</returns>
            public static IceRpc.OutgoingResponseFrame GetWithNamespaceC2AsC2(IceRpc.Current current, IceRpc.Test.NamespaceMD.WithNamespace.C2? returnValue) =>
                IceRpc.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    IceRpc.Test.NamespaceMD.WithNamespace.C2.IceWriterFromNullable);

            /// <summary>Creates an <see cref="IceRpc.OutgoingResponseFrame"/> for operation GetWithNamespaceN1N2S1.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="IceRpc.OutgoingResponseFrame"/>.</returns>
            public static IceRpc.OutgoingResponseFrame GetWithNamespaceN1N2S1(IceRpc.Current current, IceRpc.Test.NamespaceMD.WithNamespace.N1.N2.S1 returnValue) =>
                IceRpc.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    IceRpc.Test.NamespaceMD.WithNamespace.N1.N2.S1.IceWriter);
        }

        private static readonly string _iceTypeId = IceRpc.TypeExtensions.GetIceTypeId(typeof(IInitial))!;
        private static readonly string[] _iceAllTypeIds = IceRpc.TypeExtensions.GetAllIceTypeIds(typeof(IInitial));

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public IceRpc.Test.NamespaceMD.NoNamespace.C1? GetNoNamespaceC2AsC1(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public IceRpc.Test.NamespaceMD.NoNamespace.C2? GetNoNamespaceC2AsC2(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public IceRpc.Test.NamespaceMD.NoNamespace.N1.N2.S1 GetNoNamespaceN1N2S1(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public void ThrowNoNamespaceE2AsE1(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public void ThrowNoNamespaceE2AsE2(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public void ThrowNoNamespaceNotify(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public IceRpc.Test.NamespaceMD.WithNamespace.C1? GetWithNamespaceC2AsC1(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public IceRpc.Test.NamespaceMD.WithNamespace.C2? GetWithNamespaceC2AsC2(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public IceRpc.Test.NamespaceMD.WithNamespace.N1.N2.S1 GetWithNamespaceN1N2S1(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public void ThrowWithNamespaceE2AsE1(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public void ThrowWithNamespaceE2AsE2(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        public void Shutdown(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        global::System.Threading.Tasks.ValueTask<string> IceRpc.IService.IceIdAsync(IceRpc.Current current, global::System.Threading.CancellationToken cancel) => new(_iceTypeId);

        global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.IEnumerable<string>> IceRpc.IService.IceIdsAsync(IceRpc.Current current, global::System.Threading.CancellationToken cancel) => new(_iceAllTypeIds);

        global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceRpc.IService.DispatchAsync(IceRpc.Current current, global::System.Threading.CancellationToken cancel) =>
            DispatchAsync(this, current, cancel);

        // This protected static DispatchAsync allows a derived class to override the instance DispatchAsync
        // and reuse the generated implementation.
        protected static global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> DispatchAsync(IInitial servant, IceRpc.Current current, global::System.Threading.CancellationToken cancel) =>
            current.Operation switch
            {
                "getNoNamespaceC2AsC1" => servant.IceDGetNoNamespaceC2AsC1Async(current, cancel),
                "getNoNamespaceC2AsC2" => servant.IceDGetNoNamespaceC2AsC2Async(current, cancel),
                "getNoNamespaceN1N2S1" => servant.IceDGetNoNamespaceN1N2S1Async(current, cancel),
                "throwNoNamespaceE2AsE1" => servant.IceDThrowNoNamespaceE2AsE1Async(current, cancel),
                "throwNoNamespaceE2AsE2" => servant.IceDThrowNoNamespaceE2AsE2Async(current, cancel),
                "throwNoNamespaceNotify" => servant.IceDThrowNoNamespaceNotifyAsync(current, cancel),
                "getWithNamespaceC2AsC1" => servant.IceDGetWithNamespaceC2AsC1Async(current, cancel),
                "getWithNamespaceC2AsC2" => servant.IceDGetWithNamespaceC2AsC2Async(current, cancel),
                "getWithNamespaceN1N2S1" => servant.IceDGetWithNamespaceN1N2S1Async(current, cancel),
                "throwWithNamespaceE2AsE1" => servant.IceDThrowWithNamespaceE2AsE1Async(current, cancel),
                "throwWithNamespaceE2AsE2" => servant.IceDThrowWithNamespaceE2AsE2Async(current, cancel),
                "shutdown" => servant.IceDShutdownAsync(current, cancel),
                "ice_id" => servant.IceDIceIdAsync(current, cancel),
                "ice_ids" => servant.IceDIceIdsAsync(current, cancel),
                "ice_isA" => servant.IceDIceIsAAsync(current, cancel),
                "ice_ping" => servant.IceDIcePingAsync(current, cancel),
                _ => throw new IceRpc.OperationNotFoundException()
            };

        protected global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDGetNoNamespaceC2AsC1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            var returnValue = this.GetNoNamespaceC2AsC1(current, cancel);
            return new global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame>(
                Response.GetNoNamespaceC2AsC1(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDGetNoNamespaceC2AsC2Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            var returnValue = this.GetNoNamespaceC2AsC2(current, cancel);
            return new global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame>(
                Response.GetNoNamespaceC2AsC2(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDGetNoNamespaceN1N2S1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            var returnValue = this.GetNoNamespaceN1N2S1(current, cancel);
            return new global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame>(
                Response.GetNoNamespaceN1N2S1(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDThrowNoNamespaceE2AsE1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            this.ThrowNoNamespaceE2AsE1(current, cancel);
            return new global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame>(
                IceRpc.OutgoingResponseFrame.WithVoidReturnValue(current));
        }

        protected global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDThrowNoNamespaceE2AsE2Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            this.ThrowNoNamespaceE2AsE2(current, cancel);
            return new global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame>(
                IceRpc.OutgoingResponseFrame.WithVoidReturnValue(current));
        }

        protected global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDThrowNoNamespaceNotifyAsync(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            this.ThrowNoNamespaceNotify(current, cancel);
            return new global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame>(
                IceRpc.OutgoingResponseFrame.WithVoidReturnValue(current));
        }

        protected global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDGetWithNamespaceC2AsC1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            var returnValue = this.GetWithNamespaceC2AsC1(current, cancel);
            return new global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame>(
                Response.GetWithNamespaceC2AsC1(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDGetWithNamespaceC2AsC2Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            var returnValue = this.GetWithNamespaceC2AsC2(current, cancel);
            return new global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame>(
                Response.GetWithNamespaceC2AsC2(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDGetWithNamespaceN1N2S1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            var returnValue = this.GetWithNamespaceN1N2S1(current, cancel);
            return new global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame>(
                Response.GetWithNamespaceN1N2S1(current, returnValue));
        }

        protected global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDThrowWithNamespaceE2AsE1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            this.ThrowWithNamespaceE2AsE1(current, cancel);
            return new global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame>(
                IceRpc.OutgoingResponseFrame.WithVoidReturnValue(current));
        }

        protected global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDThrowWithNamespaceE2AsE2Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            this.ThrowWithNamespaceE2AsE2(current, cancel);
            return new global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame>(
                IceRpc.OutgoingResponseFrame.WithVoidReturnValue(current));
        }

        protected global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDShutdownAsync(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            this.Shutdown(current, cancel);
            return new global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame>(
                IceRpc.OutgoingResponseFrame.WithVoidReturnValue(current));
        }
    }
}
namespace IceRpc.Test.NamespaceMD
{
    /// <summary>Interface used to implement servants for Slice interface Initial.
    /// <seealso cref="IInitialPrx"/>.</summary>
    [IceRpc.TypeId("::IceRpc::Test::NamespaceMD::Initial")]
    public partial interface IAsyncInitial : IceRpc.IService
    {
        /// <summary>Provides a <see cref="IceRpc.OutgoingResponseFrame"/> factory method for each non-void remote operation
        /// defined in the <see cref="IAsyncInitial"/>.</summary>
        public static new class Response
        {
            /// <summary>Creates an <see cref="IceRpc.OutgoingResponseFrame"/> for operation GetNoNamespaceC2AsC1.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="IceRpc.OutgoingResponseFrame"/>.</returns>
            public static IceRpc.OutgoingResponseFrame GetNoNamespaceC2AsC1(IceRpc.Current current, IceRpc.Test.NamespaceMD.NoNamespace.C1? returnValue) =>
                IceRpc.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    IceRpc.Test.NamespaceMD.NoNamespace.C1.IceWriterFromNullable);

            /// <summary>Creates an <see cref="IceRpc.OutgoingResponseFrame"/> for operation GetNoNamespaceC2AsC2.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="IceRpc.OutgoingResponseFrame"/>.</returns>
            public static IceRpc.OutgoingResponseFrame GetNoNamespaceC2AsC2(IceRpc.Current current, IceRpc.Test.NamespaceMD.NoNamespace.C2? returnValue) =>
                IceRpc.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    IceRpc.Test.NamespaceMD.NoNamespace.C2.IceWriterFromNullable);

            /// <summary>Creates an <see cref="IceRpc.OutgoingResponseFrame"/> for operation GetNoNamespaceN1N2S1.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="IceRpc.OutgoingResponseFrame"/>.</returns>
            public static IceRpc.OutgoingResponseFrame GetNoNamespaceN1N2S1(IceRpc.Current current, IceRpc.Test.NamespaceMD.NoNamespace.N1.N2.S1 returnValue) =>
                IceRpc.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    IceRpc.Test.NamespaceMD.NoNamespace.N1.N2.S1.IceWriter);

            /// <summary>Creates an <see cref="IceRpc.OutgoingResponseFrame"/> for operation GetWithNamespaceC2AsC1.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="IceRpc.OutgoingResponseFrame"/>.</returns>
            public static IceRpc.OutgoingResponseFrame GetWithNamespaceC2AsC1(IceRpc.Current current, IceRpc.Test.NamespaceMD.WithNamespace.C1? returnValue) =>
                IceRpc.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    IceRpc.Test.NamespaceMD.WithNamespace.C1.IceWriterFromNullable);

            /// <summary>Creates an <see cref="IceRpc.OutgoingResponseFrame"/> for operation GetWithNamespaceC2AsC2.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="IceRpc.OutgoingResponseFrame"/>.</returns>
            public static IceRpc.OutgoingResponseFrame GetWithNamespaceC2AsC2(IceRpc.Current current, IceRpc.Test.NamespaceMD.WithNamespace.C2? returnValue) =>
                IceRpc.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    IceRpc.Test.NamespaceMD.WithNamespace.C2.IceWriterFromNullable);

            /// <summary>Creates an <see cref="IceRpc.OutgoingResponseFrame"/> for operation GetWithNamespaceN1N2S1.</summary>
            /// <param name="current">Holds decoded header data and other information about the current request.</param>
            /// <param name="returnValue">The return value to write into the new frame.</param>
            /// <returns>A new <see cref="IceRpc.OutgoingResponseFrame"/>.</returns>
            public static IceRpc.OutgoingResponseFrame GetWithNamespaceN1N2S1(IceRpc.Current current, IceRpc.Test.NamespaceMD.WithNamespace.N1.N2.S1 returnValue) =>
                IceRpc.OutgoingResponseFrame.WithReturnValue(
                    current,
                    compress: false,
                    format: default,
                    returnValue,
                    IceRpc.Test.NamespaceMD.WithNamespace.N1.N2.S1.IceWriter);
        }

        private static readonly string _iceTypeId = IceRpc.TypeExtensions.GetIceTypeId(typeof(IAsyncInitial))!;
        private static readonly string[] _iceAllTypeIds = IceRpc.TypeExtensions.GetAllIceTypeIds(typeof(IAsyncInitial));

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<IceRpc.Test.NamespaceMD.NoNamespace.C1?> GetNoNamespaceC2AsC1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<IceRpc.Test.NamespaceMD.NoNamespace.C2?> GetNoNamespaceC2AsC2Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<IceRpc.Test.NamespaceMD.NoNamespace.N1.N2.S1> GetNoNamespaceN1N2S1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask ThrowNoNamespaceE2AsE1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask ThrowNoNamespaceE2AsE2Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask ThrowNoNamespaceNotifyAsync(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<IceRpc.Test.NamespaceMD.WithNamespace.C1?> GetWithNamespaceC2AsC1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<IceRpc.Test.NamespaceMD.WithNamespace.C2?> GetWithNamespaceC2AsC2Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<IceRpc.Test.NamespaceMD.WithNamespace.N1.N2.S1> GetWithNamespaceN1N2S1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask ThrowWithNamespaceE2AsE1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask ThrowWithNamespaceE2AsE2Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask ShutdownAsync(IceRpc.Current current, global::System.Threading.CancellationToken cancel);

        global::System.Threading.Tasks.ValueTask<string> IceRpc.IService.IceIdAsync(IceRpc.Current current, global::System.Threading.CancellationToken cancel) => new(_iceTypeId);

        global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.IEnumerable<string>> IceRpc.IService.IceIdsAsync(IceRpc.Current current, global::System.Threading.CancellationToken cancel) => new(_iceAllTypeIds);

        global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceRpc.IService.DispatchAsync(IceRpc.Current current, global::System.Threading.CancellationToken cancel) =>
            DispatchAsync(this, current, cancel);

        // This protected static DispatchAsync allows a derived class to override the instance DispatchAsync
        // and reuse the generated implementation.
        protected static global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> DispatchAsync(IAsyncInitial servant, IceRpc.Current current, global::System.Threading.CancellationToken cancel) =>
            current.Operation switch
            {
                "getNoNamespaceC2AsC1" => servant.IceDGetNoNamespaceC2AsC1Async(current, cancel),
                "getNoNamespaceC2AsC2" => servant.IceDGetNoNamespaceC2AsC2Async(current, cancel),
                "getNoNamespaceN1N2S1" => servant.IceDGetNoNamespaceN1N2S1Async(current, cancel),
                "throwNoNamespaceE2AsE1" => servant.IceDThrowNoNamespaceE2AsE1Async(current, cancel),
                "throwNoNamespaceE2AsE2" => servant.IceDThrowNoNamespaceE2AsE2Async(current, cancel),
                "throwNoNamespaceNotify" => servant.IceDThrowNoNamespaceNotifyAsync(current, cancel),
                "getWithNamespaceC2AsC1" => servant.IceDGetWithNamespaceC2AsC1Async(current, cancel),
                "getWithNamespaceC2AsC2" => servant.IceDGetWithNamespaceC2AsC2Async(current, cancel),
                "getWithNamespaceN1N2S1" => servant.IceDGetWithNamespaceN1N2S1Async(current, cancel),
                "throwWithNamespaceE2AsE1" => servant.IceDThrowWithNamespaceE2AsE1Async(current, cancel),
                "throwWithNamespaceE2AsE2" => servant.IceDThrowWithNamespaceE2AsE2Async(current, cancel),
                "shutdown" => servant.IceDShutdownAsync(current, cancel),
                "ice_id" => servant.IceDIceIdAsync(current, cancel),
                "ice_ids" => servant.IceDIceIdsAsync(current, cancel),
                "ice_isA" => servant.IceDIceIsAAsync(current, cancel),
                "ice_ping" => servant.IceDIcePingAsync(current, cancel),
                _ => throw new IceRpc.OperationNotFoundException()
            };

        protected async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDGetNoNamespaceC2AsC1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            var returnValue = await this.GetNoNamespaceC2AsC1Async(current, cancel).ConfigureAwait(false);
            return Response.GetNoNamespaceC2AsC1(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDGetNoNamespaceC2AsC2Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            var returnValue = await this.GetNoNamespaceC2AsC2Async(current, cancel).ConfigureAwait(false);
            return Response.GetNoNamespaceC2AsC2(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDGetNoNamespaceN1N2S1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            var returnValue = await this.GetNoNamespaceN1N2S1Async(current, cancel).ConfigureAwait(false);
            return Response.GetNoNamespaceN1N2S1(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDThrowNoNamespaceE2AsE1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            await this.ThrowNoNamespaceE2AsE1Async(current, cancel).ConfigureAwait(false);
            return IceRpc.OutgoingResponseFrame.WithVoidReturnValue(current);
        }

        protected async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDThrowNoNamespaceE2AsE2Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            await this.ThrowNoNamespaceE2AsE2Async(current, cancel).ConfigureAwait(false);
            return IceRpc.OutgoingResponseFrame.WithVoidReturnValue(current);
        }

        protected async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDThrowNoNamespaceNotifyAsync(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            await this.ThrowNoNamespaceNotifyAsync(current, cancel).ConfigureAwait(false);
            return IceRpc.OutgoingResponseFrame.WithVoidReturnValue(current);
        }

        protected async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDGetWithNamespaceC2AsC1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            var returnValue = await this.GetWithNamespaceC2AsC1Async(current, cancel).ConfigureAwait(false);
            return Response.GetWithNamespaceC2AsC1(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDGetWithNamespaceC2AsC2Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            var returnValue = await this.GetWithNamespaceC2AsC2Async(current, cancel).ConfigureAwait(false);
            return Response.GetWithNamespaceC2AsC2(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDGetWithNamespaceN1N2S1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            var returnValue = await this.GetWithNamespaceN1N2S1Async(current, cancel).ConfigureAwait(false);
            return Response.GetWithNamespaceN1N2S1(current, returnValue);
        }

        protected async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDThrowWithNamespaceE2AsE1Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            await this.ThrowWithNamespaceE2AsE1Async(current, cancel).ConfigureAwait(false);
            return IceRpc.OutgoingResponseFrame.WithVoidReturnValue(current);
        }

        protected async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDThrowWithNamespaceE2AsE2Async(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            await this.ThrowWithNamespaceE2AsE2Async(current, cancel).ConfigureAwait(false);
            return IceRpc.OutgoingResponseFrame.WithVoidReturnValue(current);
        }

        protected async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponseFrame> IceDShutdownAsync(IceRpc.Current current, global::System.Threading.CancellationToken cancel)
        {
            IceCheckNonIdempotent(current);
            current.IncomingRequestFrame.ReadEmptyArgs();
            await this.ShutdownAsync(current, cancel).ConfigureAwait(false);
            return IceRpc.OutgoingResponseFrame.WithVoidReturnValue(current);
        }
    }
}
