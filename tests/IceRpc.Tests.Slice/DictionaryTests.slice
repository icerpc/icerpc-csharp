// Copyright (c) ZeroC, Inc. All rights reserved.

module IceRpc::Tests::Slice;

typealias ByteDict = dictionary<uint8, uint8>;
typealias BoolDict = dictionary<bool, bool>;
typealias Int16Dict = dictionary<int16, int16>;
typealias UInt16Dict = dictionary<uint16, uint16>;
typealias Int32Dict = dictionary<int32, int32>;
typealias VarInt32Dict = dictionary<varint32, varint32>;
typealias UInt32Dict = dictionary<uint32, uint32>;
typealias VarUInt32Dict = dictionary<varuint32, varuint32>;
typealias Int64Dict = dictionary<int64, int64>;
typealias VarInt62Dict = dictionary<varint62, varint62>;
typealias UInt64Dict = dictionary<uint64,uint64>;
typealias VarUInt62Dict = dictionary<varuint62, varuint62>;
typealias StringDict = dictionary<string, string>;

typealias MyEnumDict = dictionary<MyEnum, MyEnum>;
typealias MyFixedLengthEnumDict = dictionary<MyFixedLengthEnum, MyFixedLengthEnum>;
typealias MyUncheckedEnumDict = dictionary<MyUncheckedEnum, MyUncheckedEnum>;
typealias MyCompactStructDict = dictionary<MyCompactStruct, MyCompactStruct>;
typealias OperationsDict = dictionary<string, Operations>;
typealias AnotherCompactStructDict = dictionary<string, AnotherCompactStruct>;

typealias ByteCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<uint8, uint8>;
typealias BoolCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<bool, bool>;
typealias ShortCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<int16, int16>;
typealias UShortCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<uint16, uint16>;
typealias IntCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<int32, int32>;
typealias VarIntCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<varint32, varint32>;
typealias UIntCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<uint32, uint32>;
typealias VarUIntCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<varuint32, varuint32>;
typealias LongCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<int64, int64>;
typealias VarLongCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<varint62, varint62>;
typealias ULongCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<uint64,uint64>;
typealias VarULongCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<varuint62, varuint62>;
typealias StringCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<string, string>;

typealias MyEnumCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<MyEnum, MyEnum>;
typealias MyFixedLengthEnumCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<MyFixedLengthEnum, MyFixedLengthEnum>;
typealias MyUncheckedEnumCustomDict = [cs:generic("IceRpc.Tests.Slice.CustomDictionary")] dictionary<MyUncheckedEnum, MyUncheckedEnum>;

interface DictionaryOperations
{
    // Builtin type dictionaries
    opByteDict(p1: ByteDict, p2: ByteDict) -> (r1: ByteDict, r2: ByteDict);
    opBoolDict(p1: BoolDict, p2: BoolDict) -> (r1: BoolDict, r2: BoolDict);
    opInt16Dict(p1: Int16Dict, p2: Int16Dict) -> (r1: Int16Dict, r2: Int16Dict);
    opUInt16Dict(p1: UInt16Dict, p2: UInt16Dict) -> (r1: UInt16Dict, r2: UInt16Dict);
    opInt32Dict(p1: Int32Dict, p2: Int32Dict) -> (r1: Int32Dict, r2: Int32Dict);
    opVarInt32Dict(p1: VarInt32Dict, p2: VarInt32Dict) -> (r1: VarInt32Dict, r2: VarInt32Dict);
    opUInt32Dict(p1: UInt32Dict, p2: UInt32Dict) -> (r1: UInt32Dict, r2: UInt32Dict);
    opVarUInt32Dict(p1: VarUInt32Dict, p2: VarUInt32Dict) -> (r1: VarUInt32Dict, r2: VarUInt32Dict);
    opInt64Dict(p1: Int64Dict, p2: Int64Dict) -> (r1: Int64Dict, r2: Int64Dict);
    opVarInt62Dict(p1: VarInt62Dict, p2: VarInt62Dict) -> (r1: VarInt62Dict, r2: VarInt62Dict);
    opUInt64Dict(p1: UInt64Dict, p2: UInt64Dict) -> (r1: UInt64Dict, r2: UInt64Dict);
    opVarUInt62Dict(p1: VarUInt62Dict, p2: VarUInt62Dict) -> (r1: VarUInt62Dict, r2: VarUInt62Dict);
    opStringDict(p1: StringDict, p2: StringDict) -> (r1: StringDict, r2: StringDict);

    // Dictionaries with constructed types
    opMyEnumDict(p1: MyEnumDict, p2: MyEnumDict) -> (r1: MyEnumDict, r2: MyEnumDict);
    opMyFixedLengthEnumDict(p1: MyFixedLengthEnumDict, p2: MyFixedLengthEnumDict) -> (
        r1: MyFixedLengthEnumDict,
        r2: MyFixedLengthEnumDict,
    );
    opMyUncheckedEnumDict(p1: MyUncheckedEnumDict, p2: MyUncheckedEnumDict) -> (
        r1: MyUncheckedEnumDict,
        r2: MyUncheckedEnumDict,
    );
    opMyCompactStructDict(p1: MyCompactStructDict, p2: MyCompactStructDict) -> (
        r1: MyCompactStructDict,
        r2: MyCompactStructDict,
    );
    opOperationsDict(p1: OperationsDict, p2: OperationsDict) -> (r1: OperationsDict, r2: OperationsDict);
    opAnotherCompactStructDict(p1: AnotherCompactStructDict, p2: AnotherCompactStructDict) -> (
        r1: AnotherCompactStructDict,
        r2: AnotherCompactStructDict,
    );

    // Sorted dictionaries with builtin types
    opByteCustomDict(p1: ByteCustomDict, p2: ByteCustomDict) -> (r1: ByteCustomDict, r2: ByteCustomDict);
    opBoolCustomDict(p1: BoolCustomDict, p2: BoolCustomDict) -> (r1: BoolCustomDict, r2: BoolCustomDict);
    opShortCustomDict(p1: ShortCustomDict, p2: ShortCustomDict) -> (r1: ShortCustomDict, r2: ShortCustomDict);
    opUShortCustomDict(p1: UShortCustomDict, p2: UShortCustomDict) -> (r1: UShortCustomDict, r2: UShortCustomDict);
    opIntCustomDict(p1: IntCustomDict, p2: IntCustomDict) -> (r1: IntCustomDict, r2: IntCustomDict);
    opVarIntCustomDict(p1: VarIntCustomDict, p2: VarIntCustomDict) -> (r1: VarIntCustomDict, r2: VarIntCustomDict);
    opUIntCustomDict(p1: UIntCustomDict, p2: UIntCustomDict) -> (r1: UIntCustomDict, r2: UIntCustomDict);
    opVarUIntCustomDict(p1: VarUIntCustomDict, p2: VarUIntCustomDict) -> (
        r1: VarUIntCustomDict,
        r2: VarUIntCustomDict,
    );
    opLongCustomDict(p1: LongCustomDict, p2: LongCustomDict) -> (r1: LongCustomDict, r2: LongCustomDict);
    opVarLongCustomDict(p1: VarLongCustomDict, p2: VarLongCustomDict) -> (
        r1: VarLongCustomDict,
        r2: VarLongCustomDict,
    );
    opULongCustomDict(p1: ULongCustomDict, p2: ULongCustomDict) -> (r1: ULongCustomDict, r2: ULongCustomDict);
    opVarULongCustomDict(p1: VarULongCustomDict, p2: VarULongCustomDict) -> (
        r1: VarULongCustomDict,
        r2: VarULongCustomDict,
    );
    opStringCustomDict(p1: StringCustomDict, p2: StringCustomDict) -> (r1: StringCustomDict, r2: StringCustomDict);

    // Sorted dictionaries with constructed types
    opMyEnumCustomDict(p1: MyEnumCustomDict, p2: MyEnumCustomDict) -> (r1: MyEnumCustomDict, r2: MyEnumCustomDict);
    opMyFixedLengthEnumCustomDict(p1: MyFixedLengthEnumCustomDict, p2: MyFixedLengthEnumCustomDict) -> (
        r1: MyFixedLengthEnumCustomDict,
        r2: MyFixedLengthEnumCustomDict,
    );
    opMyUncheckedEnumCustomDict(p1: MyUncheckedEnumCustomDict, p2: MyUncheckedEnumCustomDict) -> (
        r1: MyUncheckedEnumCustomDict,
        r2: MyUncheckedEnumCustomDict,
    );
    // TODO Allow structs as sorted dictionary keys, implementing IComparable
}
