<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <TimeStampServer>http://timestamp.digicert.com</TimeStampServer>
    <SignCommand>/f "$(SIGN_CERTIFICATE)" /p $(SIGN_PASSWORD) /tr $(TimeStampServer) /td sha256 /fd sha256</SignCommand>
    <SignTool Condition="'$(SignTool)' == ''">signtool.exe</SignTool>
  </PropertyGroup>

  <!-- Authenticode sign task that retries on failures -->
  <UsingTask
    TaskName="SignTask"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)/Microsoft.Build.Tasks.Core.dll"
  >
    <ParameterGroup>
      <WorkingDirectory ParameterType="System.String" Required="true" />
      <AdditionalOptions ParameterType="System.String" Required="true" />
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="True" />
      <SignTool ParameterType="System.String" Required="false" />
    </ParameterGroup>
    <Task>
      <Code Type="Class" Language="cs" Source="$(MSBuildThisFileDirectory)/SignTask.cs" />
    </Task>
  </UsingTask>

  <Target
    Name="SignPackage"
    BeforeTargets="CopyFilesToOutputDirectory"
    Condition="'$(OS)' == 'Windows_NT' and Exists('$(SIGN_CERTIFICATE)') and (!Exists('$(IntermediateOutputPath)sign.log') or $([System.IO.File]::GetLastWriteTime('$(IntermediateOutputPath)$(TargetName)$(TargetExt)').Ticks) &gt; $([System.IO.File]::GetLastWriteTime('$(IntermediateOutputPath)sign.log').Ticks))"
  >
    <Message Text="Signing $(IntermediateOutputPath)$(TargetName)$(TargetExt)" />

    <!-- Authenticode signing -->
    <SignTask
      WorkingDirectory="$(IntermediateOutputPath)"
      AdditionalOptions="$(SignCommand)"
      Files="$(TargetName)$(TargetExt)"
      SignTool="$(SignTool)"
    />

    <WriteLinesToFile
      File="$(IntermediateOutputPath)sign.log"
      Encoding="Unicode"
      Overwrite="true"
      Lines="Signing $(IntermediateOutputPath)$(TargetName)$(TargetExt)"
    />
  </Target>

  <Target Name="SignPackageClean" AfterTargets="Clean" Condition="'$(OS)' == 'Windows_NT' ">
    <Delete Files="$(IntermediateOutputPath)sign.log" />
  </Target>

  <PropertyGroup>
    <BuildDependsOn>
          $(BuildDependsOn);
          SignPackage
      </BuildDependsOn>
  </PropertyGroup>
</Project>
