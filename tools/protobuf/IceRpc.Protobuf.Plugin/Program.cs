// Copyright (c) ZeroC, Inc.

using Google.Protobuf;
using Google.Protobuf.Compiler;
using Google.Protobuf.Reflection;
using IceRpc.Protoc;
using System.Text;

using Stream stdin = Console.OpenStandardInput();
var request = new CodeGeneratorRequest();
request.MergeFrom(stdin);

var protos = new List<ByteString>();
foreach (FileDescriptorProto? proto in request.ProtoFile)
{
    protos.Add(proto.ToByteString());
}
IReadOnlyList<FileDescriptor> descritors = FileDescriptor.BuildFromByteStrings(protos);

var response = new CodeGeneratorResponse();
foreach (FileDescriptor descritor in descritors)
{
    if (!request.FileToGenerate.Contains(descritor.Name))
    {
        // This descriptor represents a reference file for which we are not generating code.
        continue;
    }

    var builder = new StringBuilder();
    string preamble = $@"
// <auto-generated/>
// protoc-gen-icerpc-csharp version: 0.2.0
// Generated from file: {descritor.Name}

#nullable enable

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment

using IceRpc.Protobuf;

namespace {descritor.GetCsharpNamespace()};".Trim();
    builder.AppendLine(preamble);

    foreach (ServiceDescriptor service in descritor.Services)
    {
        builder.Append(ClientGenerator.GenerateInterface(service));
        builder.Append(ClientGenerator.GenerateImplementation(service));
        builder.Append(ServiceGenerator.GenerateInterface(service));
    }

    response.File.Add(
        new CodeGeneratorResponse.Types.File
        {
            Name = Path.ChangeExtension(Path.GetFileName(descritor.Name), ".IceRpc.cs"),
            Content = builder.ToString()
        });
}
using Stream stdout = Console.OpenStandardOutput();
response.WriteTo(stdout);
