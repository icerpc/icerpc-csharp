// Copyright (c) ZeroC, Inc.

module IceRpc::Tests::Slice

interface SequenceMappingOperations {

    returnSequenceOfInt32() -> sequence<int32>
    sendSequenceOfInt32(p: sequence<int32>)

    returnSequenceOfString() -> sequence<string>
    sendSequenceOfString(p: sequence<string>)

    returnSequenceOfMyFixedLengthEnum() -> sequence<MyFixedLengthEnum>
    sendSequenceOfMyFixedLengthEnum(p: sequence<MyFixedLengthEnum>)

    returnSequenceOfMyVarSizeEnum() -> sequence<MyVarSizeEnum>
    sendSequenceOfMyVarSizeEnum(p: sequence<MyVarSizeEnum>)

    returnSequenceOfMyUncheckedEnum() -> sequence<MyUncheckedEnum>
    sendSequenceOfMyUncheckedEnum(p: sequence<MyUncheckedEnum>)

    returnSequenceOfOptionalInt32() -> sequence<int32?>
    sendSequenceOfOptionalInt32(p: sequence<int32?>)

    returnSequenceOfOptionalString() -> sequence<string?>
    sendSequenceOfOptionalString(p: sequence<string?>)

    returnSequenceOfOptionalMyFixedLengthEnum() -> sequence<MyFixedLengthEnum?>
    sendSequenceOfOptionalMyFixedLengthEnum(p: sequence<MyFixedLengthEnum?>)

    returnSequenceOfOptionalMyVarSizeEnum() -> sequence<MyVarSizeEnum?>
    sendSequenceOfOptionalMyVarSizeEnum(p: sequence<MyVarSizeEnum?>)

    returnSequenceOfOptionalMyUncheckedEnum() -> sequence<MyUncheckedEnum?>
    sendSequenceOfOptionalMyUncheckedEnum(p: sequence<MyUncheckedEnum?>)

    returnCustomSequenceOfInt32() -> [cs::generic("CustomSequence")] sequence<int32>
    sendCustomSequenceOfInt32(p: [cs::generic("CustomSequence")] sequence<int32>)

    returnCustomSequenceOfString() -> [cs::generic("CustomSequence")] sequence<string>
    sendCustomSequenceOfString(p: [cs::generic("CustomSequence")] sequence<string>)

    returnCustomSequenceOfMyFixedLengthEnum() -> [cs::generic("CustomSequence")] sequence<MyFixedLengthEnum>
    sendCustomSequenceOfMyFixedLengthEnum(p: [cs::generic("CustomSequence")] sequence<MyFixedLengthEnum>)

    returnCustomSequenceOfMyVarSizeEnum() -> [cs::generic("CustomSequence")] sequence<MyVarSizeEnum>
    sendCustomSequenceOfMyVarSizeEnum(p: [cs::generic("CustomSequence")] sequence<MyVarSizeEnum>)

    returnCustomSequenceOfMyUncheckedEnum() -> [cs::generic("CustomSequence")] sequence<MyUncheckedEnum>
    sendCustomSequenceOfMyUncheckedEnum(p: [cs::generic("CustomSequence")] sequence<MyUncheckedEnum>)

    returnCustomSequenceOfOptionalInt32() -> [cs::generic("CustomSequence")] sequence<int32?>
    sendCustomSequenceOfOptionalInt32(p: [cs::generic("CustomSequence")] sequence<int32?>)

    returnCustomSequenceOfOptionalString() -> [cs::generic("CustomSequence")] sequence<string?>
    sendCustomSequenceOfOptionalString(p: [cs::generic("CustomSequence")] sequence<string?>)

    returnCustomSequenceOfOptionalMyFixedLengthEnum() -> [cs::generic("CustomSequence")] sequence<MyFixedLengthEnum?>
    sendCustomSequenceOfOptionalMyFixedLengthEnum(p: [cs::generic("CustomSequence")] sequence<MyFixedLengthEnum?>)

    returnCustomSequenceOfOptionalMyVarSizeEnum() -> [cs::generic("CustomSequence")] sequence<MyVarSizeEnum?>
    sendCustomSequenceOfOptionalMyVarSizeEnum(p: [cs::generic("CustomSequence")] sequence<MyVarSizeEnum?>)

    returnCustomSequenceOfOptionalMyUncheckedEnum() -> [cs::generic("CustomSequence")] sequence<MyUncheckedEnum?>
    sendCustomSequenceOfOptionalMyUncheckedEnum(p: [cs::generic("CustomSequence")] sequence<MyUncheckedEnum?>)

    opNumericTypeNestedSequence(p1: sequence<sequence<sequence<uint8>>>) -> sequence<sequence<sequence<uint8>>>
    opStructNestedSequence(p1: sequence<sequence<sequence<MyStruct>>>) -> sequence<sequence<sequence<MyStruct>>>

    opReturnTuple() -> (
        r1: [cs::generic("CustomSequence")] sequence<int32>
        r2: [cs::generic("CustomSequence")] sequence<int32>
    )
}
