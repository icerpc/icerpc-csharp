// Copyright (c) ZeroC, Inc. All rights reserved.

module IceRpc::Tests::Slice;

typealias OptionalUInt8Seq = sequence<uint8?>;
typealias OptionalBoolSeq = sequence<bool?>;
typealias OptionalInt16Seq = sequence<int16?>;
typealias OptionalUInt16Seq = sequence<uint16?>;
typealias OptionalInt32Seq = sequence<int32?>;
typealias OptionalVarInt32Seq = sequence<varint32?>;
typealias OptionalUInt32Seq = sequence<uint32?>;
typealias OptionalVarUInt32Seq = sequence<varuint32?>;
typealias OptionalInt64Seq = sequence<int64?>;
typealias OptionalVarInt62Seq = sequence<varint62?>;
typealias OptionalUInt64Seq = sequence<uint64?>;
typealias OptionalVarUInt62Seq = sequence<varuint62?>;
typealias OptionalFloat32Seq = sequence<float32?>;
typealias OptionalFloat64Seq = sequence<float64?>;
typealias OptionalStringSeq = sequence<string?>;

typealias OptionalMyEnumSeq = sequence<MyEnum?>;
typealias OptionalMyFixedLengthEnumSeq = sequence<MyFixedLengthEnum?>;
typealias OptionalMyUncheckedEnumSeq = sequence<MyUncheckedEnum?>;

typealias OptionalMyCompactStructSeq = sequence<MyCompactStruct?>;
typealias OptionalOperationsSeq = sequence<Operations?>;
typealias OptionalAnotherCompactStructSeq = sequence<AnotherCompactStruct?>;

interface SequenceOptionalElementOperations
{
    // Optional builtin types sequences
    opOptionalUInt8Seq(p1: OptionalUInt8Seq, p2: OptionalUInt8Seq) -> (r1: OptionalUInt8Seq, r2: OptionalUInt8Seq);
    opOptionalBoolSeq(p1: OptionalBoolSeq, p2: OptionalBoolSeq) -> (r1: OptionalBoolSeq, r2: OptionalBoolSeq);
    opOptionalInt16Seq(p1: OptionalInt16Seq, p2: OptionalInt16Seq) -> (r1: OptionalInt16Seq, r2: OptionalInt16Seq);
    opOptionalUInt16Seq(p1: OptionalUInt16Seq, p2: OptionalUInt16Seq) -> (
        r1: OptionalUInt16Seq,
        r2: OptionalUInt16Seq,
    );
    opOptionalInt32Seq(p1: OptionalInt32Seq, p2: OptionalInt32Seq) -> (r1: OptionalInt32Seq, r2: OptionalInt32Seq);
    opOptionalVarInt32Seq(p1: OptionalVarInt32Seq, p2: OptionalVarInt32Seq) -> (
        r1: OptionalVarInt32Seq,
        r2: OptionalVarInt32Seq,
    );
    opOptionalUInt32Seq(p1: OptionalUInt32Seq, p2: OptionalUInt32Seq) -> (r1: OptionalUInt32Seq, r2: OptionalUInt32Seq);
    opOptionalVarUInt32Seq(p1: OptionalVarUInt32Seq, p2: OptionalVarUInt32Seq) -> (
        r1: OptionalVarUInt32Seq,
        r2: OptionalVarUInt32Seq,
    );
    opOptionalInt64Seq(p1: OptionalInt64Seq, p2: OptionalInt64Seq) -> (r1: OptionalInt64Seq, r2: OptionalInt64Seq);
    opOptionalVarInt62Seq(p1: OptionalVarInt62Seq, p2: OptionalVarInt62Seq) -> (
        r1: OptionalVarInt62Seq,
        r2: OptionalVarInt62Seq,
    );
    opOptionalUInt64Seq(p1: OptionalUInt64Seq, p2: OptionalUInt64Seq) -> (
        r1: OptionalUInt64Seq,
        r2: OptionalUInt64Seq,
    );
    opOptionalVarUInt62Seq(p1: OptionalVarUInt62Seq, p2: OptionalVarUInt62Seq) -> (
        r1: OptionalVarUInt62Seq,
        r2: OptionalVarUInt62Seq,
    );
    opOptionalFloat32Seq(p1: OptionalFloat32Seq, p2: OptionalFloat32Seq) -> (r1: OptionalFloat32Seq, r2: OptionalFloat32Seq);
    opOptionalFloat64Seq(p1: OptionalFloat64Seq, p2: OptionalFloat64Seq) -> (
        r1: OptionalFloat64Seq,
        r2: OptionalFloat64Seq,
    );
    opOptionalStringSeq(p1: OptionalStringSeq, p2: OptionalStringSeq) -> (
        r1: OptionalStringSeq,
        r2: OptionalStringSeq,
    );

    // Optional defined types sequences
    opOptionalMyEnumSeq(p1: OptionalMyEnumSeq, p2: OptionalMyEnumSeq) -> (
        r1: OptionalMyEnumSeq,
        r2: OptionalMyEnumSeq,
    );
    opOptionalMyFixedLengthEnumSeq(p1: OptionalMyFixedLengthEnumSeq, p2: OptionalMyFixedLengthEnumSeq) -> (
        r1: OptionalMyFixedLengthEnumSeq,
        r2: OptionalMyFixedLengthEnumSeq,
    );
    opOptionalMyUncheckedEnumSeq(p1: OptionalMyUncheckedEnumSeq, p2: OptionalMyUncheckedEnumSeq) -> (
        r1: OptionalMyUncheckedEnumSeq,
        r2: OptionalMyUncheckedEnumSeq,
    );
    opOptionalMyCompactStructSeq(p1: OptionalMyCompactStructSeq, p2: OptionalMyCompactStructSeq) -> (
        r1: OptionalMyCompactStructSeq,
        r2: OptionalMyCompactStructSeq,
    );
    opOptionalOperationsSeq(p1: OptionalOperationsSeq, p2: OptionalOperationsSeq) -> (
        r1: OptionalOperationsSeq,
        r2: OptionalOperationsSeq,
    );
    opOptionalAnotherCompactStructSeq(p1: OptionalAnotherCompactStructSeq, p2: OptionalAnotherCompactStructSeq) -> (
        r1: OptionalAnotherCompactStructSeq,
        r2: OptionalAnotherCompactStructSeq,
    );
}
