// Copyright (c) ZeroC, Inc.

module IceRpc::Tests::Slice

// Used for testing the generated code corresponding to proxy and dispatch visitors.
interface MyOperationsA {
    // No parameters and void return
    opWithoutParametersAndVoidReturn()

    // Single parameter and return
    opWithSingleParameterAndReturnValue(p: int32) -> int32

    // Multiple parameter and return
    opWithMultipleParametersAndReturnValues(p1: int32, p2: int32) -> (r1: int32, r2: int32)

    // Compress attribute
    [compress(Args, Return)] opWithCompressArgsAndReturnAttribute(p: int32) -> int32

    // Stream parameters and return alone
    opWithByteStreamArgumentAndReturn(p: stream uint8) -> stream uint8
    opWithOptionalByteStreamArgumentAndReturn(p: stream uint8?) -> stream uint8?
    opWithIntStreamArgumentAndReturn(p: stream int32) -> stream int32
    opWithOptionalIntStreamArgumentAndReturn(p: stream int32?) -> stream int32?
    opWithStringStreamArgumentAndReturn(p: stream string) -> stream string
    opWithOptionalStringStreamArgumentAndReturn(p: stream string?) -> stream string?

    // Stream parameters and return along regular return and parameters
    opWithBothRegularAndStreamParameterAndReturn(p1: int32, p2: stream int32) -> (r1: int32, r2: stream int32)

    // idempotent operation
    idempotent idempotentOp()

    // cancel and features as regular parameter names
    opWithSpecialParameterNames(cancel: int32, features: int32)

    // Encoded result
    [cs::encodedReturn] opWithSingleReturnValueAndEncodedReturnAttribute() -> sequence<int32>
    [cs::encodedReturn] opWithMultipleReturnValuesAndEncodedReturnAttribute() -> (r1: sequence<int32>, r2: sequence<int32>)
    [cs::encodedReturn] opWithStreamReturnAndEncodedReturnAttribute() -> (r1: sequence<int32>, r2: stream int32)

    // C# keyword as operation name
    continue()

    // ReadOnlyMemory input parameters and return values
    opReadOnlyMemory(p1: sequence<int32>) -> sequence<int32>

    // ReadOnlyMemory optional input parameters and return values
    opReadOnlyMemoryOptional(p1: sequence<int32>?) -> sequence<int32>?

    // ReadOnlyMemory tagged input parameters and return values
    opReadOnlyMemoryTagged(tag(1) p1: sequence<int32>?) -> tag(1) sequence<int32>?

    // Proxy parameter and return value
    opWithProxyParameter(service: Pingable)
    opWithProxyReturnValue() -> Pingable

    opWithTrailingOptionalValues(p1: int32, p2: int32?, p3: int32, p4: int32?, p5: int32?)
    opWithTrailingOptionalValuesAndStream(p1: int32, p2: int32?, p3: int32, p4: int32?, p5: int32?, p6: stream uint8?)
}

interface MyDerivedOperationsA : MyOperationsA {
    // No parameters and void return
    opDerivedWithoutParametersAndVoidReturn()

    // Single parameter and return
    opDerivedWithSingleParameterAndReturnValue(p: int32) -> int32
}

interface MyTaggedOperations {
    op(tag(1) x: int32?, y: int32, tag(2) z: int32?)
}

// A prior version of MyTaggedOperations which doesn't contain any of the tagged parameters.
interface MyTaggedOperationsV0 {
    op(y: int32)
}

interface MyTaggedOperationsReadOnlyMemoryParams {
    op(x: sequence<int32>, tag(1) y: sequence<int32>?, tag(2) z: sequence<int32>?)
}
